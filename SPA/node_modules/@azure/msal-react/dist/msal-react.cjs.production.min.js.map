{"version":3,"file":"msal-react.cjs.production.min.js","sources":["../src/MsalContext.ts","../src/utils/utilities.ts","../src/hooks/useMsal.ts","../src/hooks/useAccount.ts","../src/hooks/useIsAuthenticated.ts","../src/hooks/useMsalAuthentication.ts","../src/components/AuthenticatedTemplate.tsx","../src/components/MsalAuthenticationTemplate.tsx","../src/MsalProvider.tsx","../src/packageMetadata.ts","../src/components/UnauthenticatedTemplate.tsx","../src/components/withMsal.tsx"],"sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport * as React from \"react\";\nimport { IPublicClientApplication, stubbedPublicClientApplication, Logger, InteractionStatus, AccountInfo } from \"@azure/msal-browser\";\n\nexport interface IMsalContext {\n    instance: IPublicClientApplication;\n    inProgress: InteractionStatus;\n    accounts: AccountInfo[];\n    logger: Logger;\n}\n\n/*\n * Stubbed context implementation\n * Only used when there is no provider, which is an unsupported scenario\n */\nconst defaultMsalContext: IMsalContext = {\n    instance: stubbedPublicClientApplication,\n    inProgress: InteractionStatus.None,\n    accounts: [],\n    logger: new Logger({})\n};\n\nexport const MsalContext = React.createContext<IMsalContext>(\n    defaultMsalContext\n);\nexport const MsalConsumer = MsalContext.Consumer;\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\n\ntype FaaCFunction = <T>(args: T) => React.ReactNode;\n\nexport function getChildrenOrFunction<T>(\n    children: React.ReactNode | FaaCFunction,\n    args: T\n): React.ReactNode {\n    if (typeof children === \"function\") {\n        return children(args);\n    }\n    return children;\n}\n\n/*\n * Utility types\n * Reference: https://github.com/piotrwitek/utility-types\n */\ntype SetDifference<A, B> = A extends B ? never : A;\ntype SetComplement<A, A1 extends A> = SetDifference<A, A1>;\nexport type Subtract<T extends T1, T1 extends object> = Pick<T,SetComplement<keyof T, keyof T1>>;\n\n/**\n * Helper function to determine whether 2 arrays are equal\n * Used to avoid unnecessary state updates\n * @param arrayA \n * @param arrayB \n */\nexport function accountArraysAreEqual(arrayA: Array<AccountIdentifiers>, arrayB: Array<AccountIdentifiers>): boolean {\n    if (arrayA.length !== arrayB.length) {\n        return false;\n    }\n\n    const comparisonArray = [...arrayB];\n\n    return arrayA.every((elementA) => {\n        const elementB = comparisonArray.shift();\n        if (!elementA || !elementB) {\n            return false;\n        }\n\n        return (elementA.homeAccountId === elementB.homeAccountId) && \n               (elementA.localAccountId === elementB.localAccountId) &&\n               (elementA.username === elementB.username);\n    });\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useContext } from \"react\";\nimport { IMsalContext, MsalContext } from \"../MsalContext\";\n\n/**\n * Returns Msal Context values\n */\nexport const useMsal = (): IMsalContext => useContext(MsalContext);\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useState, useEffect } from \"react\";\nimport { AccountInfo, IPublicClientApplication, InteractionStatus, AccountEntity } from \"@azure/msal-browser\";\nimport { useMsal } from \"./useMsal\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\n\nfunction getAccount(instance: IPublicClientApplication, accountIdentifiers: AccountIdentifiers): AccountInfo | null {\n    const allAccounts = instance.getAllAccounts();\n    if (allAccounts.length > 0 && (accountIdentifiers.homeAccountId || accountIdentifiers.localAccountId || accountIdentifiers.username)) {\n        const matchedAccounts = allAccounts.filter(accountObj => {\n            if (accountIdentifiers.username && accountIdentifiers.username.toLowerCase() !== accountObj.username.toLowerCase()) {\n                return false;\n            }\n            if (accountIdentifiers.homeAccountId && accountIdentifiers.homeAccountId.toLowerCase() !== accountObj.homeAccountId.toLowerCase()) {\n                return false;\n            }\n            if (accountIdentifiers.localAccountId && accountIdentifiers.localAccountId.toLowerCase() !== accountObj.localAccountId.toLowerCase()) {\n                return false;\n            }\n\n            return true;\n        });\n\n        return matchedAccounts[0] || null;\n    } else {\n        return null;\n    }\n}\n\n/**\n * Given 1 or more accountIdentifiers, returns the Account object if the user is signed-in\n * @param accountIdentifiers \n */\nexport function useAccount(accountIdentifiers: AccountIdentifiers): AccountInfo | null {\n    const { instance, inProgress } = useMsal();\n\n    const initialStateValue = inProgress === InteractionStatus.Startup ? null : getAccount(instance, accountIdentifiers);\n    const [account, setAccount] = useState<AccountInfo|null>(initialStateValue);\n\n    useEffect(() => {\n        const currentAccount = getAccount(instance, accountIdentifiers);\n        if (!AccountEntity.accountInfoIsEqual(account, currentAccount, true)) {\n            setAccount(currentAccount);\n        }\n    }, [inProgress, accountIdentifiers, instance, account]);\n\n    return account;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useState, useEffect } from \"react\";\nimport { useMsal } from \"./useMsal\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { useAccount } from \"./useAccount\";\nimport { AccountInfo, InteractionStatus } from \"@azure/msal-browser\";\n\nfunction isAuthenticated(allAccounts: AccountIdentifiers[], account: AccountInfo | null, matchAccount?: AccountIdentifiers): boolean {\n    if(matchAccount && (matchAccount.username || matchAccount.homeAccountId || matchAccount.localAccountId)) {\n        return !!account;\n    }   \n\n    return allAccounts.length > 0;\n}\n\n/**\n * Returns whether or not a user is currently signed-in. Optionally provide 1 or more accountIdentifiers to determine if a specific user is signed-in\n * @param matchAccount \n */\nexport function useIsAuthenticated(matchAccount?: AccountIdentifiers): boolean {\n    const { accounts: allAccounts, inProgress } = useMsal();\n    const account = useAccount(matchAccount || {});\n\n    const initialStateValue = inProgress === InteractionStatus.Startup ? false : isAuthenticated(allAccounts, account, matchAccount);\n    const [hasAuthenticated, setHasAuthenticated] = useState<boolean>(initialStateValue);\n\n    useEffect(() => {\n        setHasAuthenticated(isAuthenticated(allAccounts, account, matchAccount));\n    }, [allAccounts, account, matchAccount]);\n\n    return hasAuthenticated;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { useCallback, useEffect, useState } from \"react\";\nimport { PopupRequest, RedirectRequest, SsoSilentRequest, InteractionType, AuthenticationResult, AuthError, EventMessage, EventType, InteractionStatus } from \"@azure/msal-browser\";\nimport { useIsAuthenticated } from \"./useIsAuthenticated\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { useMsal } from \"./useMsal\";\n\nexport type MsalAuthenticationResult = {\n    login: Function; \n    result: AuthenticationResult|null;\n    error: AuthError|null;\n};\n\n/**\n * Invokes a login call if a user is not currently signed-in. Failed logins can be retried using the login callback returned.\n * Optionally provide a request object to be used in the login call.\n * Optionally provide a specific user that should be logged in.\n * @param interactionType \n * @param authenticationRequest \n * @param accountIdentifiers \n */\nexport function useMsalAuthentication(\n    interactionType: InteractionType, \n    authenticationRequest?: PopupRequest|RedirectRequest|SsoSilentRequest, \n    accountIdentifiers?: AccountIdentifiers\n): MsalAuthenticationResult {\n    const { instance, inProgress, logger } = useMsal();\n    const isAuthenticated = useIsAuthenticated(accountIdentifiers);\n    const [[result, error], setResponse] = useState<[AuthenticationResult|null, AuthError|null]>([null, null]);\n    const [hasBeenCalled, setHasBeenCalled] = useState<boolean>(false);\n\n    const login = useCallback(async (callbackInteractionType?: InteractionType, callbackRequest?: PopupRequest|RedirectRequest|SsoSilentRequest): Promise<AuthenticationResult|null> => {\n        const loginType = callbackInteractionType || interactionType;\n        const loginRequest = callbackRequest || authenticationRequest;\n        switch (loginType) {\n            case InteractionType.Popup:\n                logger.verbose(\"useMsalAuthentication - Calling loginPopup\");\n                return instance.loginPopup(loginRequest as PopupRequest);\n            case InteractionType.Redirect:\n                // This promise is not expected to resolve due to full frame redirect\n                logger.verbose(\"useMsalAuthentication - Calling loginRedirect\");\n                return instance.loginRedirect(loginRequest as RedirectRequest).then(null);\n            case InteractionType.Silent:\n                logger.verbose(\"useMsalAuthentication - Calling ssoSilent\");\n                return instance.ssoSilent(loginRequest as SsoSilentRequest);\n            default:\n                throw \"Invalid interaction type provided.\";\n        }\n    }, [instance, interactionType, authenticationRequest, logger]);\n\n    useEffect(() => {\n        const callbackId = instance.addEventCallback((message: EventMessage) => {\n            switch(message.eventType) {\n                case EventType.LOGIN_SUCCESS:\n                case EventType.SSO_SILENT_SUCCESS:\n                    if (message.payload) {\n                        setResponse([message.payload as AuthenticationResult, null]);\n                    }\n                    break;\n                case EventType.LOGIN_FAILURE:\n                case EventType.SSO_SILENT_FAILURE:\n                    if (message.error) {\n                        setResponse([null, message.error as AuthError]);\n                    }\n                    break;\n            }\n        });\n        logger.verbose(`useMsalAuthentication - Registered event callback with id: ${callbackId}`);\n\n        return () => {\n            if (callbackId) {\n                logger.verbose(`useMsalAuthentication - Removing event callback ${callbackId}`);\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, [instance, logger]);\n\n    useEffect(() => {\n        if (!hasBeenCalled && !error && !isAuthenticated && inProgress === InteractionStatus.None) {\n            logger.info(\"useMsalAuthentication - No user is authenticated, attempting to login\");\n            // Ensure login is only called one time from within this hook, any subsequent login attempts should use the callback returned\n            setHasBeenCalled(true);\n            login().catch(() => {\n                // Errors are handled by the event handler above\n                return;\n            });\n        }\n    }, [isAuthenticated, inProgress, error, hasBeenCalled, login, logger]);\n\n    return { login, result, error };\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { PropsWithChildren, useMemo } from \"react\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { getChildrenOrFunction } from \"../utils/utilities\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\n\nexport type AuthenticatedTemplateProps = PropsWithChildren<AccountIdentifiers>;\n\n/**\n * Renders child components if user is authenticated\n * @param props \n */\nexport function AuthenticatedTemplate({ username, homeAccountId, localAccountId, children }: AuthenticatedTemplateProps): React.ReactElement|null {\n    const context = useMsal();\n    const accountIdentifier: AccountIdentifiers = useMemo(() => {\n        return {\n            username,\n            homeAccountId,\n            localAccountId\n        };\n    }, [username, homeAccountId, localAccountId]);\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n    if (isAuthenticated && context.inProgress !== InteractionStatus.Startup) {\n        return (\n            <React.Fragment>\n                {getChildrenOrFunction(children, context)}\n            </React.Fragment>\n        );\n    }\n    return null;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { PropsWithChildren, useMemo } from \"react\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { getChildrenOrFunction } from \"../utils/utilities\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { MsalAuthenticationResult, useMsalAuthentication } from \"../hooks/useMsalAuthentication\";\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\nimport { InteractionType, PopupRequest, RedirectRequest, SsoSilentRequest, InteractionStatus } from \"@azure/msal-browser\";\nimport { IMsalContext } from \"../MsalContext\";\n\nexport type MsalAuthenticationProps = PropsWithChildren<AccountIdentifiers & {\n    interactionType: InteractionType;\n    authenticationRequest?: PopupRequest|RedirectRequest|SsoSilentRequest;\n    loadingComponent?: React.ElementType<IMsalContext>;\n    errorComponent?: React.ElementType<MsalAuthenticationResult>;\n}>;\n\n/**\n * Attempts to authenticate user if not already authenticated, then renders child components\n * @param props\n */\nexport function MsalAuthenticationTemplate({ \n    interactionType, \n    username, \n    homeAccountId, \n    localAccountId,\n    authenticationRequest, \n    loadingComponent: LoadingComponent,\n    errorComponent: ErrorComponent,\n    children \n}: MsalAuthenticationProps): React.ReactElement|null {\n    const accountIdentifier: AccountIdentifiers = useMemo(() => {\n        return {\n            username,\n            homeAccountId,\n            localAccountId\n        };\n    }, [username, homeAccountId, localAccountId]);\n    const context = useMsal();\n    const msalAuthResult = useMsalAuthentication(interactionType, authenticationRequest, accountIdentifier);\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n    if (msalAuthResult.error && context.inProgress === InteractionStatus.None) {\n        if (!!ErrorComponent) {\n            return <ErrorComponent {...msalAuthResult} />;\n        }\n\n        throw msalAuthResult.error;\n    }\n    \n    if (isAuthenticated) {\n        return (\n            <React.Fragment>\n                {getChildrenOrFunction(children, msalAuthResult)}\n            </React.Fragment>\n        );\n    } \n    \n    if (!!LoadingComponent && context.inProgress !== InteractionStatus.None) {\n        return <LoadingComponent {...context} />;\n    }\n\n    return null;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { useState, useEffect, PropsWithChildren, useMemo } from \"react\";\nimport {\n    IPublicClientApplication,\n    EventType,\n    EventMessage,\n    EventMessageUtils,\n    InteractionStatus,\n    Logger,\n    WrapperSKU,\n    AccountInfo\n} from \"@azure/msal-browser\";\nimport { MsalContext, IMsalContext } from \"./MsalContext\";\nimport { accountArraysAreEqual } from \"./utils/utilities\";\nimport { name as SKU, version } from \"./packageMetadata\";\n\nexport type MsalProviderProps = PropsWithChildren<{\n    instance: IPublicClientApplication;\n}>;\n\nexport function MsalProvider({instance, children}: MsalProviderProps): React.ReactElement {\n    useEffect(() => {\n        instance.initializeWrapperLibrary(WrapperSKU.React, version);\n    }, [instance]);\n    // Create a logger instance for msal-react with the same options as PublicClientApplication\n    const logger: Logger = useMemo(() => {\n        return instance.getLogger().clone(SKU, version);\n    }, [instance]);\n\n    // State hook to store accounts\n    const [accounts, setAccounts] = useState<AccountInfo[]>([]);\n    // State hook to store in progress value\n    const [inProgress, setInProgress] = useState<InteractionStatus>(InteractionStatus.Startup);\n\n    useEffect(() => {\n        const callbackId = instance.addEventCallback((message: EventMessage) => {\n            switch (message.eventType) {\n                case EventType.LOGIN_SUCCESS:\n                case EventType.SSO_SILENT_SUCCESS:\n                case EventType.HANDLE_REDIRECT_END:\n                case EventType.LOGIN_FAILURE:\n                case EventType.SSO_SILENT_FAILURE:\n                case EventType.LOGOUT_END:\n                case EventType.ACQUIRE_TOKEN_SUCCESS:\n                case EventType.ACQUIRE_TOKEN_FAILURE:\n                    const currentAccounts = instance.getAllAccounts();\n                    if (!accountArraysAreEqual(currentAccounts, accounts)) {\n                        logger.info(\"MsalProvider - updating account state\");\n                        setAccounts(currentAccounts);\n                    } else {\n                        logger.info(\"MsalProvider - no account changes\");\n                    }\n                    break;\n            }\n        });\n        logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);\n\n        return () => {\n            // Remove callback when component unmounts or accounts change\n            if (callbackId) {\n                logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, [instance, accounts, logger]);\n\n    useEffect(() => {\n        const callbackId = instance.addEventCallback((message: EventMessage) => {\n            const status = EventMessageUtils.getInteractionStatusFromEvent(message);\n            if (status !== null) {\n                logger.info(`MsalProvider - ${message.eventType} results in setting inProgress to ${status}`);\n                setInProgress(status);\n            }\n        });\n        logger.verbose(`MsalProvider - Registered event callback with id: ${callbackId}`);\n\n        instance.handleRedirectPromise().catch(() => {\n            // Errors should be handled by listening to the LOGIN_FAILURE event\n            return;\n        });\n\n        return () => {\n            if (callbackId) {\n                logger.verbose(`MsalProvider - Removing event callback ${callbackId}`);\n                instance.removeEventCallback(callbackId);\n            }\n        };\n    }, [instance, logger]);\n\n    const contextValue: IMsalContext = {\n        instance,\n        inProgress,\n        accounts,\n        logger\n    };\n\n    return (\n        <MsalContext.Provider value={contextValue}>\n            {children}\n        </MsalContext.Provider>\n    );\n}\n\n","/* eslint-disable header/header */\nexport const name = \"@azure/msal-react\";\nexport const version = \"1.0.1\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React, { PropsWithChildren, useMemo } from \"react\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { useIsAuthenticated } from \"../hooks/useIsAuthenticated\";\nimport { getChildrenOrFunction } from \"../utils/utilities\";\nimport { AccountIdentifiers } from \"../types/AccountIdentifiers\";\nimport { InteractionStatus } from \"@azure/msal-browser\";\n\nexport type UnauthenticatedTemplateProps = PropsWithChildren<AccountIdentifiers>;\n\n/**\n * Renders child components if user is unauthenticated\n * @param props \n */\nexport function UnauthenticatedTemplate({ username, homeAccountId, localAccountId, children }: UnauthenticatedTemplateProps): React.ReactElement|null {\n    const context = useMsal();\n    const accountIdentifier: AccountIdentifiers = useMemo(() => {\n        return {\n            username,\n            homeAccountId,\n            localAccountId\n        };\n    }, [username, homeAccountId, localAccountId]);\n    const isAuthenticated = useIsAuthenticated(accountIdentifier);\n\n    if (!isAuthenticated && context.inProgress !== InteractionStatus.Startup && context.inProgress !== InteractionStatus.HandleRedirect) {\n        return (\n            <React.Fragment>\n                {getChildrenOrFunction(children, context)}\n            </React.Fragment>\n        );\n    }\n    return null;\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport React from \"react\";\nimport { IMsalContext } from \"../MsalContext\";\nimport { useMsal } from \"../hooks/useMsal\";\nimport { Subtract } from \"../utils/utilities\";\n\nexport type WithMsalProps = {\n    msalContext: IMsalContext;\n};\n\n/**\n * Higher order component wraps provided component with msal by injecting msal context values into the component's props \n * @param Component \n */\nexport const withMsal = <P extends WithMsalProps>(Component: React.ComponentType<P>): React.FunctionComponent<Subtract<P,WithMsalProps>> => {\n    const ComponentWithMsal: React.FunctionComponent<Subtract<P,WithMsalProps>> = props => {\n        const msal = useMsal();\n        return <Component {...(props as P)} msalContext={msal} />;\n    };\n\n    const componentName =\n        Component.displayName || Component.name || \"Component\";\n    ComponentWithMsal.displayName = `withMsal(${componentName})`;\n\n    return ComponentWithMsal;\n};\n"],"names":["MsalContext","React","instance","stubbedPublicClientApplication","inProgress","InteractionStatus","None","accounts","logger","Logger","MsalConsumer","Consumer","getChildrenOrFunction","children","args","useMsal","useContext","getAccount","accountIdentifiers","allAccounts","getAllAccounts","length","homeAccountId","localAccountId","username","filter","accountObj","toLowerCase","useAccount","initialStateValue","Startup","account","setAccount","useState","useEffect","currentAccount","AccountEntity","accountInfoIsEqual","isAuthenticated","matchAccount","useIsAuthenticated","hasAuthenticated","setHasAuthenticated","useMsalAuthentication","interactionType","authenticationRequest","result","error","setResponse","hasBeenCalled","setHasBeenCalled","login","useCallback","async","callbackInteractionType","callbackRequest","loginRequest","InteractionType","Popup","verbose","loginPopup","Redirect","loginRedirect","then","Silent","ssoSilent","callbackId","addEventCallback","message","eventType","EventType","LOGIN_SUCCESS","SSO_SILENT_SUCCESS","payload","LOGIN_FAILURE","SSO_SILENT_FAILURE","removeEventCallback","info","catch","context","useMemo","Fragment","loadingComponent","LoadingComponent","errorComponent","ErrorComponent","accountIdentifier","msalAuthResult","initializeWrapperLibrary","WrapperSKU","getLogger","clone","setAccounts","setInProgress","HANDLE_REDIRECT_END","LOGOUT_END","ACQUIRE_TOKEN_SUCCESS","ACQUIRE_TOKEN_FAILURE","currentAccounts","arrayA","arrayB","comparisonArray","every","elementA","elementB","shift","accountArraysAreEqual","status","EventMessageUtils","getInteractionStatusFromEvent","handleRedirectPromise","Provider","value","HandleRedirect","Component","ComponentWithMsal","props","msal","msalContext","displayName","name"],"mappings":"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"}