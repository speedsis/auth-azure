{"version":3,"file":"EventHandler.js","sources":["../../src/event/EventHandler.ts"],"sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ICrypto, Logger } from \"@azure/msal-common\";\r\nimport { InteractionType } from \"../utils/BrowserConstants\";\r\nimport { EventCallbackFunction, EventError, EventMessage, EventPayload } from \"./EventMessage\";\r\nimport { EventType } from \"./EventType\";\r\n\r\nexport class EventHandler {\r\n    // Callback for subscribing to events\r\n    private eventCallbacks: Map<string, EventCallbackFunction>;\r\n    private logger: Logger;\r\n    private browserCrypto: ICrypto;\r\n\r\n    constructor(logger: Logger, browserCrypto: ICrypto) {\r\n        this.eventCallbacks = new Map();\r\n        this.logger = logger;\r\n        this.browserCrypto = browserCrypto;\r\n    }\r\n\r\n    /**\r\n     * Adds event callbacks to array\r\n     * @param callback\r\n     */\r\n    addEventCallback(callback: EventCallbackFunction): string | null {\r\n        if (typeof window !== \"undefined\") {\r\n            const callbackId = this.browserCrypto.createNewGuid();\r\n            this.eventCallbacks.set(callbackId, callback);\r\n            this.logger.verbose(`Event callback registered with id: ${callbackId}`);\r\n    \r\n            return callbackId;\r\n        }\r\n        \r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Removes callback with provided id from callback array\r\n     * @param callbackId\r\n     */\r\n    removeEventCallback(callbackId: string): void {\r\n        this.eventCallbacks.delete(callbackId);\r\n        this.logger.verbose(`Event callback ${callbackId} removed.`);\r\n    }\r\n\r\n    /**\r\n     * Emits events by calling callback with event message\r\n     * @param eventType\r\n     * @param interactionType\r\n     * @param payload\r\n     * @param error\r\n     */\r\n    emitEvent(eventType: EventType, interactionType?: InteractionType, payload?: EventPayload, error?: EventError): void {\r\n        if (typeof window !== \"undefined\") {\r\n            const message: EventMessage = {\r\n                eventType: eventType,\r\n                interactionType: interactionType || null,\r\n                payload: payload || null,\r\n                error: error || null,\r\n                timestamp: Date.now()\r\n            };\r\n\r\n            this.logger.info(`Emitting event: ${eventType}`);\r\n\r\n            this.eventCallbacks.forEach((callback: EventCallbackFunction, callbackId: string) => {\r\n                this.logger.verbose(`Emitting event to callback ${callbackId}: ${eventType}`);\r\n                callback.apply(null, [message]);\r\n            });\r\n        }\r\n    }\r\n\r\n}\r\n"],"names":[],"mappings":";;AAAA;;;;;IAgBI,sBAAY,MAAc,EAAE,aAAsB;QAC9C,IAAI,CAAC,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;QAChC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;KACtC;;;;;IAMD,uCAAgB,GAAhB,UAAiB,QAA+B;QAC5C,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YAC/B,IAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE,CAAC;YACtD,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YAC9C,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,wCAAsC,UAAY,CAAC,CAAC;YAExE,OAAO,UAAU,CAAC;SACrB;QAED,OAAO,IAAI,CAAC;KACf;;;;;IAMD,0CAAmB,GAAnB,UAAoB,UAAkB;QAClC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;QACvC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,oBAAkB,UAAU,cAAW,CAAC,CAAC;KAChE;;;;;;;;IASD,gCAAS,GAAT,UAAU,SAAoB,EAAE,eAAiC,EAAE,OAAsB,EAAE,KAAkB;QAA7G,iBAiBC;QAhBG,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YAC/B,IAAM,SAAO,GAAiB;gBAC1B,SAAS,EAAE,SAAS;gBACpB,eAAe,EAAE,eAAe,IAAI,IAAI;gBACxC,OAAO,EAAE,OAAO,IAAI,IAAI;gBACxB,KAAK,EAAE,KAAK,IAAI,IAAI;gBACpB,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;aACxB,CAAC;YAEF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAmB,SAAW,CAAC,CAAC;YAEjD,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,UAAC,QAA+B,EAAE,UAAkB;gBAC5E,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,gCAA8B,UAAU,UAAK,SAAW,CAAC,CAAC;gBAC9E,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,SAAO,CAAC,CAAC,CAAC;aACnC,CAAC,CAAC;SACN;KACJ;IAEL,mBAAC;AAAD,CAAC;;;;"}