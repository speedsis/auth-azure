{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\r\n */\n\nvar DatabaseStorage = function () {\n  function DatabaseStorage(dbName, tableName, version) {\n    this.dbName = dbName;\n    this.tableName = tableName;\n    this.version = version;\n    this.dbOpen = false;\n  }\n  /**\r\n   * Opens IndexedDB instance.\r\n   */\n\n\n  DatabaseStorage.prototype.open = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (resolve, reject) {\n          // TODO: Add timeouts?\n          var openDB = window.indexedDB.open(_this.dbName, _this.version);\n          openDB.addEventListener(\"upgradeneeded\", function (e) {\n            var event = e;\n            event.target.result.createObjectStore(_this.tableName);\n          });\n          openDB.addEventListener(\"success\", function (e) {\n            var event = e;\n            _this.db = event.target.result;\n            _this.dbOpen = true;\n            resolve();\n          });\n          openDB.addEventListener(\"error\", function (error) {\n            return reject(error);\n          });\n        })];\n      });\n    });\n  };\n  /**\r\n   * Retrieves item from IndexedDB instance.\r\n   * @param key\r\n   */\n\n\n  DatabaseStorage.prototype.get = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.dbOpen) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.open()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              // TODO: Add timeouts?\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readonly\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbGet = objectStore.get(key);\n              dbGet.addEventListener(\"success\", function (e) {\n                var event = e;\n                resolve(event.target.result);\n              });\n              dbGet.addEventListener(\"error\", function (e) {\n                return reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\r\n   * Adds item to IndexedDB under given key\r\n   * @param key\r\n   * @param payload\r\n   */\n\n\n  DatabaseStorage.prototype.put = function (key, payload) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!!this.dbOpen) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.open()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , new Promise(function (resolve, reject) {\n              // TODO: Add timeouts?\n              if (!_this.db) {\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\n              }\n\n              var transaction = _this.db.transaction([_this.tableName], \"readwrite\");\n\n              var objectStore = transaction.objectStore(_this.tableName);\n              var dbPut = objectStore.put(payload, key);\n              dbPut.addEventListener(\"success\", function (e) {\n                var event = e;\n                resolve(event.target.result);\n              });\n              dbPut.addEventListener(\"error\", function (e) {\n                return reject(e);\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  return DatabaseStorage;\n}();\n\nexport { DatabaseStorage };","map":{"version":3,"sources":["../../src/cache/DatabaseStorage.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\n\r\ninterface IDBOpenDBRequestEvent extends Event {\r\n    target: IDBOpenDBRequest & EventTarget;\r\n}\r\n\r\ninterface IDBOpenOnUpgradeNeededEvent extends IDBVersionChangeEvent {\r\n    target: IDBOpenDBRequest & EventTarget;\r\n}\r\n\r\ninterface IDBRequestEvent extends Event {\r\n    target: IDBRequest & EventTarget;\r\n}\r\n\r\n/**\r\n * Storage wrapper for IndexedDB storage in browsers: https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API\r\n */\r\nexport class DatabaseStorage<T>{\r\n    private db: IDBDatabase|undefined;\r\n    private dbName: string;\r\n    private tableName: string;\r\n    private version: number;\r\n    private dbOpen: boolean;\r\n\r\n    constructor(dbName: string, tableName: string, version: number) {\r\n        this.dbName = dbName;\r\n        this.tableName = tableName;\r\n        this.version = version;\r\n        this.dbOpen = false;\r\n    }\r\n\r\n    /**\r\n     * Opens IndexedDB instance.\r\n     */\r\n    async open(): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            // TODO: Add timeouts?\r\n            const openDB = window.indexedDB.open(this.dbName, this.version);\r\n            openDB.addEventListener(\"upgradeneeded\", (e: IDBVersionChangeEvent) => {\r\n                const event = e as IDBOpenOnUpgradeNeededEvent;\r\n                event.target.result.createObjectStore(this.tableName);\r\n            });\r\n            openDB.addEventListener(\"success\", (e: Event) => {\r\n                const event = e as IDBOpenDBRequestEvent;\r\n                this.db = event.target.result;\r\n                this.dbOpen = true;\r\n                resolve();\r\n            });\r\n\r\n            openDB.addEventListener(\"error\", error => reject(error));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Retrieves item from IndexedDB instance.\r\n     * @param key \r\n     */\r\n    async get(key: string): Promise<T> {\r\n        if (!this.dbOpen) {\r\n            await this.open();\r\n        }\r\n\r\n        return new Promise<T>((resolve, reject) => {\r\n            // TODO: Add timeouts?\r\n            if (!this.db) {\r\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\r\n            }\r\n\r\n            const transaction = this.db.transaction([this.tableName], \"readonly\");\r\n\r\n            const objectStore = transaction.objectStore(this.tableName);\r\n            const dbGet = objectStore.get(key);\r\n            dbGet.addEventListener(\"success\", (e: Event) => {\r\n                const event = e as IDBRequestEvent;\r\n                resolve(event.target.result);\r\n            });\r\n            dbGet.addEventListener(\"error\", e => reject(e));\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Adds item to IndexedDB under given key\r\n     * @param key \r\n     * @param payload \r\n     */\r\n    async put(key: string, payload: T): Promise<T> {\r\n        if (!this.dbOpen) {\r\n            await this.open();\r\n        }\r\n\r\n        return new Promise<T>((resolve: Function, reject: Function) => {\r\n            // TODO: Add timeouts?\r\n            if (!this.db) {\r\n                return reject(BrowserAuthError.createDatabaseNotOpenError());\r\n            }\r\n\r\n            const transaction = this.db.transaction([this.tableName], \"readwrite\");\r\n            const objectStore = transaction.objectStore(this.tableName);\r\n\r\n            const dbPut = objectStore.put(payload, key);\r\n            dbPut.addEventListener(\"success\", (e: Event) => {\r\n                const event = e as IDBRequestEvent;\r\n                resolve(event.target.result);\r\n            });\r\n            dbPut.addEventListener(\"error\", e => reject(e));\r\n        });\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}