{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { StringUtils, ProtocolUtils, ClientAuthError, UrlString } from '@azure/msal-common';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar BrowserProtocolUtils = function () {\n  function BrowserProtocolUtils() {}\n  /**\r\n   * Extracts the BrowserStateObject from the state string.\r\n   * @param browserCrypto\r\n   * @param state\r\n   */\n\n\n  BrowserProtocolUtils.extractBrowserRequestState = function (browserCrypto, state) {\n    if (StringUtils.isEmpty(state)) {\n      return null;\n    }\n\n    try {\n      var requestStateObj = ProtocolUtils.parseRequestState(browserCrypto, state);\n      return requestStateObj.libraryState.meta;\n    } catch (e) {\n      throw ClientAuthError.createInvalidStateError(state, e);\n    }\n  };\n  /**\r\n   * Parses properties of server response from url hash\r\n   * @param locationHash Hash from url\r\n   */\n\n\n  BrowserProtocolUtils.parseServerResponseFromHash = function (locationHash) {\n    if (!locationHash) {\n      return {};\n    }\n\n    var hashUrlString = new UrlString(locationHash);\n    return UrlString.getDeserializedHash(hashUrlString.getHash());\n  };\n\n  return BrowserProtocolUtils;\n}();\n\nexport { BrowserProtocolUtils };","map":{"version":3,"sources":["../../src/utils/BrowserProtocolUtils.ts"],"names":[],"mappings":";;;;AAAA;;;;;;AAYA,WAAA,oBAAA,GAAA,CAgCC;;;;;;;;AAzBU,EAAA,oBAAA,CAAA,0BAAA,GAAP,UAAkC,aAAlC,EAA0D,KAA1D,EAAuE;AACnE,QAAI,WAAW,CAAC,OAAZ,CAAoB,KAApB,CAAJ,EAAgC;AAC5B,aAAO,IAAP;AACH;;AAED,QAAI;AACA,UAAM,eAAe,GAAuB,aAAa,CAAC,iBAAd,CAAgC,aAAhC,EAA+C,KAA/C,CAA5C;AACA,aAAO,eAAe,CAAC,YAAhB,CAA6B,IAApC;AACH,KAHD,CAGE,OAAO,CAAP,EAAU;AACR,YAAM,eAAe,CAAC,uBAAhB,CAAwC,KAAxC,EAA+C,CAA/C,CAAN;AACH;AACJ,GAXM;;;;;;;AAiBA,EAAA,oBAAA,CAAA,2BAAA,GAAP,UAAmC,YAAnC,EAAuD;AACnD,QAAI,CAAC,YAAL,EAAmB;AACf,aAAO,EAAP;AACH;;AAED,QAAM,aAAa,GAAG,IAAI,SAAJ,CAAc,YAAd,CAAtB;AACA,WAAO,SAAS,CAAC,mBAAV,CAA8B,aAAa,CAAC,OAAd,EAA9B,CAAP;AACH,GAPM;;AAQX,SAAA,oBAAA;AAAC,C","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { InteractionType } from \"./BrowserConstants\";\r\nimport { StringUtils, ClientAuthError, ICrypto, RequestStateObject, ProtocolUtils, ServerAuthorizationCodeResponse, UrlString } from \"@azure/msal-common\";\r\n\r\nexport type BrowserStateObject = {\r\n    interactionType: InteractionType\r\n};\r\n\r\nexport class BrowserProtocolUtils {\r\n\r\n    /**\r\n     * Extracts the BrowserStateObject from the state string.\r\n     * @param browserCrypto \r\n     * @param state \r\n     */\r\n    static extractBrowserRequestState(browserCrypto: ICrypto, state: string): BrowserStateObject | null {\r\n        if (StringUtils.isEmpty(state)) {\r\n            return null;\r\n        }\r\n\r\n        try {\r\n            const requestStateObj: RequestStateObject = ProtocolUtils.parseRequestState(browserCrypto, state);\r\n            return requestStateObj.libraryState.meta as BrowserStateObject;\r\n        } catch (e) {\r\n            throw ClientAuthError.createInvalidStateError(state, e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses properties of server response from url hash\r\n     * @param locationHash Hash from url\r\n     */\r\n    static parseServerResponseFromHash(locationHash: string): ServerAuthorizationCodeResponse {\r\n        if (!locationHash) {\r\n            return {};\r\n        }\r\n        \r\n        const hashUrlString = new UrlString(locationHash);\r\n        return UrlString.getDeserializedHash(hashUrlString.getHash());\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}