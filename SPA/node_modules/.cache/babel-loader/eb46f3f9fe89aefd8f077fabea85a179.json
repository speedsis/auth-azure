{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { AuthError as AuthError$1 } from '../error/AuthError.js';\nimport { ClientAuthError as ClientAuthError$1 } from '../error/ClientAuthError.js';\nimport { ThrottlingUtils as ThrottlingUtils$1 } from './ThrottlingUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar NetworkManager = function () {\n  function NetworkManager(networkClient, cacheManager) {\n    this.networkClient = networkClient;\n    this.cacheManager = cacheManager;\n  }\n  /**\r\n   * Wraps sendPostRequestAsync with necessary preflight and postflight logic\r\n   * @param thumbprint\r\n   * @param tokenEndpoint\r\n   * @param options\r\n   */\n\n\n  NetworkManager.prototype.sendPostRequest = function (thumbprint, tokenEndpoint, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            ThrottlingUtils$1.preProcess(this.cacheManager, thumbprint);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.networkClient.sendPostRequestAsync(tokenEndpoint, options)];\n\n          case 2:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _a.sent();\n\n            if (e_1 instanceof AuthError$1) {\n              throw e_1;\n            } else {\n              throw ClientAuthError$1.createNetworkError(tokenEndpoint, e_1);\n            }\n\n          case 4:\n            ThrottlingUtils$1.postProcess(this.cacheManager, thumbprint, response);\n            return [2\n            /*return*/\n            , response];\n        }\n      });\n    });\n  };\n\n  return NetworkManager;\n}();\n\nexport { NetworkManager };","map":{"version":3,"sources":["../../src/network/NetworkManager.ts"],"names":["ThrottlingUtils","AuthError","ClientAuthError"],"mappings":";;;;;;;AAAA;;;;;;AAsBI,WAAA,cAAA,CAAY,aAAZ,EAA2C,YAA3C,EAAqE;AACjE,SAAK,aAAL,GAAqB,aAArB;AACA,SAAK,YAAL,GAAoB,YAApB;AACH;;;;;;;;;AAQK,EAAA,cAAA,CAAA,SAAA,CAAA,eAAA,GAAN,UAAyB,UAAzB,EAAwD,aAAxD,EAA+E,OAA/E,EAA6G;;;;;;AACzGA,YAAAA,iBAAe,CAAC,UAAhBA,CAA2B,KAAK,YAAhCA,EAA8C,UAA9CA;;;;;;AAIe,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,aAAL,CAAmB,oBAAnB,CAA2C,aAA3C,EAA0D,OAA1D,CAAN,CAAA;;;AAAX,YAAA,QAAQ,GAAG,EAAA,CAAA,IAAA,EAAX;;;;;;;;AAEA,gBAAI,GAAC,YAAYC,WAAjB,EAA4B;AACxB,oBAAM,GAAN;AACH,aAFD,MAEO;AACH,oBAAMC,iBAAe,CAAC,kBAAhBA,CAAmC,aAAnCA,EAAkD,GAAlDA,CAAN;AACH;;;AAGLF,YAAAA,iBAAe,CAAC,WAAhBA,CAA4B,KAAK,YAAjCA,EAA+C,UAA/CA,EAA2D,QAA3DA;AAEA,mBAAA,CAAA;AAAA;AAAA,cAAO,QAAP,CAAA;;;;AACH,GAjBK;;AAkBV,SAAA,cAAA;AAAC,C","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { INetworkModule, NetworkRequestOptions } from \"./INetworkModule\";\r\nimport { RequestThumbprint } from \"./RequestThumbprint\";\r\nimport { ThrottlingUtils } from \"./ThrottlingUtils\";\r\nimport { CacheManager } from \"../cache/CacheManager\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { AuthError } from \"../error/AuthError\";\r\n\r\nexport type NetworkResponse<T> = {\r\n    headers: Record<string, string>;\r\n    body: T;\r\n    status: number;\r\n};\r\n\r\nexport class NetworkManager {\r\n    private networkClient: INetworkModule;\r\n    private cacheManager: CacheManager;\r\n\r\n    constructor(networkClient: INetworkModule, cacheManager: CacheManager) {\r\n        this.networkClient = networkClient;\r\n        this.cacheManager = cacheManager;\r\n    }\r\n\r\n    /**\r\n     * Wraps sendPostRequestAsync with necessary preflight and postflight logic\r\n     * @param thumbprint\r\n     * @param tokenEndpoint\r\n     * @param options\r\n     */\r\n    async sendPostRequest<T>(thumbprint: RequestThumbprint, tokenEndpoint: string, options: NetworkRequestOptions): Promise<NetworkResponse<T>> {\r\n        ThrottlingUtils.preProcess(this.cacheManager, thumbprint);\r\n\r\n        let response;\r\n        try {\r\n            response = await this.networkClient.sendPostRequestAsync<T>(tokenEndpoint, options);\r\n        } catch (e) {\r\n            if (e instanceof AuthError) {\r\n                throw e;\r\n            } else {\r\n                throw ClientAuthError.createNetworkError(tokenEndpoint, e);\r\n            }\r\n        }\r\n\r\n        ThrottlingUtils.postProcess(this.cacheManager, thumbprint, response);\r\n\r\n        return response;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}