{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __spreadArrays } from '../_virtual/_tslib.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar Constants = {\n  LIBRARY_NAME: \"MSAL.JS\",\n  SKU: \"msal.js.common\",\n  // Prefix for all library cache entries\n  CACHE_PREFIX: \"msal\",\n  // default authority\n  DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\n  DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\n  // ADFS String\n  ADFS: \"adfs\",\n  // Default AAD Instance Discovery Endpoint\n  AAD_INSTANCE_DISCOVERY_ENDPT: \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\n  // Resource delimiter - used for certain cache entries\n  RESOURCE_DELIM: \"|\",\n  // Placeholder for non-existent account ids/objects\n  NO_ACCOUNT: \"NO_ACCOUNT\",\n  // Claims\n  CLAIMS: \"claims\",\n  // Consumer UTID\n  CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\n  // Default scopes\n  OPENID_SCOPE: \"openid\",\n  PROFILE_SCOPE: \"profile\",\n  OFFLINE_ACCESS_SCOPE: \"offline_access\",\n  EMAIL_SCOPE: \"email\",\n  // Default response type for authorization code flow\n  CODE_RESPONSE_TYPE: \"code\",\n  CODE_GRANT_TYPE: \"authorization_code\",\n  RT_GRANT_TYPE: \"refresh_token\",\n  FRAGMENT_RESPONSE_MODE: \"fragment\",\n  S256_CODE_CHALLENGE_METHOD: \"S256\",\n  URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\n  AUTHORIZATION_PENDING: \"authorization_pending\",\n  NOT_DEFINED: \"not_defined\",\n  EMPTY_STRING: \"\",\n  FORWARD_SLASH: \"/\",\n  IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\n  IMDS_VERSION: \"2020-06-01\",\n  IMDS_TIMEOUT: 2000,\n  AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\n  REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\n  KNOWN_PUBLIC_CLOUDS: [\"login.microsoftonline.com\", \"login.windows.net\", \"login.microsoft.com\", \"sts.windows.net\"]\n};\nvar OIDC_DEFAULT_SCOPES = [Constants.OPENID_SCOPE, Constants.PROFILE_SCOPE, Constants.OFFLINE_ACCESS_SCOPE];\n\nvar OIDC_SCOPES = __spreadArrays(OIDC_DEFAULT_SCOPES, [Constants.EMAIL_SCOPE]);\n/**\r\n * Request header names\r\n */\n\n\nvar HeaderNames;\n\n(function (HeaderNames) {\n  HeaderNames[\"CONTENT_TYPE\"] = \"Content-Type\";\n  HeaderNames[\"RETRY_AFTER\"] = \"Retry-After\";\n  HeaderNames[\"CCS_HEADER\"] = \"X-AnchorMailbox\";\n})(HeaderNames || (HeaderNames = {}));\n/**\r\n * Persistent cache keys MSAL which stay while user is logged in.\r\n */\n\n\nvar PersistentCacheKeys;\n\n(function (PersistentCacheKeys) {\n  PersistentCacheKeys[\"ID_TOKEN\"] = \"idtoken\";\n  PersistentCacheKeys[\"CLIENT_INFO\"] = \"client.info\";\n  PersistentCacheKeys[\"ADAL_ID_TOKEN\"] = \"adal.idtoken\";\n  PersistentCacheKeys[\"ERROR\"] = \"error\";\n  PersistentCacheKeys[\"ERROR_DESC\"] = \"error.description\";\n  PersistentCacheKeys[\"ACTIVE_ACCOUNT\"] = \"active-account\";\n})(PersistentCacheKeys || (PersistentCacheKeys = {}));\n/**\r\n * String constants related to AAD Authority\r\n */\n\n\nvar AADAuthorityConstants;\n\n(function (AADAuthorityConstants) {\n  AADAuthorityConstants[\"COMMON\"] = \"common\";\n  AADAuthorityConstants[\"ORGANIZATIONS\"] = \"organizations\";\n  AADAuthorityConstants[\"CONSUMERS\"] = \"consumers\";\n})(AADAuthorityConstants || (AADAuthorityConstants = {}));\n/**\r\n * Keys in the hashParams sent by AAD Server\r\n */\n\n\nvar AADServerParamKeys;\n\n(function (AADServerParamKeys) {\n  AADServerParamKeys[\"CLIENT_ID\"] = \"client_id\";\n  AADServerParamKeys[\"REDIRECT_URI\"] = \"redirect_uri\";\n  AADServerParamKeys[\"RESPONSE_TYPE\"] = \"response_type\";\n  AADServerParamKeys[\"RESPONSE_MODE\"] = \"response_mode\";\n  AADServerParamKeys[\"GRANT_TYPE\"] = \"grant_type\";\n  AADServerParamKeys[\"CLAIMS\"] = \"claims\";\n  AADServerParamKeys[\"SCOPE\"] = \"scope\";\n  AADServerParamKeys[\"ERROR\"] = \"error\";\n  AADServerParamKeys[\"ERROR_DESCRIPTION\"] = \"error_description\";\n  AADServerParamKeys[\"ACCESS_TOKEN\"] = \"access_token\";\n  AADServerParamKeys[\"ID_TOKEN\"] = \"id_token\";\n  AADServerParamKeys[\"REFRESH_TOKEN\"] = \"refresh_token\";\n  AADServerParamKeys[\"EXPIRES_IN\"] = \"expires_in\";\n  AADServerParamKeys[\"STATE\"] = \"state\";\n  AADServerParamKeys[\"NONCE\"] = \"nonce\";\n  AADServerParamKeys[\"PROMPT\"] = \"prompt\";\n  AADServerParamKeys[\"SESSION_STATE\"] = \"session_state\";\n  AADServerParamKeys[\"CLIENT_INFO\"] = \"client_info\";\n  AADServerParamKeys[\"CODE\"] = \"code\";\n  AADServerParamKeys[\"CODE_CHALLENGE\"] = \"code_challenge\";\n  AADServerParamKeys[\"CODE_CHALLENGE_METHOD\"] = \"code_challenge_method\";\n  AADServerParamKeys[\"CODE_VERIFIER\"] = \"code_verifier\";\n  AADServerParamKeys[\"CLIENT_REQUEST_ID\"] = \"client-request-id\";\n  AADServerParamKeys[\"X_CLIENT_SKU\"] = \"x-client-SKU\";\n  AADServerParamKeys[\"X_CLIENT_VER\"] = \"x-client-VER\";\n  AADServerParamKeys[\"X_CLIENT_OS\"] = \"x-client-OS\";\n  AADServerParamKeys[\"X_CLIENT_CPU\"] = \"x-client-CPU\";\n  AADServerParamKeys[\"X_CLIENT_CURR_TELEM\"] = \"x-client-current-telemetry\";\n  AADServerParamKeys[\"X_CLIENT_LAST_TELEM\"] = \"x-client-last-telemetry\";\n  AADServerParamKeys[\"X_MS_LIB_CAPABILITY\"] = \"x-ms-lib-capability\";\n  AADServerParamKeys[\"POST_LOGOUT_URI\"] = \"post_logout_redirect_uri\";\n  AADServerParamKeys[\"ID_TOKEN_HINT\"] = \"id_token_hint\";\n  AADServerParamKeys[\"DEVICE_CODE\"] = \"device_code\";\n  AADServerParamKeys[\"CLIENT_SECRET\"] = \"client_secret\";\n  AADServerParamKeys[\"CLIENT_ASSERTION\"] = \"client_assertion\";\n  AADServerParamKeys[\"CLIENT_ASSERTION_TYPE\"] = \"client_assertion_type\";\n  AADServerParamKeys[\"TOKEN_TYPE\"] = \"token_type\";\n  AADServerParamKeys[\"REQ_CNF\"] = \"req_cnf\";\n  AADServerParamKeys[\"OBO_ASSERTION\"] = \"assertion\";\n  AADServerParamKeys[\"REQUESTED_TOKEN_USE\"] = \"requested_token_use\";\n  AADServerParamKeys[\"ON_BEHALF_OF\"] = \"on_behalf_of\";\n  AADServerParamKeys[\"FOCI\"] = \"foci\";\n  AADServerParamKeys[\"CCS_HEADER\"] = \"X-AnchorMailbox\";\n})(AADServerParamKeys || (AADServerParamKeys = {}));\n/**\r\n * Claims request keys\r\n */\n\n\nvar ClaimsRequestKeys;\n\n(function (ClaimsRequestKeys) {\n  ClaimsRequestKeys[\"ACCESS_TOKEN\"] = \"access_token\";\n  ClaimsRequestKeys[\"XMS_CC\"] = \"xms_cc\";\n})(ClaimsRequestKeys || (ClaimsRequestKeys = {}));\n/**\r\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\r\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\r\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\r\n */\n\n\nvar PromptValue = {\n  LOGIN: \"login\",\n  SELECT_ACCOUNT: \"select_account\",\n  CONSENT: \"consent\",\n  NONE: \"none\",\n  CREATE: \"create\"\n};\n/**\r\n * SSO Types - generated to populate hints\r\n */\n\nvar SSOTypes;\n\n(function (SSOTypes) {\n  SSOTypes[\"ACCOUNT\"] = \"account\";\n  SSOTypes[\"SID\"] = \"sid\";\n  SSOTypes[\"LOGIN_HINT\"] = \"login_hint\";\n  SSOTypes[\"ID_TOKEN\"] = \"id_token\";\n  SSOTypes[\"DOMAIN_HINT\"] = \"domain_hint\";\n  SSOTypes[\"ORGANIZATIONS\"] = \"organizations\";\n  SSOTypes[\"CONSUMERS\"] = \"consumers\";\n  SSOTypes[\"ACCOUNT_ID\"] = \"accountIdentifier\";\n  SSOTypes[\"HOMEACCOUNT_ID\"] = \"homeAccountIdentifier\";\n})(SSOTypes || (SSOTypes = {}));\n/**\r\n * allowed values for codeVerifier\r\n */\n\n\nvar CodeChallengeMethodValues = {\n  PLAIN: \"plain\",\n  S256: \"S256\"\n};\n/**\r\n * allowed values for response_mode\r\n */\n\nvar ResponseMode;\n\n(function (ResponseMode) {\n  ResponseMode[\"QUERY\"] = \"query\";\n  ResponseMode[\"FRAGMENT\"] = \"fragment\";\n  ResponseMode[\"FORM_POST\"] = \"form_post\";\n})(ResponseMode || (ResponseMode = {}));\n/**\r\n * allowed grant_type\r\n */\n\n\nvar GrantType;\n\n(function (GrantType) {\n  GrantType[\"IMPLICIT_GRANT\"] = \"implicit\";\n  GrantType[\"AUTHORIZATION_CODE_GRANT\"] = \"authorization_code\";\n  GrantType[\"CLIENT_CREDENTIALS_GRANT\"] = \"client_credentials\";\n  GrantType[\"RESOURCE_OWNER_PASSWORD_GRANT\"] = \"password\";\n  GrantType[\"REFRESH_TOKEN_GRANT\"] = \"refresh_token\";\n  GrantType[\"DEVICE_CODE_GRANT\"] = \"device_code\";\n  GrantType[\"JWT_BEARER\"] = \"urn:ietf:params:oauth:grant-type:jwt-bearer\";\n})(GrantType || (GrantType = {}));\n/**\r\n * Account types in Cache\r\n */\n\n\nvar CacheAccountType;\n\n(function (CacheAccountType) {\n  CacheAccountType[\"MSSTS_ACCOUNT_TYPE\"] = \"MSSTS\";\n  CacheAccountType[\"ADFS_ACCOUNT_TYPE\"] = \"ADFS\";\n  CacheAccountType[\"MSAV1_ACCOUNT_TYPE\"] = \"MSA\";\n  CacheAccountType[\"GENERIC_ACCOUNT_TYPE\"] = \"Generic\"; // NTLM, Kerberos, FBA, Basic etc\n})(CacheAccountType || (CacheAccountType = {}));\n/**\r\n * Separators used in cache\r\n */\n\n\nvar Separators;\n\n(function (Separators) {\n  Separators[\"CACHE_KEY_SEPARATOR\"] = \"-\";\n  Separators[\"CLIENT_INFO_SEPARATOR\"] = \".\";\n})(Separators || (Separators = {}));\n/**\r\n * Credential Type stored in the cache\r\n */\n\n\nvar CredentialType;\n\n(function (CredentialType) {\n  CredentialType[\"ID_TOKEN\"] = \"IdToken\";\n  CredentialType[\"ACCESS_TOKEN\"] = \"AccessToken\";\n  CredentialType[\"ACCESS_TOKEN_WITH_AUTH_SCHEME\"] = \"AccessToken_With_AuthScheme\";\n  CredentialType[\"REFRESH_TOKEN\"] = \"RefreshToken\";\n})(CredentialType || (CredentialType = {}));\n/**\r\n * Credential Type stored in the cache\r\n */\n\n\nvar CacheSchemaType;\n\n(function (CacheSchemaType) {\n  CacheSchemaType[\"ACCOUNT\"] = \"Account\";\n  CacheSchemaType[\"CREDENTIAL\"] = \"Credential\";\n  CacheSchemaType[\"ID_TOKEN\"] = \"IdToken\";\n  CacheSchemaType[\"ACCESS_TOKEN\"] = \"AccessToken\";\n  CacheSchemaType[\"REFRESH_TOKEN\"] = \"RefreshToken\";\n  CacheSchemaType[\"APP_METADATA\"] = \"AppMetadata\";\n  CacheSchemaType[\"TEMPORARY\"] = \"TempCache\";\n  CacheSchemaType[\"TELEMETRY\"] = \"Telemetry\";\n  CacheSchemaType[\"UNDEFINED\"] = \"Undefined\";\n  CacheSchemaType[\"THROTTLING\"] = \"Throttling\";\n})(CacheSchemaType || (CacheSchemaType = {}));\n/**\r\n * Combine all cache types\r\n */\n\n\nvar CacheType;\n\n(function (CacheType) {\n  CacheType[CacheType[\"ADFS\"] = 1001] = \"ADFS\";\n  CacheType[CacheType[\"MSA\"] = 1002] = \"MSA\";\n  CacheType[CacheType[\"MSSTS\"] = 1003] = \"MSSTS\";\n  CacheType[CacheType[\"GENERIC\"] = 1004] = \"GENERIC\";\n  CacheType[CacheType[\"ACCESS_TOKEN\"] = 2001] = \"ACCESS_TOKEN\";\n  CacheType[CacheType[\"REFRESH_TOKEN\"] = 2002] = \"REFRESH_TOKEN\";\n  CacheType[CacheType[\"ID_TOKEN\"] = 2003] = \"ID_TOKEN\";\n  CacheType[CacheType[\"APP_METADATA\"] = 3001] = \"APP_METADATA\";\n  CacheType[CacheType[\"UNDEFINED\"] = 9999] = \"UNDEFINED\";\n})(CacheType || (CacheType = {}));\n/**\r\n * More Cache related constants\r\n */\n\n\nvar APP_METADATA = \"appmetadata\";\nvar CLIENT_INFO = \"client_info\";\nvar THE_FAMILY_ID = \"1\";\nvar AUTHORITY_METADATA_CONSTANTS = {\n  CACHE_KEY: \"authority-metadata\",\n  REFRESH_TIME_SECONDS: 3600 * 24 // 24 Hours\n\n};\nvar AuthorityMetadataSource;\n\n(function (AuthorityMetadataSource) {\n  AuthorityMetadataSource[\"CONFIG\"] = \"config\";\n  AuthorityMetadataSource[\"CACHE\"] = \"cache\";\n  AuthorityMetadataSource[\"NETWORK\"] = \"network\";\n})(AuthorityMetadataSource || (AuthorityMetadataSource = {}));\n\nvar SERVER_TELEM_CONSTANTS = {\n  SCHEMA_VERSION: 5,\n  MAX_CUR_HEADER_BYTES: 80,\n  MAX_LAST_HEADER_BYTES: 330,\n  MAX_CACHED_ERRORS: 50,\n  CACHE_KEY: \"server-telemetry\",\n  CATEGORY_SEPARATOR: \"|\",\n  VALUE_SEPARATOR: \",\",\n  OVERFLOW_TRUE: \"1\",\n  OVERFLOW_FALSE: \"0\",\n  UNKNOWN_ERROR: \"unknown_error\"\n};\n/**\r\n * Type of the authentication request\r\n */\n\nvar AuthenticationScheme;\n\n(function (AuthenticationScheme) {\n  AuthenticationScheme[\"POP\"] = \"pop\";\n  AuthenticationScheme[\"BEARER\"] = \"Bearer\";\n})(AuthenticationScheme || (AuthenticationScheme = {}));\n/**\r\n * Constants related to throttling\r\n */\n\n\nvar ThrottlingConstants = {\n  // Default time to throttle RequestThumbprint in seconds\n  DEFAULT_THROTTLE_TIME_SECONDS: 60,\n  // Default maximum time to throttle in seconds, overrides what the server sends back\n  DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\n  // Prefix for storing throttling entries\n  THROTTLING_PREFIX: \"throttling\",\n  // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\n  X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\"\n};\nvar Errors = {\n  INVALID_GRANT_ERROR: \"invalid_grant\",\n  CLIENT_MISMATCH_ERROR: \"client_mismatch\"\n};\n/**\r\n * Password grant parameters\r\n */\n\nvar PasswordGrantConstants;\n\n(function (PasswordGrantConstants) {\n  PasswordGrantConstants[\"username\"] = \"username\";\n  PasswordGrantConstants[\"password\"] = \"password\";\n})(PasswordGrantConstants || (PasswordGrantConstants = {}));\n/**\r\n * Response codes\r\n */\n\n\nvar ResponseCodes;\n\n(function (ResponseCodes) {\n  ResponseCodes[ResponseCodes[\"httpSuccess\"] = 200] = \"httpSuccess\";\n  ResponseCodes[ResponseCodes[\"httpBadRequest\"] = 400] = \"httpBadRequest\";\n})(ResponseCodes || (ResponseCodes = {}));\n/**\r\n * Region Discovery Sources\r\n */\n\n\nvar RegionDiscoverySources;\n\n(function (RegionDiscoverySources) {\n  RegionDiscoverySources[\"FAILED_AUTO_DETECTION\"] = \"1\";\n  RegionDiscoverySources[\"INTERNAL_CACHE\"] = \"2\";\n  RegionDiscoverySources[\"ENVIRONMENT_VARIABLE\"] = \"3\";\n  RegionDiscoverySources[\"IMDS\"] = \"4\";\n})(RegionDiscoverySources || (RegionDiscoverySources = {}));\n/**\r\n * Region Discovery Outcomes\r\n */\n\n\nvar RegionDiscoveryOutcomes;\n\n(function (RegionDiscoveryOutcomes) {\n  RegionDiscoveryOutcomes[\"CONFIGURED_MATCHES_DETECTED\"] = \"1\";\n  RegionDiscoveryOutcomes[\"CONFIGURED_NO_AUTO_DETECTION\"] = \"2\";\n  RegionDiscoveryOutcomes[\"CONFIGURED_NOT_DETECTED\"] = \"3\";\n  RegionDiscoveryOutcomes[\"AUTO_DETECTION_REQUESTED_SUCCESSFUL\"] = \"4\";\n  RegionDiscoveryOutcomes[\"AUTO_DETECTION_REQUESTED_FAILED\"] = \"5\";\n})(RegionDiscoveryOutcomes || (RegionDiscoveryOutcomes = {}));\n\nvar CacheOutcome;\n\n(function (CacheOutcome) {\n  CacheOutcome[\"NO_CACHE_HIT\"] = \"0\";\n  CacheOutcome[\"FORCE_REFRESH\"] = \"1\";\n  CacheOutcome[\"NO_CACHED_ACCESS_TOKEN\"] = \"2\";\n  CacheOutcome[\"CACHED_ACCESS_TOKEN_EXPIRED\"] = \"3\";\n  CacheOutcome[\"REFRESH_CACHED_ACCESS_TOKEN\"] = \"4\";\n})(CacheOutcome || (CacheOutcome = {}));\n\nexport { AADAuthorityConstants, AADServerParamKeys, APP_METADATA, AUTHORITY_METADATA_CONSTANTS, AuthenticationScheme, AuthorityMetadataSource, CLIENT_INFO, CacheAccountType, CacheOutcome, CacheSchemaType, CacheType, ClaimsRequestKeys, CodeChallengeMethodValues, Constants, CredentialType, Errors, GrantType, HeaderNames, OIDC_DEFAULT_SCOPES, OIDC_SCOPES, PasswordGrantConstants, PersistentCacheKeys, PromptValue, RegionDiscoveryOutcomes, RegionDiscoverySources, ResponseCodes, ResponseMode, SERVER_TELEM_CONSTANTS, SSOTypes, Separators, THE_FAMILY_ID, ThrottlingConstants };","map":{"version":3,"sources":["../../src/utils/Constants.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nexport const Constants = {\r\n    LIBRARY_NAME: \"MSAL.JS\",\r\n    SKU: \"msal.js.common\",\r\n    // Prefix for all library cache entries\r\n    CACHE_PREFIX: \"msal\",\r\n    // default authority\r\n    DEFAULT_AUTHORITY: \"https://login.microsoftonline.com/common/\",\r\n    DEFAULT_AUTHORITY_HOST: \"login.microsoftonline.com\",\r\n    // ADFS String\r\n    ADFS: \"adfs\",\r\n    // Default AAD Instance Discovery Endpoint\r\n    AAD_INSTANCE_DISCOVERY_ENDPT: \"https://login.microsoftonline.com/common/discovery/instance?api-version=1.1&authorization_endpoint=\",\r\n    // Resource delimiter - used for certain cache entries\r\n    RESOURCE_DELIM: \"|\",\r\n    // Placeholder for non-existent account ids/objects\r\n    NO_ACCOUNT: \"NO_ACCOUNT\",\r\n    // Claims\r\n    CLAIMS: \"claims\",\r\n    // Consumer UTID\r\n    CONSUMER_UTID: \"9188040d-6c67-4c5b-b112-36a304b66dad\",\r\n    // Default scopes\r\n    OPENID_SCOPE: \"openid\",\r\n    PROFILE_SCOPE: \"profile\",\r\n    OFFLINE_ACCESS_SCOPE: \"offline_access\",\r\n    EMAIL_SCOPE: \"email\",\r\n    // Default response type for authorization code flow\r\n    CODE_RESPONSE_TYPE: \"code\",\r\n    CODE_GRANT_TYPE: \"authorization_code\",\r\n    RT_GRANT_TYPE: \"refresh_token\",\r\n    FRAGMENT_RESPONSE_MODE: \"fragment\",\r\n    S256_CODE_CHALLENGE_METHOD: \"S256\",\r\n    URL_FORM_CONTENT_TYPE: \"application/x-www-form-urlencoded;charset=utf-8\",\r\n    AUTHORIZATION_PENDING: \"authorization_pending\",\r\n    NOT_DEFINED: \"not_defined\",\r\n    EMPTY_STRING: \"\",\r\n    FORWARD_SLASH: \"/\",\r\n    IMDS_ENDPOINT: \"http://169.254.169.254/metadata/instance/compute/location\",\r\n    IMDS_VERSION: \"2020-06-01\",\r\n    IMDS_TIMEOUT: 2000,\r\n    AZURE_REGION_AUTO_DISCOVER_FLAG: \"TryAutoDetect\",\r\n    REGIONAL_AUTH_PUBLIC_CLOUD_SUFFIX: \"login.microsoft.com\",\r\n    KNOWN_PUBLIC_CLOUDS: [\"login.microsoftonline.com\", \"login.windows.net\", \"login.microsoft.com\", \"sts.windows.net\"]\r\n};\r\n\r\nexport const OIDC_DEFAULT_SCOPES = [\r\n    Constants.OPENID_SCOPE,\r\n    Constants.PROFILE_SCOPE,\r\n    Constants.OFFLINE_ACCESS_SCOPE\r\n];\r\n\r\nexport const OIDC_SCOPES = [\r\n    ...OIDC_DEFAULT_SCOPES,\r\n    Constants.EMAIL_SCOPE\r\n];\r\n\r\n/**\r\n * Request header names\r\n */\r\nexport enum HeaderNames {\r\n    CONTENT_TYPE = \"Content-Type\",\r\n    RETRY_AFTER = \"Retry-After\",\r\n    CCS_HEADER = \"X-AnchorMailbox\"\r\n}\r\n\r\n/**\r\n * Persistent cache keys MSAL which stay while user is logged in.\r\n */\r\nexport enum PersistentCacheKeys {\r\n    ID_TOKEN = \"idtoken\",\r\n    CLIENT_INFO = \"client.info\",\r\n    ADAL_ID_TOKEN = \"adal.idtoken\",\r\n    ERROR = \"error\",\r\n    ERROR_DESC = \"error.description\",\r\n    ACTIVE_ACCOUNT = \"active-account\"\r\n}\r\n\r\n/**\r\n * String constants related to AAD Authority\r\n */\r\nexport enum AADAuthorityConstants {\r\n    COMMON = \"common\",\r\n    ORGANIZATIONS = \"organizations\",\r\n    CONSUMERS = \"consumers\"\r\n}\r\n\r\n/**\r\n * Keys in the hashParams sent by AAD Server\r\n */\r\nexport enum AADServerParamKeys {\r\n    CLIENT_ID = \"client_id\",\r\n    REDIRECT_URI = \"redirect_uri\",\r\n    RESPONSE_TYPE = \"response_type\",\r\n    RESPONSE_MODE = \"response_mode\",\r\n    GRANT_TYPE = \"grant_type\",\r\n    CLAIMS = \"claims\",\r\n    SCOPE = \"scope\",\r\n    ERROR = \"error\",\r\n    ERROR_DESCRIPTION = \"error_description\",\r\n    ACCESS_TOKEN = \"access_token\",\r\n    ID_TOKEN = \"id_token\",\r\n    REFRESH_TOKEN = \"refresh_token\",\r\n    EXPIRES_IN = \"expires_in\",\r\n    STATE = \"state\",\r\n    NONCE = \"nonce\",\r\n    PROMPT = \"prompt\",\r\n    SESSION_STATE = \"session_state\",\r\n    CLIENT_INFO = \"client_info\",\r\n    CODE = \"code\",\r\n    CODE_CHALLENGE = \"code_challenge\",\r\n    CODE_CHALLENGE_METHOD = \"code_challenge_method\",\r\n    CODE_VERIFIER = \"code_verifier\",\r\n    CLIENT_REQUEST_ID = \"client-request-id\",\r\n    X_CLIENT_SKU = \"x-client-SKU\",\r\n    X_CLIENT_VER = \"x-client-VER\",\r\n    X_CLIENT_OS = \"x-client-OS\",\r\n    X_CLIENT_CPU = \"x-client-CPU\",\r\n    X_CLIENT_CURR_TELEM = \"x-client-current-telemetry\",\r\n    X_CLIENT_LAST_TELEM = \"x-client-last-telemetry\",\r\n    X_MS_LIB_CAPABILITY = \"x-ms-lib-capability\",\r\n    POST_LOGOUT_URI = \"post_logout_redirect_uri\",\r\n    ID_TOKEN_HINT= \"id_token_hint\",\r\n    DEVICE_CODE = \"device_code\",\r\n    CLIENT_SECRET = \"client_secret\",\r\n    CLIENT_ASSERTION = \"client_assertion\",\r\n    CLIENT_ASSERTION_TYPE = \"client_assertion_type\",\r\n    TOKEN_TYPE = \"token_type\",\r\n    REQ_CNF = \"req_cnf\",\r\n    OBO_ASSERTION = \"assertion\",\r\n    REQUESTED_TOKEN_USE = \"requested_token_use\",\r\n    ON_BEHALF_OF = \"on_behalf_of\",\r\n    FOCI = \"foci\",\r\n    CCS_HEADER = \"X-AnchorMailbox\"\r\n}\r\n\r\n/**\r\n * Claims request keys\r\n */\r\nexport enum ClaimsRequestKeys {\r\n    ACCESS_TOKEN = \"access_token\",\r\n    XMS_CC = \"xms_cc\"\r\n}\r\n\r\n/**\r\n * we considered making this \"enum\" in the request instead of string, however it looks like the allowed list of\r\n * prompt values kept changing over past couple of years. There are some undocumented prompt values for some\r\n * internal partners too, hence the choice of generic \"string\" type instead of the \"enum\"\r\n */\r\nexport const PromptValue = {\r\n    LOGIN: \"login\",\r\n    SELECT_ACCOUNT: \"select_account\",\r\n    CONSENT: \"consent\",\r\n    NONE: \"none\",\r\n    CREATE: \"create\"\r\n};\r\n\r\n/**\r\n * SSO Types - generated to populate hints\r\n */\r\nexport enum SSOTypes {\r\n    ACCOUNT = \"account\",\r\n    SID = \"sid\",\r\n    LOGIN_HINT = \"login_hint\",\r\n    ID_TOKEN = \"id_token\",\r\n    DOMAIN_HINT = \"domain_hint\",\r\n    ORGANIZATIONS = \"organizations\",\r\n    CONSUMERS = \"consumers\",\r\n    ACCOUNT_ID = \"accountIdentifier\",\r\n    HOMEACCOUNT_ID = \"homeAccountIdentifier\"\r\n}\r\n\r\n/**\r\n * Disallowed extra query parameters.\r\n */\r\nexport const BlacklistedEQParams = [\r\n    SSOTypes.SID,\r\n    SSOTypes.LOGIN_HINT\r\n];\r\n\r\n/**\r\n * allowed values for codeVerifier\r\n */\r\nexport const CodeChallengeMethodValues = {\r\n    PLAIN: \"plain\",\r\n    S256: \"S256\"\r\n};\r\n\r\n/**\r\n * The method used to encode the code verifier for the code challenge parameter. can be one\r\n * of plain or s256. if excluded, code challenge is assumed to be plaintext. for more\r\n * information, see the pkce rcf: https://tools.ietf.org/html/rfc7636\r\n */\r\nexport const CodeChallengeMethodValuesArray: string[] = [\r\n    CodeChallengeMethodValues.PLAIN,\r\n    CodeChallengeMethodValues.S256\r\n];\r\n\r\n/**\r\n * allowed values for response_mode\r\n */\r\nexport enum ResponseMode {\r\n    QUERY = \"query\",\r\n    FRAGMENT = \"fragment\",\r\n    FORM_POST = \"form_post\"\r\n}\r\n\r\n/**\r\n * allowed grant_type\r\n */\r\nexport enum GrantType {\r\n    IMPLICIT_GRANT = \"implicit\",\r\n    AUTHORIZATION_CODE_GRANT = \"authorization_code\",\r\n    CLIENT_CREDENTIALS_GRANT = \"client_credentials\",\r\n    RESOURCE_OWNER_PASSWORD_GRANT = \"password\",\r\n    REFRESH_TOKEN_GRANT = \"refresh_token\",\r\n    DEVICE_CODE_GRANT = \"device_code\",\r\n    JWT_BEARER = \"urn:ietf:params:oauth:grant-type:jwt-bearer\"\r\n}\r\n\r\n/**\r\n * Account types in Cache\r\n */\r\nexport enum CacheAccountType {\r\n    MSSTS_ACCOUNT_TYPE = \"MSSTS\",\r\n    ADFS_ACCOUNT_TYPE = \"ADFS\",\r\n    MSAV1_ACCOUNT_TYPE = \"MSA\",\r\n    GENERIC_ACCOUNT_TYPE = \"Generic\" // NTLM, Kerberos, FBA, Basic etc\r\n}\r\n\r\n/**\r\n * Separators used in cache\r\n */\r\nexport enum Separators {\r\n    CACHE_KEY_SEPARATOR = \"-\",\r\n    CLIENT_INFO_SEPARATOR = \".\"\r\n}\r\n\r\n/**\r\n * Credential Type stored in the cache\r\n */\r\nexport enum CredentialType {\r\n    ID_TOKEN = \"IdToken\",\r\n    ACCESS_TOKEN = \"AccessToken\",\r\n    ACCESS_TOKEN_WITH_AUTH_SCHEME = \"AccessToken_With_AuthScheme\",\r\n    REFRESH_TOKEN = \"RefreshToken\",\r\n}\r\n\r\n/**\r\n * Credential Type stored in the cache\r\n */\r\nexport enum CacheSchemaType {\r\n    ACCOUNT = \"Account\",\r\n    CREDENTIAL = \"Credential\",\r\n    ID_TOKEN = \"IdToken\",\r\n    ACCESS_TOKEN = \"AccessToken\",\r\n    REFRESH_TOKEN = \"RefreshToken\",\r\n    APP_METADATA = \"AppMetadata\",\r\n    TEMPORARY = \"TempCache\",\r\n    TELEMETRY = \"Telemetry\",\r\n    UNDEFINED = \"Undefined\",\r\n    THROTTLING = \"Throttling\"\r\n}\r\n\r\n/**\r\n * Combine all cache types\r\n */\r\nexport enum CacheType {\r\n    ADFS = 1001,\r\n    MSA = 1002,\r\n    MSSTS = 1003,\r\n    GENERIC = 1004,\r\n    ACCESS_TOKEN = 2001,\r\n    REFRESH_TOKEN = 2002,\r\n    ID_TOKEN = 2003,\r\n    APP_METADATA = 3001,\r\n    UNDEFINED = 9999\r\n}\r\n\r\n/**\r\n * More Cache related constants\r\n */\r\nexport const APP_METADATA = \"appmetadata\";\r\nexport const CLIENT_INFO = \"client_info\";\r\nexport const THE_FAMILY_ID = \"1\";\r\n\r\nexport const AUTHORITY_METADATA_CONSTANTS = {\r\n    CACHE_KEY: \"authority-metadata\",\r\n    REFRESH_TIME_SECONDS: 3600 * 24 // 24 Hours\r\n};\r\n\r\nexport enum AuthorityMetadataSource {\r\n    CONFIG = \"config\",\r\n    CACHE = \"cache\",\r\n    NETWORK = \"network\"\r\n}\r\n\r\nexport const SERVER_TELEM_CONSTANTS = {\r\n    SCHEMA_VERSION: 5,\r\n    MAX_CUR_HEADER_BYTES: 80, // ESTS limit is 100B, set to 80 to provide a 20B buffer\r\n    MAX_LAST_HEADER_BYTES: 330, // ESTS limit is 350B, set to 330 to provide a 20B buffer,\r\n    MAX_CACHED_ERRORS: 50, // Limit the number of errors that can be stored to prevent uncontrolled size gains\r\n    CACHE_KEY: \"server-telemetry\",\r\n    CATEGORY_SEPARATOR: \"|\",\r\n    VALUE_SEPARATOR: \",\",\r\n    OVERFLOW_TRUE: \"1\",\r\n    OVERFLOW_FALSE: \"0\",\r\n    UNKNOWN_ERROR: \"unknown_error\"\r\n};\r\n\r\n/**\r\n * Type of the authentication request\r\n */\r\nexport enum AuthenticationScheme {\r\n    POP = \"pop\",\r\n    BEARER = \"Bearer\"\r\n}\r\n\r\n/**\r\n * Constants related to throttling\r\n */\r\nexport const ThrottlingConstants = {\r\n    // Default time to throttle RequestThumbprint in seconds\r\n    DEFAULT_THROTTLE_TIME_SECONDS: 60,\r\n    // Default maximum time to throttle in seconds, overrides what the server sends back\r\n    DEFAULT_MAX_THROTTLE_TIME_SECONDS: 3600,\r\n    // Prefix for storing throttling entries\r\n    THROTTLING_PREFIX: \"throttling\",\r\n    // Value assigned to the x-ms-lib-capability header to indicate to the server the library supports throttling\r\n    X_MS_LIB_CAPABILITY_VALUE: \"retry-after, h429\"\r\n};\r\n\r\nexport const Errors = {\r\n    INVALID_GRANT_ERROR: \"invalid_grant\",\r\n    CLIENT_MISMATCH_ERROR: \"client_mismatch\",\r\n};\r\n\r\n/**\r\n * Password grant parameters\r\n */\r\nexport enum PasswordGrantConstants {\r\n    username = \"username\",\r\n    password = \"password\"\r\n}\r\n\r\n/**\r\n * Response codes\r\n */\r\nexport enum  ResponseCodes {\r\n    httpSuccess = 200,\r\n    httpBadRequest = 400\r\n}\r\n\r\n/**\r\n * Region Discovery Sources\r\n */\r\nexport enum RegionDiscoverySources {\r\n    FAILED_AUTO_DETECTION = \"1\",\r\n    INTERNAL_CACHE = \"2\",\r\n    ENVIRONMENT_VARIABLE = \"3\",\r\n    IMDS = \"4\",\r\n}\r\n\r\n/**\r\n * Region Discovery Outcomes\r\n */\r\nexport enum RegionDiscoveryOutcomes {\r\n    CONFIGURED_MATCHES_DETECTED = \"1\",\r\n    CONFIGURED_NO_AUTO_DETECTION = \"2\",\r\n    CONFIGURED_NOT_DETECTED = \"3\",\r\n    AUTO_DETECTION_REQUESTED_SUCCESSFUL = \"4\",\r\n    AUTO_DETECTION_REQUESTED_FAILED = \"5\"\r\n}\r\n\r\nexport enum CacheOutcome {\r\n    NO_CACHE_HIT = \"0\",\r\n    FORCE_REFRESH = \"1\",\r\n    NO_CACHED_ACCESS_TOKEN = \"2\",\r\n    CACHED_ACCESS_TOKEN_EXPIRED = \"3\",\r\n    REFRESH_CACHED_ACCESS_TOKEN = \"4\"\r\n}\r\n"]},"metadata":{},"sourceType":"module"}