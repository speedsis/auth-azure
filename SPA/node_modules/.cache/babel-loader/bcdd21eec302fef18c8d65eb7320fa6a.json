{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { LogLevel } from '@azure/msal-browser';\n/**\n * Configuration object to be passed to MSAL instance on creation.\n * For a full list of MSAL.js configuration parameters, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n */\n\nexport const msalConfig = {\n  auth: {\n    clientId: '85c4340e-4203-4612-9b56-10ac2a9812ab',\n    // This is the ONLY mandatory field that you need to supply.\n    authority: 'https://login.microsoftonline.com/cd8a8f67-39d2-46cd-bd89-58f7e56a0030',\n    // Defaults to \"https://login.microsoftonline.com/common\"\n    redirectUri: 'http://localhost:3002',\n    // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\n    postLogoutRedirectUri: '/',\n    // Indicates the page to navigate after logout.\n    navigateToLoginRequestUrl: true // If \"true\", will navigate back to the original request location before processing the auth code response.\n\n  },\n  cache: {\n    cacheLocation: 'sessionStorage',\n    // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\n    storeAuthStateInCookie: false // Set this to \"true\" if you are having issues on IE11 or Edge\n\n  },\n  system: {\n    loggerOptions: {\n      loggerCallback: (level, message, containsPii) => {\n        if (containsPii) {\n          return;\n        }\n\n        switch (level) {\n          case LogLevel.Error:\n            console.error(message);\n            return;\n\n          case LogLevel.Info:\n            console.info(message);\n            return;\n\n          case LogLevel.Verbose:\n            console.debug(message);\n            return;\n\n          case LogLevel.Warning:\n            console.warn(message);\n            return;\n        }\n      }\n    }\n  }\n};\n/**\n * Scopes you add here will be prompted for user consent during sign-in.\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n * For more information about OIDC scopes, visit:\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\n */\n\nexport const loginRequest = {\n  scopes: ['User.Read', 'Mail.Read']\n};\n/**\n * Add here the endpoints and scopes when obtaining an access token for protected web APIs. For more information, see:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/resources-and-scopes.md\n */\n\nexport const protectedResources = {\n  graphMe: {\n    endpoint: 'https://graph.microsoft.com/v1.0/me',\n    scopes: ['User.Read']\n  },\n  graphMessages: {\n    endpoint: 'https://graph.microsoft.com/v1.0/me/messages',\n    scopes: ['Mail.Read']\n  },\n  armTenants: {\n    endpoint: 'https://management.azure.com/tenants?api-version=2020-01-01',\n    scopes: ['https://management.azure.com/user_impersonation']\n  }\n};","map":{"version":3,"sources":["/Users/speedsis/Downloads/ms-identity-javascript-react-tutorial-main/2-Authorization-I/1-call-graph/SPA/src/authConfig.js"],"names":["LogLevel","msalConfig","auth","clientId","authority","redirectUri","postLogoutRedirectUri","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","system","loggerOptions","loggerCallback","level","message","containsPii","Error","console","error","Info","info","Verbose","debug","Warning","warn","loginRequest","scopes","protectedResources","graphMe","endpoint","graphMessages","armTenants"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,qBAAzB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAG;AACxBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE,sCADN;AAC8C;AAClDC,IAAAA,SAAS,EACP,wEAHE;AAGwE;AAC5EC,IAAAA,WAAW,EAAE,uBAJT;AAIkC;AACtCC,IAAAA,qBAAqB,EAAE,GALnB;AAKwB;AAC5BC,IAAAA,yBAAyB,EAAE,IANvB,CAM6B;;AAN7B,GADkB;AASxBC,EAAAA,KAAK,EAAE;AACLC,IAAAA,aAAa,EAAE,gBADV;AAC4B;AACjCC,IAAAA,sBAAsB,EAAE,KAFnB,CAE0B;;AAF1B,GATiB;AAaxBC,EAAAA,MAAM,EAAE;AACNC,IAAAA,aAAa,EAAE;AACbC,MAAAA,cAAc,EAAE,CAACC,KAAD,EAAQC,OAAR,EAAiBC,WAAjB,KAAiC;AAC/C,YAAIA,WAAJ,EAAiB;AACf;AACD;;AACD,gBAAQF,KAAR;AACE,eAAKd,QAAQ,CAACiB,KAAd;AACEC,YAAAA,OAAO,CAACC,KAAR,CAAcJ,OAAd;AACA;;AACF,eAAKf,QAAQ,CAACoB,IAAd;AACEF,YAAAA,OAAO,CAACG,IAAR,CAAaN,OAAb;AACA;;AACF,eAAKf,QAAQ,CAACsB,OAAd;AACEJ,YAAAA,OAAO,CAACK,KAAR,CAAcR,OAAd;AACA;;AACF,eAAKf,QAAQ,CAACwB,OAAd;AACEN,YAAAA,OAAO,CAACO,IAAR,CAAaV,OAAb;AACA;AAZJ;AAcD;AAnBY;AADT;AAbgB,CAAnB;AAsCP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMW,YAAY,GAAG;AAC1BC,EAAAA,MAAM,EAAE,CAAC,WAAD,EAAc,WAAd;AADkB,CAArB;AAIP;AACA;AACA;AACA;;AACA,OAAO,MAAMC,kBAAkB,GAAG;AAChCC,EAAAA,OAAO,EAAE;AACPC,IAAAA,QAAQ,EAAE,qCADH;AAEPH,IAAAA,MAAM,EAAE,CAAC,WAAD;AAFD,GADuB;AAKhCI,EAAAA,aAAa,EAAE;AACbD,IAAAA,QAAQ,EAAE,8CADG;AAEbH,IAAAA,MAAM,EAAE,CAAC,WAAD;AAFK,GALiB;AAShCK,EAAAA,UAAU,EAAE;AACVF,IAAAA,QAAQ,EAAE,6DADA;AAEVH,IAAAA,MAAM,EAAE,CAAC,iDAAD;AAFE;AAToB,CAA3B","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { LogLevel } from '@azure/msal-browser'\n\n/**\n * Configuration object to be passed to MSAL instance on creation.\n * For a full list of MSAL.js configuration parameters, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md\n */\nexport const msalConfig = {\n  auth: {\n    clientId: '85c4340e-4203-4612-9b56-10ac2a9812ab', // This is the ONLY mandatory field that you need to supply.\n    authority:\n      'https://login.microsoftonline.com/cd8a8f67-39d2-46cd-bd89-58f7e56a0030', // Defaults to \"https://login.microsoftonline.com/common\"\n    redirectUri: 'http://localhost:3002', // Points to window.location.origin. You must register this URI on Azure Portal/App Registration.\n    postLogoutRedirectUri: '/', // Indicates the page to navigate after logout.\n    navigateToLoginRequestUrl: true, // If \"true\", will navigate back to the original request location before processing the auth code response.\n  },\n  cache: {\n    cacheLocation: 'sessionStorage', // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\n    storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\n  },\n  system: {\n    loggerOptions: {\n      loggerCallback: (level, message, containsPii) => {\n        if (containsPii) {\n          return\n        }\n        switch (level) {\n          case LogLevel.Error:\n            console.error(message)\n            return\n          case LogLevel.Info:\n            console.info(message)\n            return\n          case LogLevel.Verbose:\n            console.debug(message)\n            return\n          case LogLevel.Warning:\n            console.warn(message)\n            return\n        }\n      },\n    },\n  },\n}\n\n/**\n * Scopes you add here will be prompted for user consent during sign-in.\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\n * For more information about OIDC scopes, visit:\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\n */\nexport const loginRequest = {\n  scopes: ['User.Read', 'Mail.Read'],\n}\n\n/**\n * Add here the endpoints and scopes when obtaining an access token for protected web APIs. For more information, see:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/resources-and-scopes.md\n */\nexport const protectedResources = {\n  graphMe: {\n    endpoint: 'https://graph.microsoft.com/v1.0/me',\n    scopes: ['User.Read'],\n  },\n  graphMessages: {\n    endpoint: 'https://graph.microsoft.com/v1.0/me/messages',\n    scopes: ['Mail.Read'],\n  },\n  armTenants: {\n    endpoint: 'https://management.azure.com/tenants?api-version=2020-01-01',\n    scopes: ['https://management.azure.com/user_impersonation'],\n  },\n}\n"]},"metadata":{},"sourceType":"module"}