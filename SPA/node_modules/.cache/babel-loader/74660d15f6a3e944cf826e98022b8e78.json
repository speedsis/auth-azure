{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { ThrottlingConstants, CacheSchemaType, Constants as Constants$1, HeaderNames } from '../utils/Constants.js';\nimport { ServerError as ServerError$1 } from '../error/ServerError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar ThrottlingUtils = function () {\n  function ThrottlingUtils() {}\n  /**\r\n   * Prepares a RequestThumbprint to be stored as a key.\r\n   * @param thumbprint\r\n   */\n\n\n  ThrottlingUtils.generateThrottlingStorageKey = function (thumbprint) {\n    return ThrottlingConstants.THROTTLING_PREFIX + \".\" + JSON.stringify(thumbprint);\n  };\n  /**\r\n   * Performs necessary throttling checks before a network request.\r\n   * @param cacheManager\r\n   * @param thumbprint\r\n   */\n\n\n  ThrottlingUtils.preProcess = function (cacheManager, thumbprint) {\n    var _a;\n\n    var key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\n    var value = cacheManager.getThrottlingCache(key);\n\n    if (value) {\n      if (value.throttleTime < Date.now()) {\n        cacheManager.removeItem(key, CacheSchemaType.THROTTLING);\n        return;\n      }\n\n      throw new ServerError$1(((_a = value.errorCodes) === null || _a === void 0 ? void 0 : _a.join(\" \")) || Constants$1.EMPTY_STRING, value.errorMessage, value.subError);\n    }\n  };\n  /**\r\n   * Performs necessary throttling checks after a network request.\r\n   * @param cacheManager\r\n   * @param thumbprint\r\n   * @param response\r\n   */\n\n\n  ThrottlingUtils.postProcess = function (cacheManager, thumbprint, response) {\n    if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\n      var thumbprintValue = {\n        throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\n        error: response.body.error,\n        errorCodes: response.body.error_codes,\n        errorMessage: response.body.error_description,\n        subError: response.body.suberror\n      };\n      cacheManager.setThrottlingCache(ThrottlingUtils.generateThrottlingStorageKey(thumbprint), thumbprintValue);\n    }\n  };\n  /**\r\n   * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n   * @param response\r\n   */\n\n\n  ThrottlingUtils.checkResponseStatus = function (response) {\n    return response.status === 429 || response.status >= 500 && response.status < 600;\n  };\n  /**\r\n   * Checks a NetworkResponse object's RetryAfter header\r\n   * @param response\r\n   */\n\n\n  ThrottlingUtils.checkResponseForRetryAfter = function (response) {\n    if (response.headers) {\n      return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\n    }\n\n    return false;\n  };\n  /**\r\n   * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n   * @param throttleTime\r\n   */\n\n\n  ThrottlingUtils.calculateThrottleTime = function (throttleTime) {\n    var time = throttleTime <= 0 ? 0 : throttleTime;\n    var currentSeconds = Date.now() / 1000;\n    return Math.floor(Math.min(currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS), currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS) * 1000);\n  };\n\n  ThrottlingUtils.removeThrottle = function (cacheManager, clientId, authority, scopes, homeAccountIdentifier) {\n    var thumbprint = {\n      clientId: clientId,\n      authority: authority,\n      scopes: scopes,\n      homeAccountIdentifier: homeAccountIdentifier\n    };\n    var key = this.generateThrottlingStorageKey(thumbprint);\n    return cacheManager.removeItem(key, CacheSchemaType.THROTTLING);\n  };\n\n  return ThrottlingUtils;\n}();\n\nexport { ThrottlingUtils };","map":{"version":3,"sources":["../../src/network/ThrottlingUtils.ts"],"names":["ServerError","Constants"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { NetworkResponse } from \"./NetworkManager\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { HeaderNames, CacheSchemaType, ThrottlingConstants, Constants } from \"../utils/Constants\";\r\nimport { CacheManager } from \"../cache/CacheManager\";\r\nimport { ServerError } from \"../error/ServerError\";\r\nimport { RequestThumbprint } from \"./RequestThumbprint\";\r\nimport { ThrottlingEntity } from \"../cache/entities/ThrottlingEntity\";\r\n\r\nexport class ThrottlingUtils {\r\n\r\n    /**\r\n     * Prepares a RequestThumbprint to be stored as a key.\r\n     * @param thumbprint\r\n     */\r\n    static generateThrottlingStorageKey(thumbprint: RequestThumbprint): string {\r\n        return `${ThrottlingConstants.THROTTLING_PREFIX}.${JSON.stringify(thumbprint)}`;\r\n    }\r\n\r\n    /**\r\n     * Performs necessary throttling checks before a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     */\r\n    static preProcess(cacheManager: CacheManager, thumbprint: RequestThumbprint): void {\r\n        const key = ThrottlingUtils.generateThrottlingStorageKey(thumbprint);\r\n        const value = cacheManager.getThrottlingCache(key);\r\n\r\n        if (value) {\r\n            if (value.throttleTime < Date.now()) {\r\n                cacheManager.removeItem(key, CacheSchemaType.THROTTLING);\r\n                return;\r\n            }\r\n            throw new ServerError(value.errorCodes?.join(\" \") || Constants.EMPTY_STRING, value.errorMessage, value.subError);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Performs necessary throttling checks after a network request.\r\n     * @param cacheManager\r\n     * @param thumbprint\r\n     * @param response\r\n     */\r\n    static postProcess(cacheManager: CacheManager, thumbprint: RequestThumbprint, response: NetworkResponse<ServerAuthorizationTokenResponse>): void {\r\n        if (ThrottlingUtils.checkResponseStatus(response) || ThrottlingUtils.checkResponseForRetryAfter(response)) {\r\n            const thumbprintValue: ThrottlingEntity = {\r\n                throttleTime: ThrottlingUtils.calculateThrottleTime(parseInt(response.headers[HeaderNames.RETRY_AFTER])),\r\n                error: response.body.error,\r\n                errorCodes: response.body.error_codes,\r\n                errorMessage: response.body.error_description,\r\n                subError: response.body.suberror\r\n            };\r\n            cacheManager.setThrottlingCache(\r\n                ThrottlingUtils.generateThrottlingStorageKey(thumbprint),\r\n                thumbprintValue\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks a NetworkResponse object's status codes against 429 or 5xx\r\n     * @param response\r\n     */\r\n    static checkResponseStatus(response: NetworkResponse<ServerAuthorizationTokenResponse>): boolean {\r\n        return response.status === 429 || response.status >= 500 && response.status < 600;\r\n    }\r\n\r\n    /**\r\n     * Checks a NetworkResponse object's RetryAfter header\r\n     * @param response\r\n     */\r\n    static checkResponseForRetryAfter(response: NetworkResponse<ServerAuthorizationTokenResponse>): boolean {\r\n        if (response.headers) {\r\n            return response.headers.hasOwnProperty(HeaderNames.RETRY_AFTER) && (response.status < 200 || response.status >= 300);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Calculates the Unix-time value for a throttle to expire given throttleTime in seconds.\r\n     * @param throttleTime\r\n     */\r\n    static calculateThrottleTime(throttleTime: number): number {\r\n        const time = throttleTime <= 0 ? 0 : throttleTime;\r\n\r\n        const currentSeconds = Date.now() / 1000;\r\n        return Math.floor(Math.min(\r\n            currentSeconds + (time || ThrottlingConstants.DEFAULT_THROTTLE_TIME_SECONDS),\r\n            currentSeconds + ThrottlingConstants.DEFAULT_MAX_THROTTLE_TIME_SECONDS\r\n        ) * 1000);\r\n    }\r\n\r\n    static removeThrottle(cacheManager: CacheManager, clientId: string, authority: string, scopes: Array<string>, homeAccountIdentifier?: string): boolean {\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId,\r\n            authority,\r\n            scopes,\r\n            homeAccountIdentifier\r\n        };\r\n\r\n        const key = this.generateThrottlingStorageKey(thumbprint);\r\n        return cacheManager.removeItem(key, CacheSchemaType.THROTTLING);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}