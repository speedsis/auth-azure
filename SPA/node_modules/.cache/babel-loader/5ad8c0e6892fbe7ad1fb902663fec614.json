{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { RegionDiscoverySources, ResponseCodes, Constants as Constants$1 } from '../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar RegionDiscovery = function () {\n  function RegionDiscovery(networkInterface) {\n    this.networkInterface = networkInterface;\n  }\n  /**\r\n   * Detect the region from the application's environment.\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n\n\n  RegionDiscovery.prototype.detectRegion = function (environmentRegion, regionDiscoveryMetadata) {\n    return __awaiter(this, void 0, void 0, function () {\n      var autodetectedRegionName, localIMDSVersionResponse, currentIMDSVersion, currentIMDSVersionResponse, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            autodetectedRegionName = environmentRegion;\n            if (!!autodetectedRegionName) return [3\n            /*break*/\n            , 8];\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 6,, 7]);\n\n            return [4\n            /*yield*/\n            , this.getRegionFromIMDS(Constants$1.IMDS_VERSION)];\n\n          case 2:\n            localIMDSVersionResponse = _a.sent();\n\n            if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n              autodetectedRegionName = localIMDSVersionResponse.body;\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n            }\n\n            if (!(localIMDSVersionResponse.status === ResponseCodes.httpBadRequest)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.getCurrentVersion()];\n\n          case 3:\n            currentIMDSVersion = _a.sent();\n\n            if (!currentIMDSVersion) {\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n              return [2\n              /*return*/\n              , null];\n            }\n\n            return [4\n            /*yield*/\n            , this.getRegionFromIMDS(currentIMDSVersion)];\n\n          case 4:\n            currentIMDSVersionResponse = _a.sent();\n\n            if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\n              autodetectedRegionName = currentIMDSVersionResponse.body;\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\n            }\n\n            _a.label = 5;\n\n          case 5:\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            e_1 = _a.sent();\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n            return [2\n            /*return*/\n            , null];\n\n          case 7:\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\n            _a.label = 9;\n\n          case 9:\n            // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\n            if (!autodetectedRegionName) {\n              regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\n            }\n\n            return [2\n            /*return*/\n            , autodetectedRegionName || null];\n        }\n      });\n    });\n  };\n  /**\r\n   * Make the call to the IMDS endpoint\r\n   *\r\n   * @param imdsEndpointUrl\r\n   * @returns Promise<NetworkResponse<string>>\r\n   */\n\n\n  RegionDiscovery.prototype.getRegionFromIMDS = function (version) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.networkInterface.sendGetRequestAsync(Constants$1.IMDS_ENDPOINT + \"?api-version=\" + version + \"&format=text\", RegionDiscovery.IMDS_OPTIONS, Constants$1.IMDS_TIMEOUT)];\n      });\n    });\n  };\n  /**\r\n   * Get the most recent version of the IMDS endpoint available\r\n   *\r\n   * @returns Promise<string | null>\r\n   */\n\n\n  RegionDiscovery.prototype.getCurrentVersion = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, e_2;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            _a.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , this.networkInterface.sendGetRequestAsync(Constants$1.IMDS_ENDPOINT + \"?format=json\", RegionDiscovery.IMDS_OPTIONS)];\n\n          case 1:\n            response = _a.sent(); // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\n\n            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\n              return [2\n              /*return*/\n              , response.body[\"newest-versions\"][0]];\n            }\n\n            return [2\n            /*return*/\n            , null];\n\n          case 2:\n            e_2 = _a.sent();\n            return [2\n            /*return*/\n            , null];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // Options for the IMDS endpoint request\n\n\n  RegionDiscovery.IMDS_OPTIONS = {\n    headers: {\n      \"Metadata\": \"true\"\n    }\n  };\n  return RegionDiscovery;\n}();\n\nexport { RegionDiscovery };","map":{"version":3,"sources":["../../src/authority/RegionDiscovery.ts"],"names":["Constants"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { INetworkModule } from \"../network/INetworkModule\";\r\nimport { NetworkResponse } from \"../network/NetworkManager\";\r\nimport { IMDSBadResponse } from \"../response/IMDSBadResponse\";\r\nimport { Constants, RegionDiscoverySources, ResponseCodes } from \"../utils/Constants\";\r\nimport { RegionDiscoveryMetadata } from \"./RegionDiscoveryMetadata\";\r\n\r\nexport class RegionDiscovery {\r\n    // Network interface to make requests with.\r\n    protected networkInterface: INetworkModule;\r\n    // Options for the IMDS endpoint request\r\n    protected static IMDS_OPTIONS = {headers: {\"Metadata\": \"true\"}};\r\n\r\n    constructor(networkInterface: INetworkModule) {\r\n        this.networkInterface = networkInterface;\r\n    }\r\n\r\n    /**\r\n     * Detect the region from the application's environment.\r\n     * \r\n     * @returns Promise<string | null>\r\n     */\r\n    public async detectRegion(environmentRegion: string | undefined, regionDiscoveryMetadata: RegionDiscoveryMetadata): Promise<string | null> {\r\n        // Initialize auto detected region with the region from the envrionment \r\n        let autodetectedRegionName = environmentRegion;\r\n\r\n        // Check if a region was detected from the environment, if not, attempt to get the region from IMDS \r\n        if (!autodetectedRegionName) {\r\n            try {\r\n                const localIMDSVersionResponse = await this.getRegionFromIMDS(Constants.IMDS_VERSION);\r\n                if (localIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\r\n                    autodetectedRegionName = localIMDSVersionResponse.body;\r\n                    regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\r\n                } \r\n                \r\n                // If the response using the local IMDS version failed, try to fetch the current version of IMDS and retry. \r\n                if (localIMDSVersionResponse.status === ResponseCodes.httpBadRequest) {\r\n                    const currentIMDSVersion = await this.getCurrentVersion();\r\n                    if (!currentIMDSVersion) {\r\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                        return null;\r\n                    }\r\n\r\n                    const currentIMDSVersionResponse = await this.getRegionFromIMDS(currentIMDSVersion);\r\n                    if (currentIMDSVersionResponse.status === ResponseCodes.httpSuccess) {\r\n                        autodetectedRegionName = currentIMDSVersionResponse.body;\r\n                        regionDiscoveryMetadata.region_source = RegionDiscoverySources.IMDS;\r\n                    }\r\n                }\r\n            } catch(e) {\r\n                regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n                return null;\r\n            } \r\n        } else {\r\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.ENVIRONMENT_VARIABLE;\r\n        }\r\n\r\n        // If no region was auto detected from the environment or from the IMDS endpoint, mark the attempt as a FAILED_AUTO_DETECTION\r\n        if (!autodetectedRegionName) {\r\n            regionDiscoveryMetadata.region_source = RegionDiscoverySources.FAILED_AUTO_DETECTION;\r\n        }\r\n\r\n        return autodetectedRegionName || null;\r\n    }\r\n\r\n    /**\r\n     * Make the call to the IMDS endpoint\r\n     * \r\n     * @param imdsEndpointUrl\r\n     * @returns Promise<NetworkResponse<string>>\r\n     */\r\n    private async getRegionFromIMDS(version: string): Promise<NetworkResponse<string>> {\r\n        return this.networkInterface.sendGetRequestAsync<string>(`${Constants.IMDS_ENDPOINT}?api-version=${version}&format=text`, RegionDiscovery.IMDS_OPTIONS, Constants.IMDS_TIMEOUT);\r\n    }\r\n\r\n    /**\r\n     * Get the most recent version of the IMDS endpoint available\r\n     *  \r\n     * @returns Promise<string | null>\r\n     */\r\n    private async getCurrentVersion(): Promise<string | null> {\r\n        try {\r\n            const response = await this.networkInterface.sendGetRequestAsync<IMDSBadResponse>(`${Constants.IMDS_ENDPOINT}?format=json`, RegionDiscovery.IMDS_OPTIONS);\r\n\r\n            // When IMDS endpoint is called without the api version query param, bad request response comes back with latest version.\r\n            if (response.status === ResponseCodes.httpBadRequest && response.body && response.body[\"newest-versions\"] && response.body[\"newest-versions\"].length > 0) {\r\n                return response.body[\"newest-versions\"][0];\r\n            }\r\n\r\n            return null;\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}