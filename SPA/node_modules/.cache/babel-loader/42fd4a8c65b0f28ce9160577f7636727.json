{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { SERVER_TELEM_CONSTANTS } from '../../utils/Constants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar ServerTelemetryEntity = function () {\n  function ServerTelemetryEntity() {\n    this.failedRequests = [];\n    this.errors = [];\n    this.cacheHits = 0;\n  }\n  /**\r\n   * validates if a given cache entry is \"Telemetry\", parses <key,value>\r\n   * @param key\r\n   * @param entity\r\n   */\n\n\n  ServerTelemetryEntity.isServerTelemetryEntity = function (key, entity) {\n    var validateKey = key.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;\n    var validateEntity = true;\n\n    if (entity) {\n      validateEntity = entity.hasOwnProperty(\"failedRequests\") && entity.hasOwnProperty(\"errors\") && entity.hasOwnProperty(\"cacheHits\");\n    }\n\n    return validateKey && validateEntity;\n  };\n\n  return ServerTelemetryEntity;\n}();\n\nexport { ServerTelemetryEntity };","map":{"version":3,"sources":["../../../src/cache/entities/ServerTelemetryEntity.ts"],"names":[],"mappings":";;;;AAAA;;;;;;AAYI,WAAA,qBAAA,GAAA;AACI,SAAK,cAAL,GAAsB,EAAtB;AACA,SAAK,MAAL,GAAc,EAAd;AACA,SAAK,SAAL,GAAiB,CAAjB;AACH;;;;;;;;AAOM,EAAA,qBAAA,CAAA,uBAAA,GAAP,UAA+B,GAA/B,EAA4C,MAA5C,EAA2D;AAEvD,QAAM,WAAW,GAAY,GAAG,CAAC,OAAJ,CAAY,sBAAsB,CAAC,SAAnC,MAAkD,CAA/E;AACA,QAAI,cAAc,GAAY,IAA9B;;AAEA,QAAI,MAAJ,EAAY;AACR,MAAA,cAAc,GACV,MAAM,CAAC,cAAP,CAAsB,gBAAtB,KACA,MAAM,CAAC,cAAP,CAAsB,QAAtB,CADA,IAEA,MAAM,CAAC,cAAP,CAAsB,WAAtB,CAHJ;AAIH;;AAED,WAAO,WAAW,IAAI,cAAtB;AACH,GAbM;;AAcX,SAAA,qBAAA;AAAC,C","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { SERVER_TELEM_CONSTANTS } from \"../../utils/Constants\";\r\n\r\nexport class ServerTelemetryEntity {\r\n    failedRequests: Array<string|number>;\r\n    errors: string[];\r\n    cacheHits: number;\r\n\r\n    constructor() {\r\n        this.failedRequests = [];\r\n        this.errors = [];\r\n        this.cacheHits = 0;\r\n    }\r\n\r\n    /**\r\n     * validates if a given cache entry is \"Telemetry\", parses <key,value>\r\n     * @param key\r\n     * @param entity\r\n     */\r\n    static isServerTelemetryEntity(key: string, entity?: object): boolean {\r\n\r\n        const validateKey: boolean = key.indexOf(SERVER_TELEM_CONSTANTS.CACHE_KEY) === 0;\r\n        let validateEntity: boolean = true;\r\n\r\n        if (entity) {\r\n            validateEntity =\r\n                entity.hasOwnProperty(\"failedRequests\") &&\r\n                entity.hasOwnProperty(\"errors\") &&\r\n                entity.hasOwnProperty(\"cacheHits\");\r\n        }\r\n\r\n        return validateKey && validateEntity;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}