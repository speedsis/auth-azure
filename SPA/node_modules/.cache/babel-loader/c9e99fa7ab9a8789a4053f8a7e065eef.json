{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\n\n/**\r\n * @class\r\n * @implements MiddlewareOptions\r\n * Class for RetryHandlerOptions\r\n */\nexport class RetryHandlerOptions {\n  /**\r\n   * @public\r\n   * @constructor\r\n   * To create an instance of RetryHandlerOptions\r\n   * @param {number} [delay = RetryHandlerOptions.DEFAULT_DELAY] - The delay value in seconds\r\n   * @param {number} [maxRetries = RetryHandlerOptions.DEFAULT_MAX_RETRIES] - The maxRetries value\r\n   * @param {ShouldRetry} [shouldRetry = RetryHandlerOptions.DEFAULT_SHOULD_RETRY] - The shouldRetry callback function\r\n   * @returns An instance of RetryHandlerOptions\r\n   */\n  constructor(delay = RetryHandlerOptions.DEFAULT_DELAY, maxRetries = RetryHandlerOptions.DEFAULT_MAX_RETRIES, shouldRetry = RetryHandlerOptions.DEFAULT_SHOULD_RETRY) {\n    if (delay > RetryHandlerOptions.MAX_DELAY && maxRetries > RetryHandlerOptions.MAX_MAX_RETRIES) {\n      const error = new Error(`Delay and MaxRetries should not be more than ${RetryHandlerOptions.MAX_DELAY} and ${RetryHandlerOptions.MAX_MAX_RETRIES}`);\n      error.name = \"MaxLimitExceeded\";\n      throw error;\n    } else if (delay > RetryHandlerOptions.MAX_DELAY) {\n      const error = new Error(`Delay should not be more than ${RetryHandlerOptions.MAX_DELAY}`);\n      error.name = \"MaxLimitExceeded\";\n      throw error;\n    } else if (maxRetries > RetryHandlerOptions.MAX_MAX_RETRIES) {\n      const error = new Error(`MaxRetries should not be more than ${RetryHandlerOptions.MAX_MAX_RETRIES}`);\n      error.name = \"MaxLimitExceeded\";\n      throw error;\n    } else if (delay < 0 && maxRetries < 0) {\n      const error = new Error(`Delay and MaxRetries should not be negative`);\n      error.name = \"MinExpectationNotMet\";\n      throw error;\n    } else if (delay < 0) {\n      const error = new Error(`Delay should not be negative`);\n      error.name = \"MinExpectationNotMet\";\n      throw error;\n    } else if (maxRetries < 0) {\n      const error = new Error(`MaxRetries should not be negative`);\n      error.name = \"MinExpectationNotMet\";\n      throw error;\n    }\n\n    this.delay = Math.min(delay, RetryHandlerOptions.MAX_DELAY);\n    this.maxRetries = Math.min(maxRetries, RetryHandlerOptions.MAX_MAX_RETRIES);\n    this.shouldRetry = shouldRetry;\n  }\n  /**\r\n   * @public\r\n   * To get the maximum delay\r\n   * @returns A maximum delay\r\n   */\n\n\n  getMaxDelay() {\n    return RetryHandlerOptions.MAX_DELAY;\n  }\n\n}\n/**\r\n * @private\r\n * @static\r\n * A member holding default delay value in seconds\r\n */\n\nRetryHandlerOptions.DEFAULT_DELAY = 3;\n/**\r\n * @private\r\n * @static\r\n * A member holding default maxRetries value\r\n */\n\nRetryHandlerOptions.DEFAULT_MAX_RETRIES = 3;\n/**\r\n * @private\r\n * @static\r\n * A member holding maximum delay value in seconds\r\n */\n\nRetryHandlerOptions.MAX_DELAY = 180;\n/**\r\n * @private\r\n * @static\r\n * A member holding maximum maxRetries value\r\n */\n\nRetryHandlerOptions.MAX_MAX_RETRIES = 10;\n/**\r\n * @private\r\n * A member holding default shouldRetry callback\r\n */\n\nRetryHandlerOptions.DEFAULT_SHOULD_RETRY = () => true;","map":{"version":3,"sources":["../../../../src/middleware/options/RetryHandlerOptions.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAgBH;;;;AAIG;AAEH,OAAM,MAAO,mBAAP,CAA0B;AAqD/B;;;;;;;;AAQG;AACH,EAAA,WAAA,CAAmB,KAAA,GAAgB,mBAAmB,CAAC,aAAvD,EAAsE,UAAA,GAAqB,mBAAmB,CAAC,mBAA/G,EAAoI,WAAA,GAA2B,mBAAmB,CAAC,oBAAnL,EAAuM;AACtM,QAAI,KAAK,GAAG,mBAAmB,CAAC,SAA5B,IAAyC,UAAU,GAAG,mBAAmB,CAAC,eAA9E,EAA+F;AAC9F,YAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,gDAAgD,mBAAmB,CAAC,SAAS,QAAQ,mBAAmB,CAAC,eAAe,EAAlI,CAAd;AACA,MAAA,KAAK,CAAC,IAAN,GAAa,kBAAb;AACA,YAAM,KAAN;AACA,KAJD,MAIO,IAAI,KAAK,GAAG,mBAAmB,CAAC,SAAhC,EAA2C;AACjD,YAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,iCAAiC,mBAAmB,CAAC,SAAS,EAAxE,CAAd;AACA,MAAA,KAAK,CAAC,IAAN,GAAa,kBAAb;AACA,YAAM,KAAN;AACA,KAJM,MAIA,IAAI,UAAU,GAAG,mBAAmB,CAAC,eAArC,EAAsD;AAC5D,YAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,sCAAsC,mBAAmB,CAAC,eAAe,EAAnF,CAAd;AACA,MAAA,KAAK,CAAC,IAAN,GAAa,kBAAb;AACA,YAAM,KAAN;AACA,KAJM,MAIA,IAAI,KAAK,GAAG,CAAR,IAAa,UAAU,GAAG,CAA9B,EAAiC;AACvC,YAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,6CAAV,CAAd;AACA,MAAA,KAAK,CAAC,IAAN,GAAa,sBAAb;AACA,YAAM,KAAN;AACA,KAJM,MAIA,IAAI,KAAK,GAAG,CAAZ,EAAe;AACrB,YAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,8BAAV,CAAd;AACA,MAAA,KAAK,CAAC,IAAN,GAAa,sBAAb;AACA,YAAM,KAAN;AACA,KAJM,MAIA,IAAI,UAAU,GAAG,CAAjB,EAAoB;AAC1B,YAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,mCAAV,CAAd;AACA,MAAA,KAAK,CAAC,IAAN,GAAa,sBAAb;AACA,YAAM,KAAN;AACA;;AACD,SAAK,KAAL,GAAa,IAAI,CAAC,GAAL,CAAS,KAAT,EAAgB,mBAAmB,CAAC,SAApC,CAAb;AACA,SAAK,UAAL,GAAkB,IAAI,CAAC,GAAL,CAAS,UAAT,EAAqB,mBAAmB,CAAC,eAAzC,CAAlB;AACA,SAAK,WAAL,GAAmB,WAAnB;AACA;AAED;;;;AAIG;;;AACI,EAAA,WAAW,GAAA;AACjB,WAAO,mBAAmB,CAAC,SAA3B;AACA;;AApG8B;AAC/B;;;;AAIG;;AACY,mBAAA,CAAA,aAAA,GAAwB,CAAxB;AAEf;;;;AAIG;;AACY,mBAAA,CAAA,mBAAA,GAA8B,CAA9B;AAEf;;;;AAIG;;AACY,mBAAA,CAAA,SAAA,GAAoB,GAApB;AAEf;;;;AAIG;;AACY,mBAAA,CAAA,eAAA,GAA0B,EAA1B;AAoBf;;;AAGG;;AACY,mBAAA,CAAA,oBAAA,GAAoC,MAAM,IAA1C","sourceRoot":"","sourcesContent":["/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\r\n/**\r\n * @class\r\n * @implements MiddlewareOptions\r\n * Class for RetryHandlerOptions\r\n */\r\nexport class RetryHandlerOptions {\r\n    /**\r\n     * @public\r\n     * @constructor\r\n     * To create an instance of RetryHandlerOptions\r\n     * @param {number} [delay = RetryHandlerOptions.DEFAULT_DELAY] - The delay value in seconds\r\n     * @param {number} [maxRetries = RetryHandlerOptions.DEFAULT_MAX_RETRIES] - The maxRetries value\r\n     * @param {ShouldRetry} [shouldRetry = RetryHandlerOptions.DEFAULT_SHOULD_RETRY] - The shouldRetry callback function\r\n     * @returns An instance of RetryHandlerOptions\r\n     */\r\n    constructor(delay = RetryHandlerOptions.DEFAULT_DELAY, maxRetries = RetryHandlerOptions.DEFAULT_MAX_RETRIES, shouldRetry = RetryHandlerOptions.DEFAULT_SHOULD_RETRY) {\r\n        if (delay > RetryHandlerOptions.MAX_DELAY && maxRetries > RetryHandlerOptions.MAX_MAX_RETRIES) {\r\n            const error = new Error(`Delay and MaxRetries should not be more than ${RetryHandlerOptions.MAX_DELAY} and ${RetryHandlerOptions.MAX_MAX_RETRIES}`);\r\n            error.name = \"MaxLimitExceeded\";\r\n            throw error;\r\n        }\r\n        else if (delay > RetryHandlerOptions.MAX_DELAY) {\r\n            const error = new Error(`Delay should not be more than ${RetryHandlerOptions.MAX_DELAY}`);\r\n            error.name = \"MaxLimitExceeded\";\r\n            throw error;\r\n        }\r\n        else if (maxRetries > RetryHandlerOptions.MAX_MAX_RETRIES) {\r\n            const error = new Error(`MaxRetries should not be more than ${RetryHandlerOptions.MAX_MAX_RETRIES}`);\r\n            error.name = \"MaxLimitExceeded\";\r\n            throw error;\r\n        }\r\n        else if (delay < 0 && maxRetries < 0) {\r\n            const error = new Error(`Delay and MaxRetries should not be negative`);\r\n            error.name = \"MinExpectationNotMet\";\r\n            throw error;\r\n        }\r\n        else if (delay < 0) {\r\n            const error = new Error(`Delay should not be negative`);\r\n            error.name = \"MinExpectationNotMet\";\r\n            throw error;\r\n        }\r\n        else if (maxRetries < 0) {\r\n            const error = new Error(`MaxRetries should not be negative`);\r\n            error.name = \"MinExpectationNotMet\";\r\n            throw error;\r\n        }\r\n        this.delay = Math.min(delay, RetryHandlerOptions.MAX_DELAY);\r\n        this.maxRetries = Math.min(maxRetries, RetryHandlerOptions.MAX_MAX_RETRIES);\r\n        this.shouldRetry = shouldRetry;\r\n    }\r\n    /**\r\n     * @public\r\n     * To get the maximum delay\r\n     * @returns A maximum delay\r\n     */\r\n    getMaxDelay() {\r\n        return RetryHandlerOptions.MAX_DELAY;\r\n    }\r\n}\r\n/**\r\n * @private\r\n * @static\r\n * A member holding default delay value in seconds\r\n */\r\nRetryHandlerOptions.DEFAULT_DELAY = 3;\r\n/**\r\n * @private\r\n * @static\r\n * A member holding default maxRetries value\r\n */\r\nRetryHandlerOptions.DEFAULT_MAX_RETRIES = 3;\r\n/**\r\n * @private\r\n * @static\r\n * A member holding maximum delay value in seconds\r\n */\r\nRetryHandlerOptions.MAX_DELAY = 180;\r\n/**\r\n * @private\r\n * @static\r\n * A member holding maximum maxRetries value\r\n */\r\nRetryHandlerOptions.MAX_MAX_RETRIES = 10;\r\n/**\r\n * @private\r\n * A member holding default shouldRetry callback\r\n */\r\nRetryHandlerOptions.DEFAULT_SHOULD_RETRY = () => true;\r\n//# sourceMappingURL=RetryHandlerOptions.js.map"]},"metadata":{},"sourceType":"module"}