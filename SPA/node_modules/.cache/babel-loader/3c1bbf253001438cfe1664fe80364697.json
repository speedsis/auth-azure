{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { GuidGenerator } from './GuidGenerator.js';\nimport { Base64Encode } from '../encode/Base64Encode.js';\nimport { Base64Decode } from '../encode/Base64Decode.js';\nimport { PkceGenerator } from './PkceGenerator.js';\nimport { BrowserCrypto } from './BrowserCrypto.js';\nimport { DatabaseStorage } from '../cache/DatabaseStorage.js';\nimport { BrowserStringUtils } from '../utils/BrowserStringUtils.js';\nimport { KEY_FORMAT_JWK } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and\r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\n\nvar CryptoOps = function () {\n  function CryptoOps() {\n    // Browser crypto needs to be validated first before any other classes can be set.\n    this.browserCrypto = new BrowserCrypto();\n    this.b64Encode = new Base64Encode();\n    this.b64Decode = new Base64Decode();\n    this.guidGenerator = new GuidGenerator(this.browserCrypto);\n    this.pkceGenerator = new PkceGenerator(this.browserCrypto);\n    this.cache = new DatabaseStorage(CryptoOps.DB_NAME, CryptoOps.TABLE_NAME, CryptoOps.DB_VERSION);\n  }\n  /**\r\n   * Creates a new random GUID - used to populate state and nonce.\r\n   * @returns string (GUID)\r\n   */\n\n\n  CryptoOps.prototype.createNewGuid = function () {\n    return this.guidGenerator.generateGuid();\n  };\n  /**\r\n   * Encodes input string to base64.\r\n   * @param input\r\n   */\n\n\n  CryptoOps.prototype.base64Encode = function (input) {\n    return this.b64Encode.encode(input);\n  };\n  /**\r\n   * Decodes input string from base64.\r\n   * @param input\r\n   */\n\n\n  CryptoOps.prototype.base64Decode = function (input) {\n    return this.b64Decode.decode(input);\n  };\n  /**\r\n   * Generates PKCE codes used in Authorization Code Flow.\r\n   */\n\n\n  CryptoOps.prototype.generatePkceCodes = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.pkceGenerator.generateCodes()];\n      });\n    });\n  };\n  /**\r\n   * Generates a keypair, stores it and returns a thumbprint\r\n   * @param request\r\n   */\n\n\n  CryptoOps.prototype.getPublicKeyThumbprint = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var keyPair, publicKeyJwk, pubKeyThumprintObj, publicJwkString, publicJwkBuffer, publicJwkHash, privateKeyJwk, unextractablePrivateKey;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES)];\n\n          case 1:\n            keyPair = _a.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(keyPair.publicKey)];\n\n          case 2:\n            publicKeyJwk = _a.sent();\n            pubKeyThumprintObj = {\n              e: publicKeyJwk.e,\n              kty: publicKeyJwk.kty,\n              n: publicKeyJwk.n\n            };\n            publicJwkString = BrowserCrypto.getJwkString(pubKeyThumprintObj);\n            return [4\n            /*yield*/\n            , this.browserCrypto.sha256Digest(publicJwkString)];\n\n          case 3:\n            publicJwkBuffer = _a.sent();\n            publicJwkHash = this.b64Encode.urlEncodeArr(new Uint8Array(publicJwkBuffer));\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(keyPair.privateKey)];\n\n          case 4:\n            privateKeyJwk = _a.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"])];\n\n          case 5:\n            unextractablePrivateKey = _a.sent(); // Store Keypair data in keystore\n\n            this.cache.put(publicJwkHash, {\n              privateKey: unextractablePrivateKey,\n              publicKey: keyPair.publicKey,\n              requestMethod: request.resourceRequestMethod,\n              requestUri: request.resourceRequestUri\n            });\n            return [2\n            /*return*/\n            , publicJwkHash];\n        }\n      });\n    });\n  };\n  /**\r\n   * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n   * @param payload\r\n   * @param kid\r\n   */\n\n\n  CryptoOps.prototype.signJwt = function (payload, kid) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cachedKeyPair, publicKeyJwk, publicKeyJwkString, header, encodedHeader, encodedPayload, tokenString, tokenBuffer, signatureBuffer, encodedSignature;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.cache.get(kid)];\n\n          case 1:\n            cachedKeyPair = _a.sent();\n            return [4\n            /*yield*/\n            , this.browserCrypto.exportJwk(cachedKeyPair.publicKey)];\n\n          case 2:\n            publicKeyJwk = _a.sent();\n            publicKeyJwkString = BrowserCrypto.getJwkString(publicKeyJwk);\n            header = {\n              alg: publicKeyJwk.alg,\n              type: KEY_FORMAT_JWK\n            };\n            encodedHeader = this.b64Encode.urlEncode(JSON.stringify(header)); // Generate payload\n\n            payload.cnf = {\n              jwk: JSON.parse(publicKeyJwkString)\n            };\n            encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\n            tokenString = encodedHeader + \".\" + encodedPayload;\n            tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\n            return [4\n            /*yield*/\n            , this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer)];\n\n          case 3:\n            signatureBuffer = _a.sent();\n            encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\n            return [2\n            /*return*/\n            , tokenString + \".\" + encodedSignature];\n        }\n      });\n    });\n  };\n\n  CryptoOps.POP_KEY_USAGES = [\"sign\", \"verify\"];\n  CryptoOps.EXTRACTABLE = true;\n  CryptoOps.DB_VERSION = 1;\n  CryptoOps.DB_NAME = \"msal.db\";\n  CryptoOps.TABLE_NAME = CryptoOps.DB_NAME + \".keys\";\n  return CryptoOps;\n}();\n\nexport { CryptoOps };","map":{"version":3,"sources":["../../src/crypto/CryptoOps.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BaseAuthRequest, ICrypto, PkceCodes, SignedHttpRequest } from \"@azure/msal-common\";\r\nimport { GuidGenerator } from \"./GuidGenerator\";\r\nimport { Base64Encode } from \"../encode/Base64Encode\";\r\nimport { Base64Decode } from \"../encode/Base64Decode\";\r\nimport { PkceGenerator } from \"./PkceGenerator\";\r\nimport { BrowserCrypto } from \"./BrowserCrypto\";\r\nimport { DatabaseStorage } from \"../cache/DatabaseStorage\";\r\nimport { BrowserStringUtils } from \"../utils/BrowserStringUtils\";\r\nimport { KEY_FORMAT_JWK } from \"../utils/BrowserConstants\";\r\n\r\nexport type CachedKeyPair = {\r\n    publicKey: CryptoKey,\r\n    privateKey: CryptoKey,\r\n    requestMethod?: string,\r\n    requestUri?: string\r\n};\r\n\r\n/**\r\n * This class implements MSAL's crypto interface, which allows it to perform base64 encoding and decoding, generating cryptographically random GUIDs and \r\n * implementing Proof Key for Code Exchange specs for the OAuth Authorization Code Flow using PKCE (rfc here: https://tools.ietf.org/html/rfc7636).\r\n */\r\nexport class CryptoOps implements ICrypto {\r\n\r\n    private browserCrypto: BrowserCrypto;\r\n    private guidGenerator: GuidGenerator;\r\n    private b64Encode: Base64Encode;\r\n    private b64Decode: Base64Decode;\r\n    private pkceGenerator: PkceGenerator;\r\n\r\n    private static POP_KEY_USAGES: Array<KeyUsage> = [\"sign\", \"verify\"];\r\n    private static EXTRACTABLE: boolean = true;\r\n\r\n    private static DB_VERSION = 1;\r\n    private static DB_NAME = \"msal.db\";\r\n    private static TABLE_NAME =`${CryptoOps.DB_NAME}.keys`;\r\n    private cache: DatabaseStorage<CachedKeyPair>;\r\n\r\n    constructor() {\r\n        // Browser crypto needs to be validated first before any other classes can be set.\r\n        this.browserCrypto = new BrowserCrypto();\r\n        this.b64Encode = new Base64Encode();\r\n        this.b64Decode = new Base64Decode();\r\n        this.guidGenerator = new GuidGenerator(this.browserCrypto);\r\n        this.pkceGenerator = new PkceGenerator(this.browserCrypto);\r\n        this.cache = new DatabaseStorage(CryptoOps.DB_NAME, CryptoOps.TABLE_NAME, CryptoOps.DB_VERSION);\r\n    }\r\n\r\n    /**\r\n     * Creates a new random GUID - used to populate state and nonce.\r\n     * @returns string (GUID)\r\n     */\r\n    createNewGuid(): string {\r\n        return this.guidGenerator.generateGuid();\r\n    }\r\n\r\n    /**\r\n     * Encodes input string to base64.\r\n     * @param input \r\n     */\r\n    base64Encode(input: string): string {\r\n        return this.b64Encode.encode(input);\r\n    }    \r\n    \r\n    /**\r\n     * Decodes input string from base64.\r\n     * @param input \r\n     */\r\n    base64Decode(input: string): string {\r\n        return this.b64Decode.decode(input);\r\n    }\r\n\r\n    /**\r\n     * Generates PKCE codes used in Authorization Code Flow.\r\n     */\r\n    async generatePkceCodes(): Promise<PkceCodes> {\r\n        return this.pkceGenerator.generateCodes();\r\n    }\r\n\r\n    /**\r\n     * Generates a keypair, stores it and returns a thumbprint\r\n     * @param request\r\n     */\r\n    async getPublicKeyThumbprint(request: BaseAuthRequest): Promise<string> {\r\n        // Generate Keypair\r\n        const keyPair = await this.browserCrypto.generateKeyPair(CryptoOps.EXTRACTABLE, CryptoOps.POP_KEY_USAGES);\r\n\r\n        // Generate Thumbprint for Public Key\r\n        const publicKeyJwk: JsonWebKey = await this.browserCrypto.exportJwk(keyPair.publicKey);\r\n        const pubKeyThumprintObj: JsonWebKey = {\r\n            e: publicKeyJwk.e,\r\n            kty: publicKeyJwk.kty,\r\n            n: publicKeyJwk.n\r\n        };\r\n        const publicJwkString: string = BrowserCrypto.getJwkString(pubKeyThumprintObj);\r\n        const publicJwkBuffer: ArrayBuffer = await this.browserCrypto.sha256Digest(publicJwkString);\r\n        const publicJwkHash: string = this.b64Encode.urlEncodeArr(new Uint8Array(publicJwkBuffer));\r\n\r\n        // Generate Thumbprint for Private Key\r\n        const privateKeyJwk: JsonWebKey = await this.browserCrypto.exportJwk(keyPair.privateKey);\r\n        // Re-import private key to make it unextractable\r\n        const unextractablePrivateKey: CryptoKey = await this.browserCrypto.importJwk(privateKeyJwk, false, [\"sign\"]);\r\n\r\n        // Store Keypair data in keystore\r\n        this.cache.put(publicJwkHash, {\r\n            privateKey: unextractablePrivateKey,\r\n            publicKey: keyPair.publicKey,\r\n            requestMethod: request.resourceRequestMethod,\r\n            requestUri: request.resourceRequestUri\r\n        });\r\n\r\n        return publicJwkHash;\r\n    }\r\n\r\n    /**\r\n     * Signs the given object as a jwt payload with private key retrieved by given kid.\r\n     * @param payload \r\n     * @param kid \r\n     */\r\n    async signJwt(payload: SignedHttpRequest, kid: string): Promise<string> {\r\n        // Get keypair from cache\r\n        const cachedKeyPair: CachedKeyPair = await this.cache.get(kid);\r\n\r\n        // Get public key as JWK\r\n        const publicKeyJwk = await this.browserCrypto.exportJwk(cachedKeyPair.publicKey);\r\n        const publicKeyJwkString = BrowserCrypto.getJwkString(publicKeyJwk);\r\n\r\n        // Generate header\r\n        const header = {\r\n            alg: publicKeyJwk.alg,\r\n            type: KEY_FORMAT_JWK\r\n        };\r\n        const encodedHeader = this.b64Encode.urlEncode(JSON.stringify(header));\r\n\r\n        // Generate payload\r\n        payload.cnf = {\r\n            jwk: JSON.parse(publicKeyJwkString)\r\n        };\r\n        const encodedPayload = this.b64Encode.urlEncode(JSON.stringify(payload));\r\n\r\n        // Form token string\r\n        const tokenString = `${encodedHeader}.${encodedPayload}`;\r\n\r\n        // Sign token\r\n        const tokenBuffer = BrowserStringUtils.stringToArrayBuffer(tokenString);\r\n        const signatureBuffer = await this.browserCrypto.sign(cachedKeyPair.privateKey, tokenBuffer);\r\n        const encodedSignature = this.b64Encode.urlEncodeArr(new Uint8Array(signatureBuffer));\r\n\r\n        return `${tokenString}.${encodedSignature}`;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}