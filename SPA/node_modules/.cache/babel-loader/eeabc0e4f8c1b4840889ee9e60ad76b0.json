{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\n\n/**\r\n * @module ChaosHandlerOptions\r\n */\nimport { ChaosStrategy } from \"./ChaosStrategy\";\n/**\r\n * Class representing ChaosHandlerOptions\r\n * @class\r\n * Class\r\n * @implements MiddlewareOptions\r\n */\n\nexport class ChaosHandlerOptions {\n  /**\r\n   * @public\r\n   * @constructor\r\n   * To create an instance of Testing Handler Options\r\n   * @param {ChaosStrategy} ChaosStrategy - Specifies the startegy used for the Testing Handler -> RAMDOM/MANUAL\r\n   * @param {string} statusMessage - The Message to be returned in the response\r\n   * @param {number?} statusCode - The statusCode to be returned in the response\r\n   * @param {number?} chaosPercentage - The percentage of randomness/chaos in the handler\r\n   * @param {any?} responseBody - The response body to be returned in the response\r\n   * @returns An instance of ChaosHandlerOptions\r\n   */\n  constructor(chaosStrategy = ChaosStrategy.RANDOM, statusMessage = \"Some error Happened\", statusCode, chaosPercentage, responseBody) {\n    this.chaosStrategy = chaosStrategy;\n    this.statusCode = statusCode;\n    this.statusMessage = statusMessage;\n    this.chaosPercentage = chaosPercentage !== undefined ? chaosPercentage : 10;\n    this.responseBody = responseBody;\n\n    if (this.chaosPercentage > 100) {\n      throw new Error(\"Error Pecentage can not be more than 100\");\n    }\n  }\n\n}","map":{"version":3,"sources":["../../../../src/middleware/options/ChaosHandlerOptions.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAEH;;AAEG;AAEH,SAAS,aAAT,QAA8B,iBAA9B;AAGA;;;;;AAKG;;AACH,OAAM,MAAO,mBAAP,CAA0B;AAqC/B;;;;;;;;;;AAUG;AACH,EAAA,WAAA,CAAmB,aAAA,GAA+B,aAAa,CAAC,MAAhE,EAAwE,aAAA,GAAwB,qBAAhG,EAAuH,UAAvH,EAA4I,eAA5I,EAAsK,YAAtK,EAAwL;AACvL,SAAK,aAAL,GAAqB,aAArB;AACA,SAAK,UAAL,GAAkB,UAAlB;AACA,SAAK,aAAL,GAAqB,aAArB;AACA,SAAK,eAAL,GAAuB,eAAe,KAAK,SAApB,GAAgC,eAAhC,GAAkD,EAAzE;AACA,SAAK,YAAL,GAAoB,YAApB;;AACA,QAAI,KAAK,eAAL,GAAuB,GAA3B,EAAgC;AAC/B,YAAM,IAAI,KAAJ,CAAU,0CAAV,CAAN;AACA;AACD;;AAzD8B","sourceRoot":"","sourcesContent":["/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\r\n/**\r\n * @module ChaosHandlerOptions\r\n */\r\nimport { ChaosStrategy } from \"./ChaosStrategy\";\r\n/**\r\n * Class representing ChaosHandlerOptions\r\n * @class\r\n * Class\r\n * @implements MiddlewareOptions\r\n */\r\nexport class ChaosHandlerOptions {\r\n    /**\r\n     * @public\r\n     * @constructor\r\n     * To create an instance of Testing Handler Options\r\n     * @param {ChaosStrategy} ChaosStrategy - Specifies the startegy used for the Testing Handler -> RAMDOM/MANUAL\r\n     * @param {string} statusMessage - The Message to be returned in the response\r\n     * @param {number?} statusCode - The statusCode to be returned in the response\r\n     * @param {number?} chaosPercentage - The percentage of randomness/chaos in the handler\r\n     * @param {any?} responseBody - The response body to be returned in the response\r\n     * @returns An instance of ChaosHandlerOptions\r\n     */\r\n    constructor(chaosStrategy = ChaosStrategy.RANDOM, statusMessage = \"Some error Happened\", statusCode, chaosPercentage, responseBody) {\r\n        this.chaosStrategy = chaosStrategy;\r\n        this.statusCode = statusCode;\r\n        this.statusMessage = statusMessage;\r\n        this.chaosPercentage = chaosPercentage !== undefined ? chaosPercentage : 10;\r\n        this.responseBody = responseBody;\r\n        if (this.chaosPercentage > 100) {\r\n            throw new Error(\"Error Pecentage can not be more than 100\");\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=ChaosHandlerOptions.js.map"]},"metadata":{},"sourceType":"module"}