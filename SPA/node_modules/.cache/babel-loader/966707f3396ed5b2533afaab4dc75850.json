{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\n\n/**\r\n * @module HTTPClientFactory\r\n */\nimport { HTTPClient } from \"./HTTPClient\";\nimport { AuthenticationHandler } from \"./middleware/AuthenticationHandler\";\nimport { HTTPMessageHandler } from \"./middleware/HTTPMessageHandler\";\nimport { RedirectHandlerOptions } from \"./middleware/options/RedirectHandlerOptions\";\nimport { RetryHandlerOptions } from \"./middleware/options/RetryHandlerOptions\";\nimport { RedirectHandler } from \"./middleware/RedirectHandler\";\nimport { RetryHandler } from \"./middleware/RetryHandler\";\nimport { TelemetryHandler } from \"./middleware/TelemetryHandler\";\n/**\r\n * @private\r\n * To check whether the environment is node or not\r\n * @returns A boolean representing the environment is node or not\r\n */\n\nconst isNodeEnvironment = () => {\n  return typeof process === \"object\" && typeof require === \"function\";\n};\n/**\r\n * @class\r\n * Class representing HTTPClientFactory\r\n */\n\n\nexport class HTTPClientFactory {\n  /**\r\n   * @public\r\n   * @static\r\n   * Creates HTTPClient with default middleware chain\r\n   * @param {AuthenticationProvider} authProvider - The authentication provider instance\r\n   * @returns A HTTPClient instance\r\n   *\r\n   * NOTE: These are the things that we need to remember while doing modifications in the below default pipeline.\r\n   * \t\t* HTTPMessageHander should be the last one in the middleware pipeline, because this makes the actual network call of the request\r\n   * \t\t* TelemetryHandler should be the one prior to the last middleware in the chain, because this is the one which actually collects and appends the usage flag and placing this handler \t*\t\t  before making the actual network call ensures that the usage of all features are recorded in the flag.\r\n   * \t\t* The best place for AuthenticationHandler is in the starting of the pipeline, because every other handler might have to work for multiple times for a request but the auth token for\r\n   * \t\t  them will remain same. For example, Retry and Redirect handlers might be working multiple times for a request based on the response but their auth token would remain same.\r\n   */\n  static createWithAuthenticationProvider(authProvider) {\n    const authenticationHandler = new AuthenticationHandler(authProvider);\n    const retryHandler = new RetryHandler(new RetryHandlerOptions());\n    const telemetryHandler = new TelemetryHandler();\n    const httpMessageHandler = new HTTPMessageHandler();\n    authenticationHandler.setNext(retryHandler);\n\n    if (isNodeEnvironment()) {\n      const redirectHandler = new RedirectHandler(new RedirectHandlerOptions());\n      retryHandler.setNext(redirectHandler);\n      redirectHandler.setNext(telemetryHandler);\n    } else {\n      retryHandler.setNext(telemetryHandler);\n    }\n\n    telemetryHandler.setNext(httpMessageHandler);\n    return HTTPClientFactory.createWithMiddleware(authenticationHandler);\n  }\n  /**\r\n   * @public\r\n   * @static\r\n   * Creates a middleware chain with the given one\r\n   * @property {...Middleware} middleware - The first middleware of the middleware chain or a sequence of all the Middleware handlers\r\n   * @returns A HTTPClient instance\r\n   */\n\n\n  static createWithMiddleware(...middleware) {\n    // Middleware should not empty or undefined. This is check is present in the HTTPClient constructor.\n    return new HTTPClient(...middleware);\n  }\n\n}","map":{"version":3,"sources":["../../src/HTTPClientFactory.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAEH;;AAEG;AAEH,SAAS,UAAT,QAA2B,cAA3B;AAEA,SAAS,qBAAT,QAAsC,oCAAtC;AACA,SAAS,kBAAT,QAAmC,iCAAnC;AAEA,SAAS,sBAAT,QAAuC,6CAAvC;AACA,SAAS,mBAAT,QAAoC,0CAApC;AACA,SAAS,eAAT,QAAgC,8BAAhC;AACA,SAAS,YAAT,QAA6B,2BAA7B;AACA,SAAS,gBAAT,QAAiC,+BAAjC;AAEA;;;;AAIG;;AACH,MAAM,iBAAiB,GAAG,MAAc;AACvC,SAAO,OAAO,OAAP,KAAmB,QAAnB,IAA+B,OAAO,OAAP,KAAmB,UAAzD;AACA,CAFD;AAIA;;;AAGG;;;AACH,OAAM,MAAO,iBAAP,CAAwB;AAC7B;;;;;;;;;;;;AAYG;AAC2C,SAAhC,gCAAgC,CAAC,YAAD,EAAqC;AAClF,UAAM,qBAAqB,GAAG,IAAI,qBAAJ,CAA0B,YAA1B,CAA9B;AACA,UAAM,YAAY,GAAG,IAAI,YAAJ,CAAiB,IAAI,mBAAJ,EAAjB,CAArB;AACA,UAAM,gBAAgB,GAAG,IAAI,gBAAJ,EAAzB;AACA,UAAM,kBAAkB,GAAG,IAAI,kBAAJ,EAA3B;AAEA,IAAA,qBAAqB,CAAC,OAAtB,CAA8B,YAA9B;;AACA,QAAI,iBAAiB,EAArB,EAAyB;AACxB,YAAM,eAAe,GAAG,IAAI,eAAJ,CAAoB,IAAI,sBAAJ,EAApB,CAAxB;AACA,MAAA,YAAY,CAAC,OAAb,CAAqB,eAArB;AACA,MAAA,eAAe,CAAC,OAAhB,CAAwB,gBAAxB;AACA,KAJD,MAIO;AACN,MAAA,YAAY,CAAC,OAAb,CAAqB,gBAArB;AACA;;AACD,IAAA,gBAAgB,CAAC,OAAjB,CAAyB,kBAAzB;AACA,WAAO,iBAAiB,CAAC,oBAAlB,CAAuC,qBAAvC,CAAP;AACA;AAED;;;;;;AAMG;;;AAC+B,SAApB,oBAAoB,CAAC,GAAG,UAAJ,EAA4B;AAC7D;AACA,WAAO,IAAI,UAAJ,CAAe,GAAG,UAAlB,CAAP;AACA;;AA1C4B","sourceRoot":"","sourcesContent":["/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\r\n/**\r\n * @module HTTPClientFactory\r\n */\r\nimport { HTTPClient } from \"./HTTPClient\";\r\nimport { AuthenticationHandler } from \"./middleware/AuthenticationHandler\";\r\nimport { HTTPMessageHandler } from \"./middleware/HTTPMessageHandler\";\r\nimport { RedirectHandlerOptions } from \"./middleware/options/RedirectHandlerOptions\";\r\nimport { RetryHandlerOptions } from \"./middleware/options/RetryHandlerOptions\";\r\nimport { RedirectHandler } from \"./middleware/RedirectHandler\";\r\nimport { RetryHandler } from \"./middleware/RetryHandler\";\r\nimport { TelemetryHandler } from \"./middleware/TelemetryHandler\";\r\n/**\r\n * @private\r\n * To check whether the environment is node or not\r\n * @returns A boolean representing the environment is node or not\r\n */\r\nconst isNodeEnvironment = () => {\r\n    return typeof process === \"object\" && typeof require === \"function\";\r\n};\r\n/**\r\n * @class\r\n * Class representing HTTPClientFactory\r\n */\r\nexport class HTTPClientFactory {\r\n    /**\r\n     * @public\r\n     * @static\r\n     * Creates HTTPClient with default middleware chain\r\n     * @param {AuthenticationProvider} authProvider - The authentication provider instance\r\n     * @returns A HTTPClient instance\r\n     *\r\n     * NOTE: These are the things that we need to remember while doing modifications in the below default pipeline.\r\n     * \t\t* HTTPMessageHander should be the last one in the middleware pipeline, because this makes the actual network call of the request\r\n     * \t\t* TelemetryHandler should be the one prior to the last middleware in the chain, because this is the one which actually collects and appends the usage flag and placing this handler \t*\t\t  before making the actual network call ensures that the usage of all features are recorded in the flag.\r\n     * \t\t* The best place for AuthenticationHandler is in the starting of the pipeline, because every other handler might have to work for multiple times for a request but the auth token for\r\n     * \t\t  them will remain same. For example, Retry and Redirect handlers might be working multiple times for a request based on the response but their auth token would remain same.\r\n     */\r\n    static createWithAuthenticationProvider(authProvider) {\r\n        const authenticationHandler = new AuthenticationHandler(authProvider);\r\n        const retryHandler = new RetryHandler(new RetryHandlerOptions());\r\n        const telemetryHandler = new TelemetryHandler();\r\n        const httpMessageHandler = new HTTPMessageHandler();\r\n        authenticationHandler.setNext(retryHandler);\r\n        if (isNodeEnvironment()) {\r\n            const redirectHandler = new RedirectHandler(new RedirectHandlerOptions());\r\n            retryHandler.setNext(redirectHandler);\r\n            redirectHandler.setNext(telemetryHandler);\r\n        }\r\n        else {\r\n            retryHandler.setNext(telemetryHandler);\r\n        }\r\n        telemetryHandler.setNext(httpMessageHandler);\r\n        return HTTPClientFactory.createWithMiddleware(authenticationHandler);\r\n    }\r\n    /**\r\n     * @public\r\n     * @static\r\n     * Creates a middleware chain with the given one\r\n     * @property {...Middleware} middleware - The first middleware of the middleware chain or a sequence of all the Middleware handlers\r\n     * @returns A HTTPClient instance\r\n     */\r\n    static createWithMiddleware(...middleware) {\r\n        // Middleware should not empty or undefined. This is check is present in the HTTPClient constructor.\r\n        return new HTTPClient(...middleware);\r\n    }\r\n}\r\n//# sourceMappingURL=HTTPClientFactory.js.map"]},"metadata":{},"sourceType":"module"}