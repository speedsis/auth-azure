{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __extends, __awaiter, __generator, __assign } from '../_virtual/_tslib.js';\nimport { AuthenticationScheme, GrantType, Errors } from '../utils/Constants.js';\nimport { ClientAuthError as ClientAuthError$1, ClientAuthErrorMessage } from '../error/ClientAuthError.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\nimport { ClientConfigurationError as ClientConfigurationError$1 } from '../error/ClientConfigurationError.js';\nimport { buildClientInfoFromHomeAccountId } from '../account/ClientInfo.js';\nimport { ServerError as ServerError$1 } from '../error/ServerError.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { BaseClient as BaseClient$1 } from './BaseClient.js';\nimport { RequestParameterBuilder as RequestParameterBuilder$1 } from '../request/RequestParameterBuilder.js';\nimport { TimeUtils as TimeUtils$1 } from '../utils/TimeUtils.js';\nimport { UrlString as UrlString$1 } from '../url/UrlString.js';\nimport { PopTokenGenerator as PopTokenGenerator$1 } from '../crypto/PopTokenGenerator.js';\nimport { ResponseHandler as ResponseHandler$1 } from '../response/ResponseHandler.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * OAuth2.0 refresh token client\r\n */\n\nvar RefreshTokenClient = function (_super) {\n  __extends(RefreshTokenClient, _super);\n\n  function RefreshTokenClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n\n  RefreshTokenClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqTimestamp, response, responseHandler;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            reqTimestamp = TimeUtils$1.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(request, this.authority)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler$1(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin);\n            responseHandler.validateTokenResponse(response.body);\n            return [2\n            /*return*/\n            , responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request, undefined, undefined, true)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.acquireTokenByRefreshToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var isFOCI, noFamilyRTInCache, clientMismatchErrorWithFamilyRT;\n      return __generator(this, function (_a) {\n        // Cannot renew token if no request object is given.\n        if (!request) {\n          throw ClientConfigurationError$1.createEmptyTokenRequestError();\n        } // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\n\n\n        if (!request.account) {\n          throw ClientAuthError$1.createNoAccountInSilentRequestError();\n        }\n\n        isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId); // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\n\n        if (isFOCI) {\n          try {\n            return [2\n            /*return*/\n            , this.acquireTokenWithCachedRefreshToken(request, true)];\n          } catch (e) {\n            noFamilyRTInCache = e instanceof ClientAuthError$1 && e.errorCode === ClientAuthErrorMessage.noTokensFoundError.code;\n            clientMismatchErrorWithFamilyRT = e instanceof ServerError$1 && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR; // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\n\n            if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\n              return [2\n              /*return*/\n              , this.acquireTokenWithCachedRefreshToken(request, false)]; // throw in all other cases\n            } else {\n              throw e;\n            }\n          }\n        } // fall back to application refresh token acquisition\n\n\n        return [2\n        /*return*/\n        , this.acquireTokenWithCachedRefreshToken(request, false)];\n      });\n    });\n  };\n  /**\r\n   * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.acquireTokenWithCachedRefreshToken = function (request, foci) {\n    return __awaiter(this, void 0, void 0, function () {\n      var refreshToken, refreshTokenRequest;\n      return __generator(this, function (_a) {\n        refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci); // no refresh Token\n\n        if (!refreshToken) {\n          throw ClientAuthError$1.createNoTokensFoundError();\n        }\n\n        refreshTokenRequest = __assign(__assign({}, request), {\n          refreshToken: refreshToken.secret,\n          authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\n          ccsCredential: {\n            credential: request.account.homeAccountId,\n            type: CcsCredentialType.HOME_ACCOUNT_ID\n          }\n        });\n        return [2\n        /*return*/\n        , this.acquireToken(refreshTokenRequest)];\n      });\n    });\n  };\n  /**\r\n   * Constructs the network message and makes a NW call to the underlying secure token service\r\n   * @param request\r\n   * @param authority\r\n   */\n\n\n  RefreshTokenClient.prototype.executeTokenRequest = function (request, authority) {\n    return __awaiter(this, void 0, void 0, function () {\n      var requestBody, queryParameters, headers, thumbprint, endpoint;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.createTokenRequestBody(request)];\n\n          case 1:\n            requestBody = _a.sent();\n            queryParameters = this.createTokenQueryParameters(request);\n            headers = this.createTokenRequestHeaders(request.ccsCredential);\n            thumbprint = {\n              clientId: this.config.authOptions.clientId,\n              authority: authority.canonicalAuthority,\n              scopes: request.scopes\n            };\n            endpoint = UrlString$1.appendQueryString(authority.tokenEndpoint, queryParameters);\n            return [2\n            /*return*/\n            , this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint)];\n        }\n      });\n    });\n  };\n  /**\r\n   * Creates query string for the /token request\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.createTokenQueryParameters = function (request) {\n    var parameterBuilder = new RequestParameterBuilder$1();\n\n    if (request.tokenQueryParameters) {\n      parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n  /**\r\n   * Helper function to create the token request body\r\n   * @param request\r\n   */\n\n\n  RefreshTokenClient.prototype.createTokenRequestBody = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parameterBuilder, correlationId, clientAssertion, popTokenGenerator, _a, _b, clientInfo;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            parameterBuilder = new RequestParameterBuilder$1();\n            parameterBuilder.addClientId(this.config.authOptions.clientId);\n            parameterBuilder.addScopes(request.scopes);\n            parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\n            parameterBuilder.addClientInfo();\n            parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n            parameterBuilder.addThrottling();\n\n            if (this.serverTelemetryManager) {\n              parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n            }\n\n            correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n            parameterBuilder.addCorrelationId(correlationId);\n            parameterBuilder.addRefreshToken(request.refreshToken);\n\n            if (this.config.clientCredentials.clientSecret) {\n              parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n            }\n\n            if (this.config.clientCredentials.clientAssertion) {\n              clientAssertion = this.config.clientCredentials.clientAssertion;\n              parameterBuilder.addClientAssertion(clientAssertion.assertion);\n              parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n            }\n\n            if (!(request.authenticationScheme === AuthenticationScheme.POP)) return [3\n            /*break*/\n            , 2];\n            popTokenGenerator = new PopTokenGenerator$1(this.cryptoUtils);\n            _b = (_a = parameterBuilder).addPopToken;\n            return [4\n            /*yield*/\n            , popTokenGenerator.generateCnf(request)];\n\n          case 1:\n            _b.apply(_a, [_c.sent()]);\n\n            _c.label = 2;\n\n          case 2:\n            if (!StringUtils$1.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n              parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n            }\n\n            if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\n              switch (request.ccsCredential.type) {\n                case CcsCredentialType.HOME_ACCOUNT_ID:\n                  try {\n                    clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\n                    parameterBuilder.addCcsOid(clientInfo);\n                  } catch (e) {\n                    this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\n                  }\n\n                  break;\n\n                case CcsCredentialType.UPN:\n                  parameterBuilder.addCcsUpn(request.ccsCredential.credential);\n                  break;\n              }\n            }\n\n            return [2\n            /*return*/\n            , parameterBuilder.createQueryString()];\n        }\n      });\n    });\n  };\n\n  return RefreshTokenClient;\n}(BaseClient$1);\n\nexport { RefreshTokenClient };","map":{"version":3,"sources":["../../src/client/RefreshTokenClient.ts"],"names":["BaseClient","TimeUtils","ResponseHandler","ClientConfigurationError","ClientAuthError","ServerError","UrlString","RequestParameterBuilder","PopTokenGenerator","StringUtils"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { CommonRefreshTokenRequest } from \"../request/CommonRefreshTokenRequest\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { GrantType, AuthenticationScheme, Errors  } from \"../utils/Constants\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { PopTokenGenerator } from \"../crypto/PopTokenGenerator\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { NetworkResponse } from \"../network/NetworkManager\";\r\nimport { CommonSilentFlowRequest } from \"../request/CommonSilentFlowRequest\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { ClientAuthError, ClientAuthErrorMessage } from \"../error/ClientAuthError\";\r\nimport { ServerError } from \"../error/ServerError\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { UrlString } from \"../url/UrlString\";\r\nimport { CcsCredentialType } from \"../account/CcsCredential\";\r\nimport { buildClientInfoFromHomeAccountId } from \"../account/ClientInfo\";\r\n\r\n/**\r\n * OAuth2.0 refresh token client\r\n */\r\nexport class RefreshTokenClient extends BaseClient {\r\n\r\n    constructor(configuration: ClientConfiguration) {\r\n        super(configuration);\r\n    }\r\n\r\n    public async acquireToken(request: CommonRefreshTokenRequest): Promise<AuthenticationResult>{\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response = await this.executeTokenRequest(request, this.authority);\r\n\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        responseHandler.validateTokenResponse(response.body);\r\n        return responseHandler.handleServerTokenResponse(\r\n            response.body,\r\n            this.authority,\r\n            reqTimestamp,\r\n            request,\r\n            undefined,\r\n            undefined,\r\n            true\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Gets cached refresh token and attaches to request, then calls acquireToken API\r\n     * @param request\r\n     */\r\n    public async acquireTokenByRefreshToken(request: CommonSilentFlowRequest): Promise<AuthenticationResult> {\r\n        // Cannot renew token if no request object is given.\r\n        if (!request) {\r\n            throw ClientConfigurationError.createEmptyTokenRequestError();\r\n        }\r\n\r\n        // We currently do not support silent flow for account === null use cases; This will be revisited for confidential flow usecases\r\n        if (!request.account) {\r\n            throw ClientAuthError.createNoAccountInSilentRequestError();\r\n        }\r\n\r\n        // try checking if FOCI is enabled for the given application\r\n        const isFOCI = this.cacheManager.isAppMetadataFOCI(request.account.environment, this.config.authOptions.clientId);\r\n\r\n        // if the app is part of the family, retrive a Family refresh token if present and make a refreshTokenRequest\r\n        if (isFOCI) {\r\n            try {\r\n                return this.acquireTokenWithCachedRefreshToken(request, true);\r\n            } catch (e) {\r\n                const noFamilyRTInCache = e instanceof ClientAuthError && e.errorCode === ClientAuthErrorMessage.noTokensFoundError.code;\r\n                const clientMismatchErrorWithFamilyRT = e instanceof ServerError && e.errorCode === Errors.INVALID_GRANT_ERROR && e.subError === Errors.CLIENT_MISMATCH_ERROR;\r\n\r\n                // if family Refresh Token (FRT) cache acquisition fails or if client_mismatch error is seen with FRT, reattempt with application Refresh Token (ART)\r\n                if (noFamilyRTInCache || clientMismatchErrorWithFamilyRT) {\r\n                    return this.acquireTokenWithCachedRefreshToken(request, false);\r\n                // throw in all other cases\r\n                } else {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n\r\n        // fall back to application refresh token acquisition\r\n        return this.acquireTokenWithCachedRefreshToken(request, false);\r\n    }\r\n\r\n    /**\r\n     * makes a network call to acquire tokens by exchanging RefreshToken available in userCache; throws if refresh token is not cached\r\n     * @param request\r\n     */\r\n    private async acquireTokenWithCachedRefreshToken(request: CommonSilentFlowRequest, foci: boolean) {\r\n        // fetches family RT or application RT based on FOCI value\r\n        const refreshToken = this.cacheManager.readRefreshTokenFromCache(this.config.authOptions.clientId, request.account, foci);\r\n\r\n        // no refresh Token\r\n        if (!refreshToken) {\r\n            throw ClientAuthError.createNoTokensFoundError();\r\n        }\r\n\r\n        const refreshTokenRequest: CommonRefreshTokenRequest = {\r\n            ...request,\r\n            refreshToken: refreshToken.secret,\r\n            authenticationScheme: request.authenticationScheme || AuthenticationScheme.BEARER,\r\n            ccsCredential: {\r\n                credential: request.account.homeAccountId,\r\n                type: CcsCredentialType.HOME_ACCOUNT_ID\r\n            }\r\n        };\r\n\r\n        return this.acquireToken(refreshTokenRequest);\r\n    }\r\n\r\n    /**\r\n     * Constructs the network message and makes a NW call to the underlying secure token service\r\n     * @param request\r\n     * @param authority\r\n     */\r\n    private async executeTokenRequest(request: CommonRefreshTokenRequest, authority: Authority)\r\n        : Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\r\n\r\n        const requestBody = await this.createTokenRequestBody(request);\r\n        const queryParameters = this.createTokenQueryParameters(request);\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders(request.ccsCredential);\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: authority.canonicalAuthority,\r\n            scopes: request.scopes\r\n        };\r\n\r\n        const endpoint = UrlString.appendQueryString(authority.tokenEndpoint, queryParameters);\r\n        return this.executePostToTokenEndpoint(endpoint, requestBody, headers, thumbprint);\r\n    }\r\n\r\n    /**\r\n     * Creates query string for the /token request\r\n     * @param request \r\n     */\r\n    private createTokenQueryParameters(request: CommonRefreshTokenRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        if (request.tokenQueryParameters) {\r\n            parameterBuilder.addExtraQueryParameters(request.tokenQueryParameters);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n\r\n    /**\r\n     * Helper function to create the token request body\r\n     * @param request\r\n     */\r\n    private async createTokenRequestBody(request: CommonRefreshTokenRequest): Promise<string> {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n\r\n        parameterBuilder.addScopes(request.scopes);\r\n\r\n        parameterBuilder.addGrantType(GrantType.REFRESH_TOKEN_GRANT);\r\n\r\n        parameterBuilder.addClientInfo();\r\n\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n\r\n        parameterBuilder.addThrottling();\r\n        \r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        parameterBuilder.addRefreshToken(request.refreshToken);\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n\r\n        if (request.authenticationScheme === AuthenticationScheme.POP) {\r\n            const popTokenGenerator = new PopTokenGenerator(this.cryptoUtils);\r\n\r\n            parameterBuilder.addPopToken(await popTokenGenerator.generateCnf(request));\r\n        }\r\n\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        if (this.config.systemOptions.preventCorsPreflight && request.ccsCredential) {\r\n            switch (request.ccsCredential.type) {\r\n                case CcsCredentialType.HOME_ACCOUNT_ID:\r\n                    try {\r\n                        const clientInfo = buildClientInfoFromHomeAccountId(request.ccsCredential.credential);\r\n                        parameterBuilder.addCcsOid(clientInfo);\r\n                    } catch (e) {\r\n                        this.logger.verbose(\"Could not parse home account ID for CCS Header: \" + e);\r\n                    }\r\n                    break;\r\n                case CcsCredentialType.UPN:\r\n                    parameterBuilder.addCcsUpn(request.ccsCredential.credential);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}