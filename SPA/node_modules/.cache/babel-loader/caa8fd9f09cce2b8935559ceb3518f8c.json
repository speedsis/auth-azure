{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { HTTP_REQUEST_TYPE } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\r\n */\n\nvar FetchClient = function () {\n  function FetchClient() {}\n  /**\r\n   * Fetch Client for REST endpoints - Get request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n\n\n  FetchClient.prototype.sendGetRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var response, e_1, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , fetch(url, {\n              method: HTTP_REQUEST_TYPE.GET,\n              headers: this.getFetchHeaders(options)\n            })];\n\n          case 1:\n            response = _b.sent();\n            return [3\n            /*break*/\n            , 3];\n\n          case 2:\n            e_1 = _b.sent();\n\n            if (window.navigator.onLine) {\n              throw BrowserAuthError.createGetRequestFailedError(e_1, url);\n            } else {\n              throw BrowserAuthError.createNoNetworkConnectivityError();\n            }\n\n          case 3:\n            _b.trys.push([3, 5,, 6]);\n\n            _a = {\n              headers: this.getHeaderDict(response.headers)\n            };\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 4:\n            return [2\n            /*return*/\n            , (_a.body = _b.sent(), _a.status = response.status, _a)];\n\n          case 5:\n            _b.sent();\n\n            throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Fetch Client for REST endpoints - Post request\r\n   * @param url\r\n   * @param headers\r\n   * @param body\r\n   */\n\n\n  FetchClient.prototype.sendPostRequestAsync = function (url, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqBody, response, e_3, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            reqBody = options && options.body || \"\";\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , fetch(url, {\n              method: HTTP_REQUEST_TYPE.POST,\n              headers: this.getFetchHeaders(options),\n              body: reqBody\n            })];\n\n          case 2:\n            response = _b.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_3 = _b.sent();\n\n            if (window.navigator.onLine) {\n              throw BrowserAuthError.createPostRequestFailedError(e_3, url);\n            } else {\n              throw BrowserAuthError.createNoNetworkConnectivityError();\n            }\n\n          case 4:\n            _b.trys.push([4, 6,, 7]);\n\n            _a = {\n              headers: this.getHeaderDict(response.headers)\n            };\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 5:\n            return [2\n            /*return*/\n            , (_a.body = _b.sent(), _a.status = response.status, _a)];\n\n          case 6:\n            _b.sent();\n\n            throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Get Fetch API Headers object from string map\r\n   * @param inputHeaders\r\n   */\n\n\n  FetchClient.prototype.getFetchHeaders = function (options) {\n    var headers = new Headers();\n\n    if (!(options && options.headers)) {\n      return headers;\n    }\n\n    var optionsHeaders = options.headers;\n    Object.keys(optionsHeaders).forEach(function (key) {\n      headers.append(key, optionsHeaders[key]);\n    });\n    return headers;\n  };\n\n  FetchClient.prototype.getHeaderDict = function (headers) {\n    var headerDict = {};\n    headers.forEach(function (value, key) {\n      headerDict[key] = value;\n    });\n    return headerDict;\n  };\n\n  return FetchClient;\n}();\n\nexport { FetchClient };","map":{"version":3,"sources":["../../src/network/FetchClient.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { INetworkModule, NetworkRequestOptions, NetworkResponse } from \"@azure/msal-common\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { HTTP_REQUEST_TYPE } from \"../utils/BrowserConstants\";\r\n\r\n/**\r\n * This class implements the Fetch API for GET and POST requests. See more here: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\r\n */\r\nexport class FetchClient implements INetworkModule {\r\n\r\n    /**\r\n     * Fetch Client for REST endpoints - Get request\r\n     * @param url \r\n     * @param headers \r\n     * @param body \r\n     */\r\n    async sendGetRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\r\n        let response;\r\n        try {\r\n            response = await fetch(url, {\r\n                method: HTTP_REQUEST_TYPE.GET,\r\n                headers: this.getFetchHeaders(options)\r\n            });\r\n        } catch (e) {\r\n            if (window.navigator.onLine) {\r\n                throw BrowserAuthError.createGetRequestFailedError(e, url);\r\n            } else {\r\n                throw BrowserAuthError.createNoNetworkConnectivityError();\r\n            }\r\n        }\r\n\r\n        try {\r\n            return {\r\n                headers: this.getHeaderDict(response.headers),\r\n                body: await response.json() as T,\r\n                status: response.status\r\n            };\r\n        } catch (e) {\r\n            throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fetch Client for REST endpoints - Post request\r\n     * @param url \r\n     * @param headers \r\n     * @param body \r\n     */\r\n    async sendPostRequestAsync<T>(url: string, options?: NetworkRequestOptions): Promise<NetworkResponse<T>> {\r\n        const reqBody = (options && options.body) || \"\";\r\n\r\n        let response;\r\n        try {\r\n            response = await fetch(url, {\r\n                method: HTTP_REQUEST_TYPE.POST,\r\n                headers: this.getFetchHeaders(options),\r\n                body: reqBody\r\n            });\r\n        } catch (e) {\r\n            if (window.navigator.onLine) {\r\n                throw BrowserAuthError.createPostRequestFailedError(e, url);\r\n            } else {\r\n                throw BrowserAuthError.createNoNetworkConnectivityError();\r\n            }\r\n        }\r\n\r\n        try {\r\n            return {\r\n                headers: this.getHeaderDict(response.headers),\r\n                body: await response.json() as T,\r\n                status: response.status\r\n            };\r\n        } catch (e) {\r\n            throw BrowserAuthError.createFailedToParseNetworkResponseError(url);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get Fetch API Headers object from string map\r\n     * @param inputHeaders \r\n     */\r\n    private getFetchHeaders(options?: NetworkRequestOptions): Headers {\r\n        const headers = new Headers();\r\n        if (!(options && options.headers)) {\r\n            return headers;\r\n        }\r\n        const optionsHeaders = options.headers;\r\n        Object.keys(optionsHeaders).forEach((key) => {\r\n            headers.append(key, optionsHeaders[key]);\r\n        });\r\n        return headers;\r\n    }\r\n\r\n    private getHeaderDict(headers: Headers): Record<string, string> {\r\n        const headerDict: Record<string, string> = {};\r\n        headers.forEach((value: string, key: string) => {\r\n            headerDict[key] = value;\r\n        });\r\n        return headerDict;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}