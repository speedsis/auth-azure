{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\n\n/**\r\n * @module Client\r\n */\nimport { GRAPH_API_VERSION, GRAPH_BASE_URL } from \"./Constants\";\nimport { CustomAuthenticationProvider } from \"./CustomAuthenticationProvider\";\nimport { GraphRequest } from \"./GraphRequest\";\nimport { HTTPClient } from \"./HTTPClient\";\nimport { HTTPClientFactory } from \"./HTTPClientFactory\";\nimport { validatePolyFilling } from \"./ValidatePolyFilling\";\nexport class Client {\n  /**\r\n   * @private\r\n   * @constructor\r\n   * Creates an instance of Client\r\n   * @param {ClientOptions} clientOptions - The options to instantiate the client object\r\n   */\n  constructor(clientOptions) {\n    /**\r\n     * @private\r\n     * A member which stores the Client instance options\r\n     */\n    this.config = {\n      baseUrl: GRAPH_BASE_URL,\n      debugLogging: false,\n      defaultVersion: GRAPH_API_VERSION\n    };\n\n    try {\n      validatePolyFilling();\n    } catch (error) {\n      throw error;\n    }\n\n    for (const key in clientOptions) {\n      if (clientOptions.hasOwnProperty(key)) {\n        this.config[key] = clientOptions[key];\n      }\n    }\n\n    let httpClient;\n\n    if (clientOptions.authProvider !== undefined && clientOptions.middleware !== undefined) {\n      const error = new Error();\n      error.name = \"AmbiguityInInitialization\";\n      error.message = \"Unable to Create Client, Please provide either authentication provider for default middleware chain or custom middleware chain not both\";\n      throw error;\n    } else if (clientOptions.authProvider !== undefined) {\n      httpClient = HTTPClientFactory.createWithAuthenticationProvider(clientOptions.authProvider);\n    } else if (clientOptions.middleware !== undefined) {\n      httpClient = new HTTPClient(...[].concat(clientOptions.middleware));\n    } else {\n      const error = new Error();\n      error.name = \"InvalidMiddlewareChain\";\n      error.message = \"Unable to Create Client, Please provide either authentication provider for default middleware chain or custom middleware chain\";\n      throw error;\n    }\n\n    this.httpClient = httpClient;\n  }\n  /**\r\n   * @public\r\n   * @static\r\n   * To create a client instance with options and initializes the default middleware chain\r\n   * @param {Options} options - The options for client instance\r\n   * @returns The Client instance\r\n   */\n\n\n  static init(options) {\n    const clientOptions = {};\n\n    for (const i in options) {\n      if (options.hasOwnProperty(i)) {\n        clientOptions[i] = i === \"authProvider\" ? new CustomAuthenticationProvider(options[i]) : options[i];\n      }\n    }\n\n    return Client.initWithMiddleware(clientOptions);\n  }\n  /**\r\n   * @public\r\n   * @static\r\n   * To create a client instance with the Client Options\r\n   * @param {ClientOptions} clientOptions - The options object for initializing the client\r\n   * @returns The Client instance\r\n   */\n\n\n  static initWithMiddleware(clientOptions) {\n    try {\n      return new Client(clientOptions);\n    } catch (error) {\n      throw error;\n    }\n  }\n  /**\r\n   * @public\r\n   * Entry point to make requests\r\n   * @param {string} path - The path string value\r\n   * @returns The graph request instance\r\n   */\n\n\n  api(path) {\n    return new GraphRequest(this.httpClient, this.config, path);\n  }\n\n}","map":{"version":3,"sources":["../../src/Client.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAEH;;AAEG;AAEH,SAAS,iBAAT,EAA4B,cAA5B,QAAkD,aAAlD;AACA,SAAS,4BAAT,QAA6C,gCAA7C;AACA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,UAAT,QAA2B,cAA3B;AACA,SAAS,iBAAT,QAAkC,qBAAlC;AAGA,SAAS,mBAAT,QAAoC,uBAApC;AAEA,OAAM,MAAO,MAAP,CAAa;AAiDlB;;;;;AAKG;AACH,EAAA,WAAA,CAAoB,aAApB,EAAgD;AAtDhD;;;AAGG;AACK,SAAA,MAAA,GAAwB;AAC/B,MAAA,OAAO,EAAE,cADsB;AAE/B,MAAA,YAAY,EAAE,KAFiB;AAG/B,MAAA,cAAc,EAAE;AAHe,KAAxB;;AAmDP,QAAI;AACH,MAAA,mBAAmB;AACnB,KAFD,CAEE,OAAO,KAAP,EAAc;AACf,YAAM,KAAN;AACA;;AACD,SAAK,MAAM,GAAX,IAAkB,aAAlB,EAAiC;AAChC,UAAI,aAAa,CAAC,cAAd,CAA6B,GAA7B,CAAJ,EAAuC;AACtC,aAAK,MAAL,CAAY,GAAZ,IAAmB,aAAa,CAAC,GAAD,CAAhC;AACA;AACD;;AACD,QAAI,UAAJ;;AACA,QAAI,aAAa,CAAC,YAAd,KAA+B,SAA/B,IAA4C,aAAa,CAAC,UAAd,KAA6B,SAA7E,EAAwF;AACvF,YAAM,KAAK,GAAG,IAAI,KAAJ,EAAd;AACA,MAAA,KAAK,CAAC,IAAN,GAAa,2BAAb;AACA,MAAA,KAAK,CAAC,OAAN,GAAgB,yIAAhB;AACA,YAAM,KAAN;AACA,KALD,MAKO,IAAI,aAAa,CAAC,YAAd,KAA+B,SAAnC,EAA8C;AACpD,MAAA,UAAU,GAAG,iBAAiB,CAAC,gCAAlB,CAAmD,aAAa,CAAC,YAAjE,CAAb;AACA,KAFM,MAEA,IAAI,aAAa,CAAC,UAAd,KAA6B,SAAjC,EAA4C;AAClD,MAAA,UAAU,GAAG,IAAI,UAAJ,CAAe,GAAG,GAAG,MAAH,CAAU,aAAa,CAAC,UAAxB,CAAlB,CAAb;AACA,KAFM,MAEA;AACN,YAAM,KAAK,GAAG,IAAI,KAAJ,EAAd;AACA,MAAA,KAAK,CAAC,IAAN,GAAa,wBAAb;AACA,MAAA,KAAK,CAAC,OAAN,GAAgB,gIAAhB;AACA,YAAM,KAAN;AACA;;AACD,SAAK,UAAL,GAAkB,UAAlB;AACA;AAlED;;;;;;AAMG;;;AACe,SAAJ,IAAI,CAAC,OAAD,EAAiB;AAClC,UAAM,aAAa,GAAkB,EAArC;;AACA,SAAK,MAAM,CAAX,IAAgB,OAAhB,EAAyB;AACxB,UAAI,OAAO,CAAC,cAAR,CAAuB,CAAvB,CAAJ,EAA+B;AAC9B,QAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,CAAC,KAAK,cAAN,GAAuB,IAAI,4BAAJ,CAAiC,OAAO,CAAC,CAAD,CAAxC,CAAvB,GAAsE,OAAO,CAAC,CAAD,CAAhG;AACA;AACD;;AACD,WAAO,MAAM,CAAC,kBAAP,CAA0B,aAA1B,CAAP;AACA;AAED;;;;;;AAMG;;;AAC6B,SAAlB,kBAAkB,CAAC,aAAD,EAA6B;AAC5D,QAAI;AACH,aAAO,IAAI,MAAJ,CAAW,aAAX,CAAP;AACA,KAFD,CAEE,OAAO,KAAP,EAAc;AACf,YAAM,KAAN;AACA;AACD;AAsCD;;;;;AAKG;;;AACI,EAAA,GAAG,CAAC,IAAD,EAAa;AACtB,WAAO,IAAI,YAAJ,CAAiB,KAAK,UAAtB,EAAkC,KAAK,MAAvC,EAA+C,IAA/C,CAAP;AACA;;AA7FiB","sourceRoot":"","sourcesContent":["/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\r\n/**\r\n * @module Client\r\n */\r\nimport { GRAPH_API_VERSION, GRAPH_BASE_URL } from \"./Constants\";\r\nimport { CustomAuthenticationProvider } from \"./CustomAuthenticationProvider\";\r\nimport { GraphRequest } from \"./GraphRequest\";\r\nimport { HTTPClient } from \"./HTTPClient\";\r\nimport { HTTPClientFactory } from \"./HTTPClientFactory\";\r\nimport { validatePolyFilling } from \"./ValidatePolyFilling\";\r\nexport class Client {\r\n    /**\r\n     * @private\r\n     * @constructor\r\n     * Creates an instance of Client\r\n     * @param {ClientOptions} clientOptions - The options to instantiate the client object\r\n     */\r\n    constructor(clientOptions) {\r\n        /**\r\n         * @private\r\n         * A member which stores the Client instance options\r\n         */\r\n        this.config = {\r\n            baseUrl: GRAPH_BASE_URL,\r\n            debugLogging: false,\r\n            defaultVersion: GRAPH_API_VERSION,\r\n        };\r\n        try {\r\n            validatePolyFilling();\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n        for (const key in clientOptions) {\r\n            if (clientOptions.hasOwnProperty(key)) {\r\n                this.config[key] = clientOptions[key];\r\n            }\r\n        }\r\n        let httpClient;\r\n        if (clientOptions.authProvider !== undefined && clientOptions.middleware !== undefined) {\r\n            const error = new Error();\r\n            error.name = \"AmbiguityInInitialization\";\r\n            error.message = \"Unable to Create Client, Please provide either authentication provider for default middleware chain or custom middleware chain not both\";\r\n            throw error;\r\n        }\r\n        else if (clientOptions.authProvider !== undefined) {\r\n            httpClient = HTTPClientFactory.createWithAuthenticationProvider(clientOptions.authProvider);\r\n        }\r\n        else if (clientOptions.middleware !== undefined) {\r\n            httpClient = new HTTPClient(...[].concat(clientOptions.middleware));\r\n        }\r\n        else {\r\n            const error = new Error();\r\n            error.name = \"InvalidMiddlewareChain\";\r\n            error.message = \"Unable to Create Client, Please provide either authentication provider for default middleware chain or custom middleware chain\";\r\n            throw error;\r\n        }\r\n        this.httpClient = httpClient;\r\n    }\r\n    /**\r\n     * @public\r\n     * @static\r\n     * To create a client instance with options and initializes the default middleware chain\r\n     * @param {Options} options - The options for client instance\r\n     * @returns The Client instance\r\n     */\r\n    static init(options) {\r\n        const clientOptions = {};\r\n        for (const i in options) {\r\n            if (options.hasOwnProperty(i)) {\r\n                clientOptions[i] = i === \"authProvider\" ? new CustomAuthenticationProvider(options[i]) : options[i];\r\n            }\r\n        }\r\n        return Client.initWithMiddleware(clientOptions);\r\n    }\r\n    /**\r\n     * @public\r\n     * @static\r\n     * To create a client instance with the Client Options\r\n     * @param {ClientOptions} clientOptions - The options object for initializing the client\r\n     * @returns The Client instance\r\n     */\r\n    static initWithMiddleware(clientOptions) {\r\n        try {\r\n            return new Client(clientOptions);\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * @public\r\n     * Entry point to make requests\r\n     * @param {string} path - The path string value\r\n     * @returns The graph request instance\r\n     */\r\n    api(path) {\r\n        return new GraphRequest(this.httpClient, this.config, path);\r\n    }\r\n}\r\n//# sourceMappingURL=Client.js.map"]},"metadata":{},"sourceType":"module"}