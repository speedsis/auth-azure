{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __extends } from '../../_virtual/_tslib.js';\nimport { CredentialType } from '../../utils/Constants.js';\nimport { CredentialEntity as CredentialEntity$1 } from './CredentialEntity.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * ID_TOKEN Cache\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key Example: uid.utid-login.microsoftonline.com-idtoken-clientId-contoso.com-\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n * }\r\n */\n\nvar IdTokenEntity = function (_super) {\n  __extends(IdTokenEntity, _super);\n\n  function IdTokenEntity() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\r\n   * Create IdTokenEntity\r\n   * @param homeAccountId\r\n   * @param authenticationResult\r\n   * @param clientId\r\n   * @param authority\r\n   */\n\n\n  IdTokenEntity.createIdTokenEntity = function (homeAccountId, environment, idToken, clientId, tenantId, oboAssertion) {\n    var idTokenEntity = new IdTokenEntity();\n    idTokenEntity.credentialType = CredentialType.ID_TOKEN;\n    idTokenEntity.homeAccountId = homeAccountId;\n    idTokenEntity.environment = environment;\n    idTokenEntity.clientId = clientId;\n    idTokenEntity.secret = idToken;\n    idTokenEntity.realm = tenantId;\n    idTokenEntity.oboAssertion = oboAssertion;\n    return idTokenEntity;\n  };\n  /**\r\n   * Validates an entity: checks for all expected params\r\n   * @param entity\r\n   */\n\n\n  IdTokenEntity.isIdTokenEntity = function (entity) {\n    if (!entity) {\n      return false;\n    }\n\n    return entity.hasOwnProperty(\"homeAccountId\") && entity.hasOwnProperty(\"environment\") && entity.hasOwnProperty(\"credentialType\") && entity.hasOwnProperty(\"realm\") && entity.hasOwnProperty(\"clientId\") && entity.hasOwnProperty(\"secret\") && entity[\"credentialType\"] === CredentialType.ID_TOKEN;\n  };\n\n  return IdTokenEntity;\n}(CredentialEntity$1);\n\nexport { IdTokenEntity };","map":{"version":3,"sources":["../../../src/cache/entities/IdTokenEntity.ts"],"names":["CredentialEntity"],"mappings":";;;;;;AAAA;;;;;AAQA;;;;;;;;;;;;;;;;;;;AAiBmCA,EAAAA,SAAAA,CAAAA,aAAAA,EAAAA,MAAAA,CAAAA;;AAAnC,WAAA,aAAA,GAAA;;AAmDC;;;;;;;;;;AAzCU,EAAA,aAAA,CAAA,mBAAA,GAAP,UACI,aADJ,EAEI,WAFJ,EAGI,OAHJ,EAII,QAJJ,EAKI,QALJ,EAMI,YANJ,EAMyB;AAErB,QAAM,aAAa,GAAG,IAAI,aAAJ,EAAtB;AAEA,IAAA,aAAa,CAAC,cAAd,GAA+B,cAAc,CAAC,QAA9C;AACA,IAAA,aAAa,CAAC,aAAd,GAA8B,aAA9B;AACA,IAAA,aAAa,CAAC,WAAd,GAA4B,WAA5B;AACA,IAAA,aAAa,CAAC,QAAd,GAAyB,QAAzB;AACA,IAAA,aAAa,CAAC,MAAd,GAAuB,OAAvB;AACA,IAAA,aAAa,CAAC,KAAd,GAAsB,QAAtB;AACA,IAAA,aAAa,CAAC,YAAd,GAA6B,YAA7B;AAEA,WAAO,aAAP;AACH,GAnBM;;;;;;;AAyBA,EAAA,aAAA,CAAA,eAAA,GAAP,UAAuB,MAAvB,EAAqC;AAEjC,QAAI,CAAC,MAAL,EAAa;AACT,aAAO,KAAP;AACH;;AAED,WACI,MAAM,CAAC,cAAP,CAAsB,eAAtB,KACA,MAAM,CAAC,cAAP,CAAsB,aAAtB,CADA,IAEA,MAAM,CAAC,cAAP,CAAsB,gBAAtB,CAFA,IAGA,MAAM,CAAC,cAAP,CAAsB,OAAtB,CAHA,IAIA,MAAM,CAAC,cAAP,CAAsB,UAAtB,CAJA,IAKA,MAAM,CAAC,cAAP,CAAsB,QAAtB,CALA,IAMA,MAAM,CAAC,gBAAD,CAAN,KAA6B,cAAc,CAAC,QAPhD;AASH,GAfM;;AAgBX,SAAA,aAAA;AAnDA,C,CAAmCA,kB","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { CredentialEntity } from \"./CredentialEntity\";\r\nimport { CredentialType } from \"../../utils/Constants\";\r\n\r\n/**\r\n * ID_TOKEN Cache\r\n *\r\n * Key:Value Schema:\r\n *\r\n * Key Example: uid.utid-login.microsoftonline.com-idtoken-clientId-contoso.com-\r\n *\r\n * Value Schema:\r\n * {\r\n *      homeAccountId: home account identifier for the auth scheme,\r\n *      environment: entity that issued the token, represented as a full host\r\n *      credentialType: Type of credential as a string, can be one of the following: RefreshToken, AccessToken, IdToken, Password, Cookie, Certificate, Other\r\n *      clientId: client ID of the application\r\n *      secret: Actual credential as a string\r\n *      realm: Full tenant or organizational identifier that the account belongs to\r\n * }\r\n */\r\nexport class IdTokenEntity extends CredentialEntity {\r\n    realm: string;\r\n\r\n    /**\r\n     * Create IdTokenEntity\r\n     * @param homeAccountId\r\n     * @param authenticationResult\r\n     * @param clientId\r\n     * @param authority\r\n     */\r\n    static createIdTokenEntity(\r\n        homeAccountId: string,\r\n        environment: string,\r\n        idToken: string,\r\n        clientId: string,\r\n        tenantId: string,\r\n        oboAssertion?: string\r\n    ): IdTokenEntity {\r\n        const idTokenEntity = new IdTokenEntity();\r\n\r\n        idTokenEntity.credentialType = CredentialType.ID_TOKEN;\r\n        idTokenEntity.homeAccountId = homeAccountId;\r\n        idTokenEntity.environment = environment;\r\n        idTokenEntity.clientId = clientId;\r\n        idTokenEntity.secret = idToken;\r\n        idTokenEntity.realm = tenantId;\r\n        idTokenEntity.oboAssertion = oboAssertion;\r\n\r\n        return idTokenEntity;\r\n    }\r\n\r\n    /**\r\n     * Validates an entity: checks for all expected params\r\n     * @param entity\r\n     */\r\n    static isIdTokenEntity(entity: object): boolean {\r\n\r\n        if (!entity) {\r\n            return false;\r\n        }\r\n\r\n        return (\r\n            entity.hasOwnProperty(\"homeAccountId\") &&\r\n            entity.hasOwnProperty(\"environment\") &&\r\n            entity.hasOwnProperty(\"credentialType\") &&\r\n            entity.hasOwnProperty(\"realm\") &&\r\n            entity.hasOwnProperty(\"clientId\") &&\r\n            entity.hasOwnProperty(\"secret\") &&\r\n            entity[\"credentialType\"] === CredentialType.ID_TOKEN\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}