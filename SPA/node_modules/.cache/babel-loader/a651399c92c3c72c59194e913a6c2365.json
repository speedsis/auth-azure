{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * @module ImplicitMSALAuthenticationProvider\r\n */\n\nimport { InteractionRequiredAuthError } from \"msal\";\n/**\r\n * @class\r\n * Class representing ImplicitMSALAuthenticationProvider\r\n * @extends AuthenticationProvider\r\n */\n\nexport class ImplicitMSALAuthenticationProvider {\n  /**\r\n   * @public\r\n   * @constructor\r\n   * Creates an instance of ImplicitMSALAuthenticationProvider\r\n   * @param {UserAgentApplication} msalApplication - An instance of MSAL UserAgentApplication\r\n   * @param {MSALAuthenticationProviderOptions} options - An instance of MSALAuthenticationProviderOptions\r\n   * @returns An instance of ImplicitMSALAuthenticationProvider\r\n   */\n  constructor(msalApplication, options) {\n    this.options = options;\n    this.msalApplication = msalApplication;\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * To get the access token\r\n   * @param {AuthenticationProviderOptions} authenticationProviderOptions - The authentication provider options object\r\n   * @returns The promise that resolves to an access token\r\n   */\n\n\n  getAccessToken(authenticationProviderOptions) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const options = authenticationProviderOptions;\n      let scopes;\n\n      if (typeof options !== \"undefined\") {\n        scopes = options.scopes;\n      }\n\n      if (typeof scopes === \"undefined\" || scopes.length === 0) {\n        scopes = this.options.scopes;\n      }\n\n      if (scopes.length === 0) {\n        const error = new Error();\n        error.name = \"EmptyScopes\";\n        error.message = \"Scopes cannot be empty, Please provide a scopes\";\n        throw error;\n      }\n\n      if (this.msalApplication.getAccount()) {\n        const tokenRequest = {\n          scopes\n        };\n\n        try {\n          const authResponse = yield this.msalApplication.acquireTokenSilent(tokenRequest);\n          return authResponse.accessToken;\n        } catch (error) {\n          if (error instanceof InteractionRequiredAuthError) {\n            try {\n              const authResponse = yield this.msalApplication.acquireTokenPopup(tokenRequest);\n              return authResponse.accessToken;\n            } catch (error) {\n              throw error;\n            }\n          } else {\n            throw error;\n          }\n        }\n      } else {\n        try {\n          const tokenRequest = {\n            scopes\n          };\n          yield this.msalApplication.loginPopup(tokenRequest);\n          const authResponse = yield this.msalApplication.acquireTokenSilent(tokenRequest);\n          return authResponse.accessToken;\n        } catch (error) {\n          throw error;\n        }\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["../../src/ImplicitMSALAuthenticationProvider.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAEH;;AAEG;;AAEH,SAAiD,4BAAjD,QAA2G,MAA3G;AAMA;;;;AAIG;;AACH,OAAM,MAAO,kCAAP,CAAyC;AAa9C;;;;;;;AAOG;AACH,EAAA,WAAA,CAAmB,eAAnB,EAA0D,OAA1D,EAAoG;AACnG,SAAK,OAAL,GAAe,OAAf;AACA,SAAK,eAAL,GAAuB,eAAvB;AACA;AAED;;;;;;AAMG;;;AACU,EAAA,cAAc,CAAC,6BAAD,EAA8D;;AACxF,YAAM,OAAO,GAAsC,6BAAnD;AACA,UAAI,MAAJ;;AACA,UAAI,OAAO,OAAP,KAAmB,WAAvB,EAAoC;AACnC,QAAA,MAAM,GAAG,OAAO,CAAC,MAAjB;AACA;;AACD,UAAI,OAAO,MAAP,KAAkB,WAAlB,IAAiC,MAAM,CAAC,MAAP,KAAkB,CAAvD,EAA0D;AACzD,QAAA,MAAM,GAAG,KAAK,OAAL,CAAa,MAAtB;AACA;;AACD,UAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;AACxB,cAAM,KAAK,GAAG,IAAI,KAAJ,EAAd;AACA,QAAA,KAAK,CAAC,IAAN,GAAa,aAAb;AACA,QAAA,KAAK,CAAC,OAAN,GAAgB,iDAAhB;AACA,cAAM,KAAN;AACA;;AACD,UAAI,KAAK,eAAL,CAAqB,UAArB,EAAJ,EAAuC;AACtC,cAAM,YAAY,GAA6B;AAC9C,UAAA;AAD8C,SAA/C;;AAGA,YAAI;AACH,gBAAM,YAAY,GAAiB,MAAM,KAAK,eAAL,CAAqB,kBAArB,CAAwC,YAAxC,CAAzC;AACA,iBAAO,YAAY,CAAC,WAApB;AACA,SAHD,CAGE,OAAO,KAAP,EAAc;AACf,cAAI,KAAK,YAAY,4BAArB,EAAmD;AAClD,gBAAI;AACH,oBAAM,YAAY,GAAiB,MAAM,KAAK,eAAL,CAAqB,iBAArB,CAAuC,YAAvC,CAAzC;AACA,qBAAO,YAAY,CAAC,WAApB;AACA,aAHD,CAGE,OAAO,KAAP,EAAc;AACf,oBAAM,KAAN;AACA;AACD,WAPD,MAOO;AACN,kBAAM,KAAN;AACA;AACD;AACD,OAnBD,MAmBO;AACN,YAAI;AACH,gBAAM,YAAY,GAA6B;AAC9C,YAAA;AAD8C,WAA/C;AAGA,gBAAM,KAAK,eAAL,CAAqB,UAArB,CAAgC,YAAhC,CAAN;AACA,gBAAM,YAAY,GAAiB,MAAM,KAAK,eAAL,CAAqB,kBAArB,CAAwC,YAAxC,CAAzC;AACA,iBAAO,YAAY,CAAC,WAApB;AACA,SAPD,CAOE,OAAO,KAAP,EAAc;AACf,gBAAM,KAAN;AACA;AACD;AACD,K;AAAA;;AA/E6C","sourceRoot":"","sourcesContent":["/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * @module ImplicitMSALAuthenticationProvider\r\n */\r\nimport { InteractionRequiredAuthError } from \"msal\";\r\n/**\r\n * @class\r\n * Class representing ImplicitMSALAuthenticationProvider\r\n * @extends AuthenticationProvider\r\n */\r\nexport class ImplicitMSALAuthenticationProvider {\r\n    /**\r\n     * @public\r\n     * @constructor\r\n     * Creates an instance of ImplicitMSALAuthenticationProvider\r\n     * @param {UserAgentApplication} msalApplication - An instance of MSAL UserAgentApplication\r\n     * @param {MSALAuthenticationProviderOptions} options - An instance of MSALAuthenticationProviderOptions\r\n     * @returns An instance of ImplicitMSALAuthenticationProvider\r\n     */\r\n    constructor(msalApplication, options) {\r\n        this.options = options;\r\n        this.msalApplication = msalApplication;\r\n    }\r\n    /**\r\n     * @public\r\n     * @async\r\n     * To get the access token\r\n     * @param {AuthenticationProviderOptions} authenticationProviderOptions - The authentication provider options object\r\n     * @returns The promise that resolves to an access token\r\n     */\r\n    getAccessToken(authenticationProviderOptions) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const options = authenticationProviderOptions;\r\n            let scopes;\r\n            if (typeof options !== \"undefined\") {\r\n                scopes = options.scopes;\r\n            }\r\n            if (typeof scopes === \"undefined\" || scopes.length === 0) {\r\n                scopes = this.options.scopes;\r\n            }\r\n            if (scopes.length === 0) {\r\n                const error = new Error();\r\n                error.name = \"EmptyScopes\";\r\n                error.message = \"Scopes cannot be empty, Please provide a scopes\";\r\n                throw error;\r\n            }\r\n            if (this.msalApplication.getAccount()) {\r\n                const tokenRequest = {\r\n                    scopes,\r\n                };\r\n                try {\r\n                    const authResponse = yield this.msalApplication.acquireTokenSilent(tokenRequest);\r\n                    return authResponse.accessToken;\r\n                }\r\n                catch (error) {\r\n                    if (error instanceof InteractionRequiredAuthError) {\r\n                        try {\r\n                            const authResponse = yield this.msalApplication.acquireTokenPopup(tokenRequest);\r\n                            return authResponse.accessToken;\r\n                        }\r\n                        catch (error) {\r\n                            throw error;\r\n                        }\r\n                    }\r\n                    else {\r\n                        throw error;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                try {\r\n                    const tokenRequest = {\r\n                        scopes,\r\n                    };\r\n                    yield this.msalApplication.loginPopup(tokenRequest);\r\n                    const authResponse = yield this.msalApplication.acquireTokenSilent(tokenRequest);\r\n                    return authResponse.accessToken;\r\n                }\r\n                catch (error) {\r\n                    throw error;\r\n                }\r\n            }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=ImplicitMSALAuthenticationProvider.js.map"]},"metadata":{},"sourceType":"module"}