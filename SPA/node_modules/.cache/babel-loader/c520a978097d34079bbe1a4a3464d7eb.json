{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { Constants as Constants$1, Separators } from '../utils/Constants.js';\nimport { ClientAuthError as ClientAuthError$1 } from '../error/ClientAuthError.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Function to build a client info object from server clientInfo string\r\n * @param rawClientInfo\r\n * @param crypto\r\n */\n\nfunction buildClientInfo(rawClientInfo, crypto) {\n  if (StringUtils$1.isEmpty(rawClientInfo)) {\n    throw ClientAuthError$1.createClientInfoEmptyError();\n  }\n\n  try {\n    var decodedClientInfo = crypto.base64Decode(rawClientInfo);\n    return JSON.parse(decodedClientInfo);\n  } catch (e) {\n    throw ClientAuthError$1.createClientInfoDecodingError(e);\n  }\n}\n/**\r\n * Function to build a client info object from cached homeAccountId string\r\n * @param homeAccountId\r\n */\n\n\nfunction buildClientInfoFromHomeAccountId(homeAccountId) {\n  if (StringUtils$1.isEmpty(homeAccountId)) {\n    throw ClientAuthError$1.createClientInfoDecodingError(\"Home account ID was empty.\");\n  }\n\n  var clientInfoParts = homeAccountId.split(Separators.CLIENT_INFO_SEPARATOR, 2);\n  return {\n    uid: clientInfoParts[0],\n    utid: clientInfoParts.length < 2 ? Constants$1.EMPTY_STRING : clientInfoParts[1]\n  };\n}\n\nexport { buildClientInfo, buildClientInfoFromHomeAccountId };","map":{"version":3,"sources":["../../src/account/ClientInfo.ts"],"names":["StringUtils","ClientAuthError","Constants"],"mappings":";;;;;;AAAA;;;;;AAkBA;;;;;;SAKgB,e,CAAgB,a,EAAuB,M,EAAe;AAClE,MAAIA,aAAW,CAAC,OAAZA,CAAoB,aAApBA,CAAJ,EAAwC;AACpC,UAAMC,iBAAe,CAAC,0BAAhBA,EAAN;AACH;;AAED,MAAI;AACA,QAAM,iBAAiB,GAAW,MAAM,CAAC,YAAP,CAAoB,aAApB,CAAlC;AACA,WAAO,IAAI,CAAC,KAAL,CAAW,iBAAX,CAAP;AACH,GAHD,CAGE,OAAO,CAAP,EAAU;AACR,UAAMA,iBAAe,CAAC,6BAAhBA,CAA8C,CAA9CA,CAAN;AACH;AACJ;AAED;;;;;;SAIgB,gC,CAAiC,a,EAAqB;AAClE,MAAID,aAAW,CAAC,OAAZA,CAAoB,aAApBA,CAAJ,EAAwC;AACpC,UAAMC,iBAAe,CAAC,6BAAhBA,CAA8C,4BAA9CA,CAAN;AACH;;AACD,MAAM,eAAe,GAAa,aAAa,CAAC,KAAd,CAAoB,UAAU,CAAC,qBAA/B,EAAsD,CAAtD,CAAlC;AACA,SAAO;AACH,IAAA,GAAG,EAAE,eAAe,CAAC,CAAD,CADjB;AAEH,IAAA,IAAI,EAAE,eAAe,CAAC,MAAhB,GAAyB,CAAzB,GAA6BC,WAAS,CAAC,YAAvC,GAAsD,eAAe,CAAC,CAAD;AAFxE,GAAP;AAIJ","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ICrypto } from \"../crypto/ICrypto\";\r\nimport { Separators, Constants } from \"../utils/Constants\";\r\n\r\n/**\r\n * Client info object which consists of two IDs. Need to add more info here.\r\n */\r\nexport type ClientInfo = {\r\n    uid: string,\r\n    utid: string\r\n};\r\n\r\n/**\r\n * Function to build a client info object from server clientInfo string\r\n * @param rawClientInfo\r\n * @param crypto\r\n */\r\nexport function buildClientInfo(rawClientInfo: string, crypto: ICrypto): ClientInfo {\r\n    if (StringUtils.isEmpty(rawClientInfo)) {\r\n        throw ClientAuthError.createClientInfoEmptyError();\r\n    }\r\n\r\n    try {\r\n        const decodedClientInfo: string = crypto.base64Decode(rawClientInfo);\r\n        return JSON.parse(decodedClientInfo) as ClientInfo;\r\n    } catch (e) {\r\n        throw ClientAuthError.createClientInfoDecodingError(e);\r\n    }\r\n}\r\n\r\n/**\r\n * Function to build a client info object from cached homeAccountId string\r\n * @param homeAccountId \r\n */\r\nexport function buildClientInfoFromHomeAccountId(homeAccountId: string): ClientInfo {\r\n    if (StringUtils.isEmpty(homeAccountId)) {\r\n        throw ClientAuthError.createClientInfoDecodingError(\"Home account ID was empty.\");\r\n    }\r\n    const clientInfoParts: string[] = homeAccountId.split(Separators.CLIENT_INFO_SEPARATOR, 2);\r\n    return {\r\n        uid: clientInfoParts[0],\r\n        utid: clientInfoParts.length < 2 ? Constants.EMPTY_STRING : clientInfoParts[1]\r\n    };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}