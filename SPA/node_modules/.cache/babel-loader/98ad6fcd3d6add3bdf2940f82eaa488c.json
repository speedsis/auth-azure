{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { ClientAuthError as ClientAuthError$1 } from '../error/ClientAuthError.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\nimport { ClientConfigurationError as ClientConfigurationError$1 } from '../error/ClientConfigurationError.js';\nimport { Authority as Authority$1 } from './Authority.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar AuthorityFactory = function () {\n  function AuthorityFactory() {}\n  /**\r\n   * Create an authority object of the correct type based on the url\r\n   * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n   *\r\n   * Also performs endpoint discovery.\r\n   *\r\n   * @param authorityUri\r\n   * @param networkClient\r\n   * @param protocolMode\r\n   */\n\n\n  AuthorityFactory.createDiscoveredInstance = function (authorityUri, networkClient, cacheManager, authorityOptions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var acquireTokenAuthority, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            acquireTokenAuthority = AuthorityFactory.createInstance(authorityUri, networkClient, cacheManager, authorityOptions);\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , acquireTokenAuthority.resolveEndpointsAsync()];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , acquireTokenAuthority];\n\n          case 3:\n            e_1 = _a.sent();\n            throw ClientAuthError$1.createEndpointDiscoveryIncompleteError(e_1);\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Create an authority object of the correct type based on the url\r\n   * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n   *\r\n   * Does not perform endpoint discovery.\r\n   *\r\n   * @param authorityUrl\r\n   * @param networkInterface\r\n   * @param protocolMode\r\n   */\n\n\n  AuthorityFactory.createInstance = function (authorityUrl, networkInterface, cacheManager, authorityOptions) {\n    // Throw error if authority url is empty\n    if (StringUtils$1.isEmpty(authorityUrl)) {\n      throw ClientConfigurationError$1.createUrlEmptyError();\n    }\n\n    return new Authority$1(authorityUrl, networkInterface, cacheManager, authorityOptions);\n  };\n\n  return AuthorityFactory;\n}();\n\nexport { AuthorityFactory };","map":{"version":3,"sources":["../../src/authority/AuthorityFactory.ts"],"names":["ClientAuthError","StringUtils","ClientConfigurationError","Authority"],"mappings":";;;;;;;;AAAA;;;;;;AAaA,WAAA,gBAAA,GAAA,CA0CC;;;;;;;;;;;;;AA9BgB,EAAA,gBAAA,CAAA,wBAAA,GAAb,UAAsC,YAAtC,EAA4D,aAA5D,EAA2F,YAA3F,EAAwH,gBAAxH,EAA0J;;;;;;AAEhJ,YAAA,qBAAqB,GAAc,gBAAgB,CAAC,cAAjB,CAAgC,YAAhC,EAA8C,aAA9C,EAA6D,YAA7D,EAA2E,gBAA3E,CAAnC;;;;;;AAGF,mBAAA,CAAA;AAAA;AAAA,cAAM,qBAAqB,CAAC,qBAAtB,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAO,qBAAP,CAAA;;;;AAEA,kBAAMA,iBAAe,CAAC,sCAAhBA,CAAuD,GAAvDA,CAAN;;;;;;;;;AAEP,GAVY;;;;;;;;;;;;;AAsBN,EAAA,gBAAA,CAAA,cAAA,GAAP,UAAsB,YAAtB,EAA4C,gBAA5C,EAA8E,YAA9E,EAA2G,gBAA3G,EAA6I;;AAEzI,QAAIC,aAAW,CAAC,OAAZA,CAAoB,YAApBA,CAAJ,EAAuC;AACnC,YAAMC,0BAAwB,CAAC,mBAAzBA,EAAN;AACH;;AAED,WAAO,IAAIC,WAAJ,CAAc,YAAd,EAA4B,gBAA5B,EAA8C,YAA9C,EAA4D,gBAA5D,CAAP;AACH,GAPM;;AAQX,SAAA,gBAAA;AAAC,C","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { Authority } from \"./Authority\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { INetworkModule } from \"../network/INetworkModule\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ClientAuthError } from \"../error/ClientAuthError\";\r\nimport { ICacheManager } from \"../cache/interface/ICacheManager\";\r\nimport { AuthorityOptions } from \"./AuthorityOptions\";\r\n\r\nexport class AuthorityFactory {\r\n\r\n    /**\r\n     * Create an authority object of the correct type based on the url\r\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n     *\r\n     * Also performs endpoint discovery.\r\n     *\r\n     * @param authorityUri\r\n     * @param networkClient\r\n     * @param protocolMode\r\n     */\r\n    static async createDiscoveredInstance(authorityUri: string, networkClient: INetworkModule, cacheManager: ICacheManager, authorityOptions: AuthorityOptions): Promise<Authority> {\r\n        // Initialize authority and perform discovery endpoint check.\r\n        const acquireTokenAuthority: Authority = AuthorityFactory.createInstance(authorityUri, networkClient, cacheManager, authorityOptions);\r\n\r\n        try {\r\n            await acquireTokenAuthority.resolveEndpointsAsync();\r\n            return acquireTokenAuthority;\r\n        } catch (e) {\r\n            throw ClientAuthError.createEndpointDiscoveryIncompleteError(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create an authority object of the correct type based on the url\r\n     * Performs basic authority validation - checks to see if the authority is of a valid type (i.e. aad, b2c, adfs)\r\n     *\r\n     * Does not perform endpoint discovery.\r\n     *\r\n     * @param authorityUrl\r\n     * @param networkInterface\r\n     * @param protocolMode\r\n     */\r\n    static createInstance(authorityUrl: string, networkInterface: INetworkModule, cacheManager: ICacheManager, authorityOptions: AuthorityOptions): Authority {\r\n        // Throw error if authority url is empty\r\n        if (StringUtils.isEmpty(authorityUrl)) {\r\n            throw ClientConfigurationError.createUrlEmptyError();\r\n        }\r\n\r\n        return new Authority(authorityUrl, networkInterface, cacheManager, authorityOptions);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}