{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { StringUtils, Constants } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys, BrowserConstants, InteractionType } from './BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar PopupUtils = function () {\n  function PopupUtils(storageImpl, logger) {\n    this.browserStorage = storageImpl;\n    this.logger = logger; // Properly sets this reference for the unload event.\n\n    this.unloadWindow = this.unloadWindow.bind(this);\n  }\n  /**\r\n   * @hidden\r\n   *\r\n   * Configures popup window for login.\r\n   *\r\n   * @param urlNavigate\r\n   * @param title\r\n   * @param popUpWidth\r\n   * @param popUpHeight\r\n   * @ignore\r\n   * @hidden\r\n   */\n\n\n  PopupUtils.prototype.openPopup = function (urlNavigate, popupName, popup) {\n    try {\n      var popupWindow = void 0; // Popup window passed in, setting url to navigate to\n\n      if (popup) {\n        popupWindow = popup;\n        this.logger.verbosePii(\"Navigating popup window to: \" + urlNavigate);\n        popupWindow.location.assign(urlNavigate);\n      } else if (typeof popup === \"undefined\") {\n        // Popup will be undefined if it was not passed in\n        this.logger.verbosePii(\"Opening popup window to: \" + urlNavigate);\n        popupWindow = PopupUtils.openSizedPopup(urlNavigate, popupName);\n      } // Popup will be null if popups are blocked\n\n\n      if (!popupWindow) {\n        throw BrowserAuthError.createEmptyWindowCreatedError();\n      }\n\n      if (popupWindow.focus) {\n        popupWindow.focus();\n      }\n\n      this.currentWindow = popupWindow;\n      window.addEventListener(\"beforeunload\", this.unloadWindow);\n      return popupWindow;\n    } catch (e) {\n      this.logger.error(\"error opening popup \" + e.message);\n      this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\n      throw BrowserAuthError.createPopupWindowError(e.toString());\n    }\n  };\n\n  PopupUtils.openSizedPopup = function (urlNavigate, popupName) {\n    /**\r\n     * adding winLeft and winTop to account for dual monitor\r\n     * using screenLeft and screenTop for IE8 and earlier\r\n     */\n    var winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n    var winTop = window.screenTop ? window.screenTop : window.screenY;\n    /**\r\n     * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n     * using document.documentElement.clientWidth for IE8 and earlier\r\n     */\n\n    var width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n    var height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n    var left = Math.max(0, width / 2 - BrowserConstants.POPUP_WIDTH / 2 + winLeft);\n    var top = Math.max(0, height / 2 - BrowserConstants.POPUP_HEIGHT / 2 + winTop);\n    return window.open(urlNavigate, popupName, \"width=\" + BrowserConstants.POPUP_WIDTH + \", height=\" + BrowserConstants.POPUP_HEIGHT + \", top=\" + top + \", left=\" + left + \", scrollbars=yes\");\n  };\n  /**\r\n   * Event callback to unload main window.\r\n   */\n\n\n  PopupUtils.prototype.unloadWindow = function (e) {\n    this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\n\n    if (this.currentWindow) {\n      this.currentWindow.close();\n    } // Guarantees browser unload will happen, so no other errors will be thrown.\n\n\n    e.preventDefault();\n  };\n  /**\r\n   * Closes popup, removes any state vars created during popup calls.\r\n   * @param popupWindow\r\n   */\n\n\n  PopupUtils.prototype.cleanPopup = function (popupWindow) {\n    if (popupWindow) {\n      // Close window.\n      popupWindow.close();\n    } // Remove window unload function\n\n\n    window.removeEventListener(\"beforeunload\", this.unloadWindow); // Interaction is completed - remove interaction status.\n\n    this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\n  };\n  /**\r\n   * Monitors a window until it loads a url with the same origin.\r\n   * @param popupWindow - window that is being monitored\r\n   */\n\n\n  PopupUtils.prototype.monitorPopupForSameOrigin = function (popupWindow) {\n    var _this = this;\n\n    return new Promise(function (resolve, reject) {\n      var intervalId = setInterval(function () {\n        if (popupWindow.closed) {\n          // Window is closed\n          _this.cleanPopup();\n\n          clearInterval(intervalId);\n          reject(BrowserAuthError.createUserCancelledError());\n          return;\n        }\n\n        var href = Constants.EMPTY_STRING;\n\n        try {\n          /*\r\n           * Will throw if cross origin,\r\n           * which should be caught and ignored\r\n           * since we need the interval to keep running while on STS UI.\r\n           */\n          href = popupWindow.location.href;\n        } catch (e) {} // Don't process blank pages or cross domain\n\n\n        if (StringUtils.isEmpty(href) || href === \"about:blank\") {\n          return;\n        }\n\n        clearInterval(intervalId);\n        resolve();\n      }, BrowserConstants.POLL_INTERVAL_MS);\n    });\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request\r\n   * @param clientId\r\n   * @param request\r\n   */\n\n\n  PopupUtils.generatePopupName = function (clientId, request) {\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + clientId + \".\" + request.scopes.join(\"-\") + \".\" + request.authority + \".\" + request.correlationId;\n  };\n  /**\r\n   * Generates the name for the popup based on the client id and request for logouts\r\n   * @param clientId\r\n   * @param request\r\n   */\n\n\n  PopupUtils.generateLogoutPopupName = function (clientId, request) {\n    var homeAccountId = request.account && request.account.homeAccountId;\n    return BrowserConstants.POPUP_NAME_PREFIX + \".\" + clientId + \".\" + homeAccountId + \".\" + request.correlationId;\n  };\n\n  return PopupUtils;\n}();\n\nexport { PopupUtils };","map":{"version":3,"sources":["../../src/utils/PopupUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { CommonEndSessionRequest, Constants, Logger, StringUtils } from \"@azure/msal-common\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { AuthorizationUrlRequest } from \"../request/AuthorizationUrlRequest\";\r\nimport { BrowserConstants, InteractionType, TemporaryCacheKeys } from \"./BrowserConstants\";\r\n\r\nexport class PopupUtils {\r\n    private browserStorage: BrowserCacheManager;\r\n    private logger: Logger;\r\n    private currentWindow: Window|undefined;\r\n\r\n    constructor(storageImpl: BrowserCacheManager, logger: Logger) {\r\n        this.browserStorage = storageImpl;\r\n        this.logger = logger;\r\n\r\n        // Properly sets this reference for the unload event.\r\n        this.unloadWindow = this.unloadWindow.bind(this);\r\n    }\r\n\r\n    /**\r\n     * @hidden\r\n     *\r\n     * Configures popup window for login.\r\n     *\r\n     * @param urlNavigate\r\n     * @param title\r\n     * @param popUpWidth\r\n     * @param popUpHeight\r\n     * @ignore\r\n     * @hidden\r\n     */\r\n    openPopup(urlNavigate: string, popupName: string, popup?: Window|null): Window {\r\n        try {\r\n            let popupWindow;\r\n            // Popup window passed in, setting url to navigate to\r\n            if (popup) {\r\n                popupWindow = popup;\r\n                this.logger.verbosePii(`Navigating popup window to: ${urlNavigate}`);\r\n                popupWindow.location.assign(urlNavigate);\r\n            } else if (typeof popup === \"undefined\") {\r\n                // Popup will be undefined if it was not passed in\r\n                this.logger.verbosePii(`Opening popup window to: ${urlNavigate}`);\r\n                popupWindow = PopupUtils.openSizedPopup(urlNavigate, popupName);\r\n            }\r\n\r\n            // Popup will be null if popups are blocked\r\n            if (!popupWindow) {\r\n                throw BrowserAuthError.createEmptyWindowCreatedError();\r\n            }\r\n            if (popupWindow.focus) {\r\n                popupWindow.focus();\r\n            }\r\n            this.currentWindow = popupWindow;\r\n            window.addEventListener(\"beforeunload\", this.unloadWindow);\r\n\r\n            return popupWindow;\r\n        } catch (e) {\r\n            this.logger.error(\"error opening popup \" + e.message);\r\n            this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\r\n            throw BrowserAuthError.createPopupWindowError(e.toString());\r\n        }\r\n    }\r\n\r\n    static openSizedPopup(urlNavigate: string, popupName: string): Window|null {\r\n        /**\r\n         * adding winLeft and winTop to account for dual monitor\r\n         * using screenLeft and screenTop for IE8 and earlier\r\n         */\r\n        const winLeft = window.screenLeft ? window.screenLeft : window.screenX;\r\n        const winTop = window.screenTop ? window.screenTop : window.screenY;\r\n        /**\r\n         * window.innerWidth displays browser window\"s height and width excluding toolbars\r\n         * using document.documentElement.clientWidth for IE8 and earlier\r\n         */\r\n        const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n        const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\r\n        const left = Math.max(0, ((width / 2) - (BrowserConstants.POPUP_WIDTH / 2)) + winLeft);\r\n        const top = Math.max(0, ((height / 2) - (BrowserConstants.POPUP_HEIGHT / 2)) + winTop);\r\n\r\n        return window.open(urlNavigate, popupName, `width=${BrowserConstants.POPUP_WIDTH}, height=${BrowserConstants.POPUP_HEIGHT}, top=${top}, left=${left}, scrollbars=yes`);\r\n    }\r\n\r\n    /**\r\n     * Event callback to unload main window.\r\n     */\r\n    unloadWindow(e: Event): void {\r\n        this.browserStorage.cleanRequestByInteractionType(InteractionType.Popup);\r\n        if (this.currentWindow) {\r\n            this.currentWindow.close();\r\n        }\r\n        // Guarantees browser unload will happen, so no other errors will be thrown.\r\n        e.preventDefault();\r\n    }\r\n\r\n    /**\r\n     * Closes popup, removes any state vars created during popup calls.\r\n     * @param popupWindow\r\n     */\r\n    cleanPopup(popupWindow?: Window): void {\r\n        if (popupWindow) {\r\n            // Close window.\r\n            popupWindow.close();\r\n        }\r\n        // Remove window unload function\r\n        window.removeEventListener(\"beforeunload\", this.unloadWindow);\r\n\r\n        // Interaction is completed - remove interaction status.\r\n        this.browserStorage.removeItem(this.browserStorage.generateCacheKey(TemporaryCacheKeys.INTERACTION_STATUS_KEY));\r\n    }\r\n\r\n    /**\r\n     * Monitors a window until it loads a url with the same origin.\r\n     * @param popupWindow - window that is being monitored\r\n     */\r\n    monitorPopupForSameOrigin(popupWindow: Window): Promise<void> {\r\n        return new Promise((resolve, reject) => {\r\n            const intervalId = setInterval(() => {\r\n                if (popupWindow.closed) {\r\n                    // Window is closed\r\n                    this.cleanPopup();\r\n                    clearInterval(intervalId);\r\n                    reject(BrowserAuthError.createUserCancelledError());\r\n                    return;\r\n                }\r\n\r\n                let href: string = Constants.EMPTY_STRING;\r\n                try {\r\n                    /*\r\n                     * Will throw if cross origin,\r\n                     * which should be caught and ignored\r\n                     * since we need the interval to keep running while on STS UI.\r\n                     */\r\n                    href = popupWindow.location.href;\r\n                } catch (e) {}\r\n\r\n                // Don't process blank pages or cross domain\r\n                if (StringUtils.isEmpty(href) || href === \"about:blank\") {\r\n                    return;\r\n                }\r\n\r\n                clearInterval(intervalId);\r\n                resolve();\r\n            }, BrowserConstants.POLL_INTERVAL_MS);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generates the name for the popup based on the client id and request\r\n     * @param clientId\r\n     * @param request\r\n     */\r\n    static generatePopupName(clientId: string, request: AuthorizationUrlRequest): string {\r\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${clientId}.${request.scopes.join(\"-\")}.${request.authority}.${request.correlationId}`;\r\n    }\r\n\r\n    /**\r\n     * Generates the name for the popup based on the client id and request for logouts\r\n     * @param clientId \r\n     * @param request \r\n     */\r\n    static generateLogoutPopupName(clientId: string, request: CommonEndSessionRequest): string {\r\n        const homeAccountId = request.account && request.account.homeAccountId;\r\n        return `${BrowserConstants.POPUP_NAME_PREFIX}.${clientId}.${homeAccountId}.${request.correlationId}`;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}