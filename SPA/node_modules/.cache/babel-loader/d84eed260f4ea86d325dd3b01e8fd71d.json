{"ast":null,"code":"/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\nimport { InteractionRequiredAuthError, InteractionType } from \"@azure/msal-browser\";\nimport { Client } from '@microsoft/microsoft-graph-client';\nimport { msalInstance } from \"./index\";\n/**\n * The code below demonstrates how you can use MSAL as a custom authentication provider for the Microsoft Graph JavaScript SDK. \n * You do NOT need to implement a custom provider. Microsoft Graph JavaScript SDK v3.0 (preview) offers AuthCodeMSALBrowserAuthenticationProvider \n * which handles token acquisition and renewal for you automatically. For more information on how to use it, visit: \n * https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/AuthCodeMSALBrowserAuthenticationProvider.md\n */\n\n/**\n * Returns a graph client object with the provided token acquisition options\n * @param {Object} providerOptions: providerOptions: object containing user account, required scopes and interaction type\n */\n\nexport const getGraphClient = providerOptions => {\n  /**\n   * Pass the instance as authProvider in ClientOptions to instantiate the Client which will create and set the default middleware chain.\n   * For more information, visit: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/CreatingClientInstance.md\n   */\n  let clientOptions = {\n    authProvider: new MsalAuthenticationProvider(providerOptions)\n  };\n  const graphClient = Client.initWithMiddleware(clientOptions);\n  return graphClient;\n};\n/**\n * This class implements the IAuthenticationProvider interface, which allows a custom auth provider to be\n * used with the Graph client. See: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/src/IAuthenticationProvider.ts\n */\n\nclass MsalAuthenticationProvider {\n  // user account object to be used when attempting silent token acquisition\n  // array of scopes required for this resource endpoint\n  // type of interaction to fallback to when silent token acquisition fails\n  constructor(providerOptions) {\n    this.account = providerOptions.account;\n    this.scopes = providerOptions.scopes;\n    this.interactionType = providerOptions.interactionType;\n  }\n  /**\n   * This method will get called before every request to the ms graph server\n   * This should return a Promise that resolves to an accessToken (in case of success) or rejects with error (in case of failure)\n   * Basically this method will contain the implementation for getting and refreshing accessTokens\n   */\n\n\n  getAccessToken() {\n    return new Promise(async (resolve, reject) => {\n      let response;\n\n      try {\n        response = await msalInstance.acquireTokenSilent({\n          account: this.account,\n          scopes: this.scopes\n        });\n\n        if (response.accessToken) {\n          resolve(response.accessToken);\n        } else {\n          reject(Error('Failed to acquire an access token'));\n        }\n      } catch (error) {\n        // in case if silent token acquisition fails, fallback to an interactive method\n        if (error instanceof InteractionRequiredAuthError) {\n          switch (this.interactionType) {\n            case InteractionType.Popup:\n              response = await msalInstance.acquireTokenPopup({\n                scopes: this.scopes\n              });\n\n              if (response.accessToken) {\n                resolve(response.accessToken);\n              } else {\n                reject(Error('Failed to acquire an access token'));\n              }\n\n              break;\n\n            case InteractionType.Redirect:\n              /**\n               * This will cause the app to leave the current page and redirect to the consent screen.\n               * Once consent is provided, the app will return back to the current page and then the \n               * silent token acquisition will succeed. \n               */\n              msalInstance.acquireTokenRedirect({\n                scopes: this.scopes\n              });\n              break;\n\n            default:\n              break;\n          }\n        }\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/speedsis/Downloads/ms-identity-javascript-react-tutorial-main/2-Authorization-I/1-call-graph/SPA/src/graph.js"],"names":["InteractionRequiredAuthError","InteractionType","Client","msalInstance","getGraphClient","providerOptions","clientOptions","authProvider","MsalAuthenticationProvider","graphClient","initWithMiddleware","constructor","account","scopes","interactionType","getAccessToken","Promise","resolve","reject","response","acquireTokenSilent","accessToken","Error","error","Popup","acquireTokenPopup","Redirect","acquireTokenRedirect"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAASA,4BAAT,EAAuCC,eAAvC,QAA8D,qBAA9D;AACA,SAASC,MAAT,QAAuB,mCAAvB;AAEA,SAASC,YAAT,QAA6B,SAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAIC,eAAD,IAAqB;AAE/C;AACJ;AACA;AACA;AACI,MAAIC,aAAa,GAAG;AAChBC,IAAAA,YAAY,EAAE,IAAIC,0BAAJ,CAA+BH,eAA/B;AADE,GAApB;AAIA,QAAMI,WAAW,GAAGP,MAAM,CAACQ,kBAAP,CAA0BJ,aAA1B,CAApB;AAEA,SAAOG,WAAP;AACH,CAbM;AAeP;AACA;AACA;AACA;;AACA,MAAMD,0BAAN,CAAiC;AAEpB;AACD;AACS;AAEjBG,EAAAA,WAAW,CAACN,eAAD,EAAkB;AACzB,SAAKO,OAAL,GAAeP,eAAe,CAACO,OAA/B;AACA,SAAKC,MAAL,GAAcR,eAAe,CAACQ,MAA9B;AACA,SAAKC,eAAL,GAAuBT,eAAe,CAACS,eAAvC;AACH;AAED;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,cAAc,GAAG;AACb,WAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC1C,UAAIC,QAAJ;;AAEA,UAAI;AACAA,QAAAA,QAAQ,GAAG,MAAMhB,YAAY,CAACiB,kBAAb,CAAgC;AAC7CR,UAAAA,OAAO,EAAE,KAAKA,OAD+B;AAE7CC,UAAAA,MAAM,EAAE,KAAKA;AAFgC,SAAhC,CAAjB;;AAKA,YAAIM,QAAQ,CAACE,WAAb,EAA0B;AACtBJ,UAAAA,OAAO,CAACE,QAAQ,CAACE,WAAV,CAAP;AACH,SAFD,MAEO;AACHH,UAAAA,MAAM,CAACI,KAAK,CAAC,mCAAD,CAAN,CAAN;AACH;AACJ,OAXD,CAWE,OAAOC,KAAP,EAAc;AACZ;AACA,YAAIA,KAAK,YAAYvB,4BAArB,EAAmD;AAC/C,kBAAQ,KAAKc,eAAb;AACI,iBAAKb,eAAe,CAACuB,KAArB;AAEIL,cAAAA,QAAQ,GAAG,MAAMhB,YAAY,CAACsB,iBAAb,CAA+B;AAC5CZ,gBAAAA,MAAM,EAAE,KAAKA;AAD+B,eAA/B,CAAjB;;AAIA,kBAAIM,QAAQ,CAACE,WAAb,EAA0B;AACtBJ,gBAAAA,OAAO,CAACE,QAAQ,CAACE,WAAV,CAAP;AACH,eAFD,MAEO;AACHH,gBAAAA,MAAM,CAACI,KAAK,CAAC,mCAAD,CAAN,CAAN;AACH;;AACD;;AAEJ,iBAAKrB,eAAe,CAACyB,QAArB;AACI;AAC5B;AACA;AACA;AACA;AAC4BvB,cAAAA,YAAY,CAACwB,oBAAb,CAAkC;AAC9Bd,gBAAAA,MAAM,EAAE,KAAKA;AADiB,eAAlC;AAGA;;AAEJ;AACI;AA1BR;AA4BH;AACJ;AACJ,KA/CM,CAAP;AAgDH;;AAlE4B","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { InteractionRequiredAuthError, InteractionType } from \"@azure/msal-browser\";\nimport { Client } from '@microsoft/microsoft-graph-client';\n\nimport { msalInstance } from \"./index\";\n\n/**\n * The code below demonstrates how you can use MSAL as a custom authentication provider for the Microsoft Graph JavaScript SDK. \n * You do NOT need to implement a custom provider. Microsoft Graph JavaScript SDK v3.0 (preview) offers AuthCodeMSALBrowserAuthenticationProvider \n * which handles token acquisition and renewal for you automatically. For more information on how to use it, visit: \n * https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/AuthCodeMSALBrowserAuthenticationProvider.md\n */\n\n/**\n * Returns a graph client object with the provided token acquisition options\n * @param {Object} providerOptions: providerOptions: object containing user account, required scopes and interaction type\n */\nexport const getGraphClient = (providerOptions) => {\n\n    /**\n     * Pass the instance as authProvider in ClientOptions to instantiate the Client which will create and set the default middleware chain.\n     * For more information, visit: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/docs/CreatingClientInstance.md\n     */\n    let clientOptions = {\n        authProvider: new MsalAuthenticationProvider(providerOptions),\n    };\n\n    const graphClient = Client.initWithMiddleware(clientOptions);\n\n    return graphClient;\n}\n\n/**\n * This class implements the IAuthenticationProvider interface, which allows a custom auth provider to be\n * used with the Graph client. See: https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/dev/src/IAuthenticationProvider.ts\n */\nclass MsalAuthenticationProvider {\n\n    account; // user account object to be used when attempting silent token acquisition\n    scopes; // array of scopes required for this resource endpoint\n    interactionType; // type of interaction to fallback to when silent token acquisition fails\n\n    constructor(providerOptions) {\n        this.account = providerOptions.account;\n        this.scopes = providerOptions.scopes;\n        this.interactionType = providerOptions.interactionType;\n    }\n\n    /**\n     * This method will get called before every request to the ms graph server\n     * This should return a Promise that resolves to an accessToken (in case of success) or rejects with error (in case of failure)\n     * Basically this method will contain the implementation for getting and refreshing accessTokens\n     */\n    getAccessToken() {\n        return new Promise(async (resolve, reject) => {\n            let response;\n\n            try {\n                response = await msalInstance.acquireTokenSilent({\n                    account: this.account,\n                    scopes: this.scopes\n                });\n\n                if (response.accessToken) {\n                    resolve(response.accessToken);\n                } else {\n                    reject(Error('Failed to acquire an access token'));\n                }\n            } catch (error) {\n                // in case if silent token acquisition fails, fallback to an interactive method\n                if (error instanceof InteractionRequiredAuthError) {\n                    switch (this.interactionType) {\n                        case InteractionType.Popup:\n\n                            response = await msalInstance.acquireTokenPopup({\n                                scopes: this.scopes\n                            });\n\n                            if (response.accessToken) {\n                                resolve(response.accessToken);\n                            } else {\n                                reject(Error('Failed to acquire an access token'));\n                            }\n                            break;\n\n                        case InteractionType.Redirect:\n                            /**\n                             * This will cause the app to leave the current page and redirect to the consent screen.\n                             * Once consent is provided, the app will return back to the current page and then the \n                             * silent token acquisition will succeed. \n                             */\n                            msalInstance.acquireTokenRedirect({\n                                scopes: this.scopes\n                            });\n                            break;\n\n                        default:\n                            break;\n                    }\n                }\n            }\n        });\n    }\n}"]},"metadata":{},"sourceType":"module"}