{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Utility class which exposes functions for managing date and time operations.\r\n */\n\nvar TimeUtils = function () {\n  function TimeUtils() {}\n  /**\r\n   * return the current time in Unix time (seconds).\r\n   */\n\n\n  TimeUtils.nowSeconds = function () {\n    // Date.getTime() returns in milliseconds.\n    return Math.round(new Date().getTime() / 1000.0);\n  };\n  /**\r\n   * check if a token is expired based on given UTC time in seconds.\r\n   * @param expiresOn\r\n   */\n\n\n  TimeUtils.isTokenExpired = function (expiresOn, offset) {\n    // check for access token expiry\n    var expirationSec = Number(expiresOn) || 0;\n    var offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset; // If current time + offset is greater than token expiration time, then token is expired.\n\n    return offsetCurrentTimeSec > expirationSec;\n  };\n  /**\r\n   * If the current time is earlier than the time that a token was cached at, we must discard the token\r\n   * i.e. The system clock was turned back after acquiring the cached token\r\n   * @param cachedAt\r\n   * @param offset\r\n   */\n\n\n  TimeUtils.wasClockTurnedBack = function (cachedAt) {\n    var cachedAtSec = Number(cachedAt);\n    return cachedAtSec > TimeUtils.nowSeconds();\n  };\n  /**\r\n   * Waits for t number of milliseconds\r\n   * @param t number\r\n   * @param value T\r\n   */\n\n\n  TimeUtils.delay = function (t, value) {\n    return new Promise(function (resolve) {\n      return setTimeout(function () {\n        return resolve(value);\n      }, t);\n    });\n  };\n\n  return TimeUtils;\n}();\n\nexport { TimeUtils };","map":{"version":3,"sources":["../../src/utils/TimeUtils.ts"],"names":[],"mappings":";;AAAA;;;;;AAKA;;;;;AAGA,WAAA,SAAA,GAAA,CA2CC;;;;;;AAtCU,EAAA,SAAA,CAAA,UAAA,GAAP,YAAA;;AAEI,WAAO,IAAI,CAAC,KAAL,CAAW,IAAI,IAAJ,GAAW,OAAX,KAAuB,MAAlC,CAAP;AACH,GAHM;;;;;;;AASA,EAAA,SAAA,CAAA,cAAA,GAAP,UAAsB,SAAtB,EAAyC,MAAzC,EAAuD;;AAEnD,QAAM,aAAa,GAAG,MAAM,CAAC,SAAD,CAAN,IAAqB,CAA3C;AACA,QAAM,oBAAoB,GAAG,SAAS,CAAC,UAAV,KAAyB,MAAtD,CAHmD,C;;AAMnD,WAAQ,oBAAoB,GAAG,aAA/B;AACH,GAPM;;;;;;;;;AAeA,EAAA,SAAA,CAAA,kBAAA,GAAP,UAA0B,QAA1B,EAA0C;AACtC,QAAM,WAAW,GAAG,MAAM,CAAC,QAAD,CAA1B;AAEA,WAAO,WAAW,GAAG,SAAS,CAAC,UAAV,EAArB;AACH,GAJM;;;;;;;;AAWA,EAAA,SAAA,CAAA,KAAA,GAAP,UAAgB,CAAhB,EAA2B,KAA3B,EAAoC;AAChC,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAQ;AAAK,aAAA,UAAU,CAAC,YAAA;AAAM,eAAA,OAAO,CAAC,KAAD,CAAP;AAAc,OAArB,EAAuB,CAAvB,CAAV;AAAmC,KAA5D,CAAP;AACH,GAFM;;AAGX,SAAA,SAAA;AAAC,C","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * Utility class which exposes functions for managing date and time operations.\r\n */\r\nexport class TimeUtils {\r\n\r\n    /**\r\n     * return the current time in Unix time (seconds).\r\n     */\r\n    static nowSeconds(): number {\r\n        // Date.getTime() returns in milliseconds.\r\n        return Math.round(new Date().getTime() / 1000.0);\r\n    }\r\n    \r\n    /**\r\n     * check if a token is expired based on given UTC time in seconds.\r\n     * @param expiresOn\r\n     */\r\n    static isTokenExpired(expiresOn: string, offset: number): boolean {\r\n        // check for access token expiry\r\n        const expirationSec = Number(expiresOn) || 0;\r\n        const offsetCurrentTimeSec = TimeUtils.nowSeconds() + offset;\r\n\r\n        // If current time + offset is greater than token expiration time, then token is expired.\r\n        return (offsetCurrentTimeSec > expirationSec);\r\n    }\r\n\r\n    /**\r\n     * If the current time is earlier than the time that a token was cached at, we must discard the token\r\n     * i.e. The system clock was turned back after acquiring the cached token\r\n     * @param cachedAt \r\n     * @param offset \r\n     */\r\n    static wasClockTurnedBack(cachedAt: string): boolean {\r\n        const cachedAtSec = Number(cachedAt);\r\n\r\n        return cachedAtSec > TimeUtils.nowSeconds();\r\n    }\r\n\r\n    /**\r\n     * Waits for t number of milliseconds\r\n     * @param t number\r\n     * @param value T\r\n     */\r\n    static delay<T>(t: number, value?: T): Promise<T | void> {\r\n        return new Promise((resolve) => setTimeout(() => resolve(value), t));\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}