{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nimport { MiddlewareControl } from \"../MiddlewareControl\";\n/**\r\n * @enum\r\n * @property {number} NONE - The hexadecimal flag value for nothing enabled\r\n * @property {number} REDIRECT_HANDLER_ENABLED - The hexadecimal flag value for redirect handler enabled\r\n * @property {number} RETRY_HANDLER_ENABLED - The hexadecimal flag value for retry handler enabled\r\n * @property {number} AUTHENTICATION_HANDLER_ENABLED - The hexadecimal flag value for the authentication handler enabled\r\n */\n\nexport var FeatureUsageFlag;\n\n(function (FeatureUsageFlag) {\n  FeatureUsageFlag[FeatureUsageFlag[\"NONE\"] = 0] = \"NONE\";\n  FeatureUsageFlag[FeatureUsageFlag[\"REDIRECT_HANDLER_ENABLED\"] = 1] = \"REDIRECT_HANDLER_ENABLED\";\n  FeatureUsageFlag[FeatureUsageFlag[\"RETRY_HANDLER_ENABLED\"] = 2] = \"RETRY_HANDLER_ENABLED\";\n  FeatureUsageFlag[FeatureUsageFlag[\"AUTHENTICATION_HANDLER_ENABLED\"] = 4] = \"AUTHENTICATION_HANDLER_ENABLED\";\n})(FeatureUsageFlag || (FeatureUsageFlag = {}));\n/**\r\n * @class\r\n * @implements MiddlewareOptions\r\n * Class for TelemetryHandlerOptions\r\n */\n\n\nexport class TelemetryHandlerOptions {\n  constructor() {\n    /**\r\n     * @private\r\n     * A member to hold the OR of feature usage flags\r\n     */\n    this.featureUsage = FeatureUsageFlag.NONE;\n  }\n  /**\r\n   * @public\r\n   * @static\r\n   * To update the feature usage in the context object\r\n   * @param {Context} context - The request context object containing middleware options\r\n   * @param {FeatureUsageFlag} flag - The flag value\r\n   * @returns nothing\r\n   */\n\n\n  static updateFeatureUsageFlag(context, flag) {\n    let options;\n\n    if (context.middlewareControl instanceof MiddlewareControl) {\n      options = context.middlewareControl.getMiddlewareOptions(TelemetryHandlerOptions);\n    } else {\n      context.middlewareControl = new MiddlewareControl();\n    }\n\n    if (typeof options === \"undefined\") {\n      options = new TelemetryHandlerOptions();\n      context.middlewareControl.setMiddlewareOptions(TelemetryHandlerOptions, options);\n    }\n\n    options.setFeatureUsage(flag);\n  }\n  /**\r\n   * @private\r\n   * To set the feature usage flag\r\n   * @param {FeatureUsageFlag} flag - The flag value\r\n   * @returns nothing\r\n   */\n\n\n  setFeatureUsage(flag) {\n    /* tslint:disable: no-bitwise */\n    this.featureUsage = this.featureUsage | flag;\n    /* tslint:enable: no-bitwise */\n  }\n  /**\r\n   * @public\r\n   * To get the feature usage\r\n   * @returns A feature usage flag as hexadecimal string\r\n   */\n\n\n  getFeatureUsage() {\n    return this.featureUsage.toString(16);\n  }\n\n}","map":{"version":3,"sources":["../../../../src/middleware/options/TelemetryHandlerOptions.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AAOH,SAAS,iBAAT,QAAkC,sBAAlC;AAIA;;;;;;AAMG;;AACH,OAAA,IAAY,gBAAZ;;AAAA,CAAA,UAAY,gBAAZ,EAA4B;AAC3B,EAAA,gBAAA,CAAA,gBAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA;AACA,EAAA,gBAAA,CAAA,gBAAA,CAAA,0BAAA,CAAA,GAAA,CAAA,CAAA,GAAA,0BAAA;AACA,EAAA,gBAAA,CAAA,gBAAA,CAAA,uBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,uBAAA;AACA,EAAA,gBAAA,CAAA,gBAAA,CAAA,gCAAA,CAAA,GAAA,CAAA,CAAA,GAAA,gCAAA;AACA,CALD,EAAY,gBAAgB,KAAhB,gBAAgB,GAAA,EAAA,CAA5B;AAOA;;;;AAIG;;;AAEH,OAAM,MAAO,uBAAP,CAA8B;AAApC,EAAA,WAAA,GAAA;AACC;;;AAGG;AACK,SAAA,YAAA,GAAiC,gBAAgB,CAAC,IAAlD;AA4CR;AA1CA;;;;;;;AAOG;;;AACiC,SAAtB,sBAAsB,CAAC,OAAD,EAAmB,IAAnB,EAAyC;AAC5E,QAAI,OAAJ;;AACA,QAAI,OAAO,CAAC,iBAAR,YAAqC,iBAAzC,EAA4D;AAC3D,MAAA,OAAO,GAAG,OAAO,CAAC,iBAAR,CAA0B,oBAA1B,CAA+C,uBAA/C,CAAV;AACA,KAFD,MAEO;AACN,MAAA,OAAO,CAAC,iBAAR,GAA4B,IAAI,iBAAJ,EAA5B;AACA;;AACD,QAAI,OAAO,OAAP,KAAmB,WAAvB,EAAoC;AACnC,MAAA,OAAO,GAAG,IAAI,uBAAJ,EAAV;AACA,MAAA,OAAO,CAAC,iBAAR,CAA0B,oBAA1B,CAA+C,uBAA/C,EAAwE,OAAxE;AACA;;AACD,IAAA,OAAO,CAAC,eAAR,CAAwB,IAAxB;AACA;AAED;;;;;AAKG;;;AACK,EAAA,eAAe,CAAC,IAAD,EAAuB;AAC7C;AACA,SAAK,YAAL,GAAoB,KAAK,YAAL,GAAoB,IAAxC;AACA;AACA;AAED;;;;AAIG;;;AACI,EAAA,eAAe,GAAA;AACrB,WAAO,KAAK,YAAL,CAAkB,QAAlB,CAA2B,EAA3B,CAAP;AACA;;AAhDkC","sourceRoot":"","sourcesContent":["/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\r\nimport { MiddlewareControl } from \"../MiddlewareControl\";\r\n/**\r\n * @enum\r\n * @property {number} NONE - The hexadecimal flag value for nothing enabled\r\n * @property {number} REDIRECT_HANDLER_ENABLED - The hexadecimal flag value for redirect handler enabled\r\n * @property {number} RETRY_HANDLER_ENABLED - The hexadecimal flag value for retry handler enabled\r\n * @property {number} AUTHENTICATION_HANDLER_ENABLED - The hexadecimal flag value for the authentication handler enabled\r\n */\r\nexport var FeatureUsageFlag;\r\n(function (FeatureUsageFlag) {\r\n    FeatureUsageFlag[FeatureUsageFlag[\"NONE\"] = 0] = \"NONE\";\r\n    FeatureUsageFlag[FeatureUsageFlag[\"REDIRECT_HANDLER_ENABLED\"] = 1] = \"REDIRECT_HANDLER_ENABLED\";\r\n    FeatureUsageFlag[FeatureUsageFlag[\"RETRY_HANDLER_ENABLED\"] = 2] = \"RETRY_HANDLER_ENABLED\";\r\n    FeatureUsageFlag[FeatureUsageFlag[\"AUTHENTICATION_HANDLER_ENABLED\"] = 4] = \"AUTHENTICATION_HANDLER_ENABLED\";\r\n})(FeatureUsageFlag || (FeatureUsageFlag = {}));\r\n/**\r\n * @class\r\n * @implements MiddlewareOptions\r\n * Class for TelemetryHandlerOptions\r\n */\r\nexport class TelemetryHandlerOptions {\r\n    constructor() {\r\n        /**\r\n         * @private\r\n         * A member to hold the OR of feature usage flags\r\n         */\r\n        this.featureUsage = FeatureUsageFlag.NONE;\r\n    }\r\n    /**\r\n     * @public\r\n     * @static\r\n     * To update the feature usage in the context object\r\n     * @param {Context} context - The request context object containing middleware options\r\n     * @param {FeatureUsageFlag} flag - The flag value\r\n     * @returns nothing\r\n     */\r\n    static updateFeatureUsageFlag(context, flag) {\r\n        let options;\r\n        if (context.middlewareControl instanceof MiddlewareControl) {\r\n            options = context.middlewareControl.getMiddlewareOptions(TelemetryHandlerOptions);\r\n        }\r\n        else {\r\n            context.middlewareControl = new MiddlewareControl();\r\n        }\r\n        if (typeof options === \"undefined\") {\r\n            options = new TelemetryHandlerOptions();\r\n            context.middlewareControl.setMiddlewareOptions(TelemetryHandlerOptions, options);\r\n        }\r\n        options.setFeatureUsage(flag);\r\n    }\r\n    /**\r\n     * @private\r\n     * To set the feature usage flag\r\n     * @param {FeatureUsageFlag} flag - The flag value\r\n     * @returns nothing\r\n     */\r\n    setFeatureUsage(flag) {\r\n        /* tslint:disable: no-bitwise */\r\n        this.featureUsage = this.featureUsage | flag;\r\n        /* tslint:enable: no-bitwise */\r\n    }\r\n    /**\r\n     * @public\r\n     * To get the feature usage\r\n     * @returns A feature usage flag as hexadecimal string\r\n     */\r\n    getFeatureUsage() {\r\n        return this.featureUsage.toString(16);\r\n    }\r\n}\r\n//# sourceMappingURL=TelemetryHandlerOptions.js.map"]},"metadata":{},"sourceType":"module"}