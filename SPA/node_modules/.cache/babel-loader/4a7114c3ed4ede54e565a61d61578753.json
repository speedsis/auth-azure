{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nimport * as tslib_1 from \"tslib\";\nimport { MiddlewareControl } from \"./MiddlewareControl\";\nimport { appendRequestHeader } from \"./MiddlewareUtil\";\nimport { AuthenticationHandlerOptions } from \"./options/AuthenticationHandlerOptions\";\nimport { FeatureUsageFlag, TelemetryHandlerOptions } from \"./options/TelemetryHandlerOptions\";\n/**\r\n * @class\r\n * @implements Middleware\r\n * Class representing AuthenticationHandler\r\n */\n\nexport class AuthenticationHandler {\n  /**\r\n   * @public\r\n   * @constructor\r\n   * Creates an instance of AuthenticationHandler\r\n   * @param {AuthenticationProvider} authenticationProvider - The authentication provider for the authentication handler\r\n   */\n  constructor(authenticationProvider) {\n    this.authenticationProvider = authenticationProvider;\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * To execute the current middleware\r\n   * @param {Context} context - The context object of the request\r\n   * @returns A Promise that resolves to nothing\r\n   */\n\n\n  execute(context) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      try {\n        let options;\n\n        if (context.middlewareControl instanceof MiddlewareControl) {\n          options = context.middlewareControl.getMiddlewareOptions(AuthenticationHandlerOptions);\n        }\n\n        let authenticationProvider;\n        let authenticationProviderOptions;\n\n        if (typeof options !== \"undefined\") {\n          authenticationProvider = options.authenticationProvider;\n          authenticationProviderOptions = options.authenticationProviderOptions;\n        }\n\n        if (typeof authenticationProvider === \"undefined\") {\n          authenticationProvider = this.authenticationProvider;\n        }\n\n        const token = yield authenticationProvider.getAccessToken(authenticationProviderOptions);\n        const bearerKey = `Bearer ${token}`;\n        appendRequestHeader(context.request, context.options, AuthenticationHandler.AUTHORIZATION_HEADER, bearerKey);\n        TelemetryHandlerOptions.updateFeatureUsageFlag(context, FeatureUsageFlag.AUTHENTICATION_HANDLER_ENABLED);\n        return yield this.nextMiddleware.execute(context);\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * To set the next middleware in the chain\r\n   * @param {Middleware} next - The middleware instance\r\n   * @returns Nothing\r\n   */\n\n\n  setNext(next) {\n    this.nextMiddleware = next;\n  }\n\n}\n/**\r\n * @private\r\n * A member representing the authorization header name\r\n */\n\nAuthenticationHandler.AUTHORIZATION_HEADER = \"Authorization\";","map":{"version":3,"sources":["../../../src/middleware/AuthenticationHandler.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAWH,SAAS,iBAAT,QAAkC,qBAAlC;AACA,SAAS,mBAAT,QAAoC,kBAApC;AACA,SAAS,4BAAT,QAA6C,wCAA7C;AACA,SAAS,gBAAT,EAA2B,uBAA3B,QAA0D,mCAA1D;AAEA;;;;AAIG;;AACH,OAAM,MAAO,qBAAP,CAA4B;AAmBjC;;;;;AAKG;AACH,EAAA,WAAA,CAAmB,sBAAnB,EAAiE;AAChE,SAAK,sBAAL,GAA8B,sBAA9B;AACA;AAED;;;;;;AAMG;;;AACU,EAAA,OAAO,CAAC,OAAD,EAAiB;;AACpC,UAAI;AACH,YAAI,OAAJ;;AACA,YAAI,OAAO,CAAC,iBAAR,YAAqC,iBAAzC,EAA4D;AAC3D,UAAA,OAAO,GAAG,OAAO,CAAC,iBAAR,CAA0B,oBAA1B,CAA+C,4BAA/C,CAAV;AACA;;AACD,YAAI,sBAAJ;AACA,YAAI,6BAAJ;;AACA,YAAI,OAAO,OAAP,KAAmB,WAAvB,EAAoC;AACnC,UAAA,sBAAsB,GAAG,OAAO,CAAC,sBAAjC;AACA,UAAA,6BAA6B,GAAG,OAAO,CAAC,6BAAxC;AACA;;AACD,YAAI,OAAO,sBAAP,KAAkC,WAAtC,EAAmD;AAClD,UAAA,sBAAsB,GAAG,KAAK,sBAA9B;AACA;;AACD,cAAM,KAAK,GAAW,MAAM,sBAAsB,CAAC,cAAvB,CAAsC,6BAAtC,CAA5B;AACA,cAAM,SAAS,GAAW,UAAU,KAAK,EAAzC;AACA,QAAA,mBAAmB,CAAC,OAAO,CAAC,OAAT,EAAkB,OAAO,CAAC,OAA1B,EAAmC,qBAAqB,CAAC,oBAAzD,EAA+E,SAA/E,CAAnB;AACA,QAAA,uBAAuB,CAAC,sBAAxB,CAA+C,OAA/C,EAAwD,gBAAgB,CAAC,8BAAzE;AACA,eAAO,MAAM,KAAK,cAAL,CAAoB,OAApB,CAA4B,OAA5B,CAAb;AACA,OAnBD,CAmBE,OAAO,KAAP,EAAc;AACf,cAAM,KAAN;AACA;AACD,K;AAAA;AAED;;;;;AAKG;;;AACI,EAAA,OAAO,CAAC,IAAD,EAAiB;AAC9B,SAAK,cAAL,GAAsB,IAAtB;AACA;;AArEgC;AACjC;;;AAGG;;AACY,qBAAA,CAAA,oBAAA,GAA+B,eAA/B","sourceRoot":"","sourcesContent":["/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { MiddlewareControl } from \"./MiddlewareControl\";\r\nimport { appendRequestHeader } from \"./MiddlewareUtil\";\r\nimport { AuthenticationHandlerOptions } from \"./options/AuthenticationHandlerOptions\";\r\nimport { FeatureUsageFlag, TelemetryHandlerOptions } from \"./options/TelemetryHandlerOptions\";\r\n/**\r\n * @class\r\n * @implements Middleware\r\n * Class representing AuthenticationHandler\r\n */\r\nexport class AuthenticationHandler {\r\n    /**\r\n     * @public\r\n     * @constructor\r\n     * Creates an instance of AuthenticationHandler\r\n     * @param {AuthenticationProvider} authenticationProvider - The authentication provider for the authentication handler\r\n     */\r\n    constructor(authenticationProvider) {\r\n        this.authenticationProvider = authenticationProvider;\r\n    }\r\n    /**\r\n     * @public\r\n     * @async\r\n     * To execute the current middleware\r\n     * @param {Context} context - The context object of the request\r\n     * @returns A Promise that resolves to nothing\r\n     */\r\n    execute(context) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                let options;\r\n                if (context.middlewareControl instanceof MiddlewareControl) {\r\n                    options = context.middlewareControl.getMiddlewareOptions(AuthenticationHandlerOptions);\r\n                }\r\n                let authenticationProvider;\r\n                let authenticationProviderOptions;\r\n                if (typeof options !== \"undefined\") {\r\n                    authenticationProvider = options.authenticationProvider;\r\n                    authenticationProviderOptions = options.authenticationProviderOptions;\r\n                }\r\n                if (typeof authenticationProvider === \"undefined\") {\r\n                    authenticationProvider = this.authenticationProvider;\r\n                }\r\n                const token = yield authenticationProvider.getAccessToken(authenticationProviderOptions);\r\n                const bearerKey = `Bearer ${token}`;\r\n                appendRequestHeader(context.request, context.options, AuthenticationHandler.AUTHORIZATION_HEADER, bearerKey);\r\n                TelemetryHandlerOptions.updateFeatureUsageFlag(context, FeatureUsageFlag.AUTHENTICATION_HANDLER_ENABLED);\r\n                return yield this.nextMiddleware.execute(context);\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * To set the next middleware in the chain\r\n     * @param {Middleware} next - The middleware instance\r\n     * @returns Nothing\r\n     */\r\n    setNext(next) {\r\n        this.nextMiddleware = next;\r\n    }\r\n}\r\n/**\r\n * @private\r\n * A member representing the authorization header name\r\n */\r\nAuthenticationHandler.AUTHORIZATION_HEADER = \"Authorization\";\r\n//# sourceMappingURL=AuthenticationHandler.js.map"]},"metadata":{},"sourceType":"module"}