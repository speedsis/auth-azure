{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { ClientAuthError as ClientAuthError$1 } from './ClientAuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\r\n */\n\nvar ClientConfigurationErrorMessage = {\n  redirectUriNotSet: {\n    code: \"redirect_uri_empty\",\n    desc: \"A redirect URI is required for all calls, and none has been set.\"\n  },\n  postLogoutUriNotSet: {\n    code: \"post_logout_uri_empty\",\n    desc: \"A post logout redirect has not been set.\"\n  },\n  claimsRequestParsingError: {\n    code: \"claims_request_parsing_error\",\n    desc: \"Could not parse the given claims request object.\"\n  },\n  authorityUriInsecure: {\n    code: \"authority_uri_insecure\",\n    desc: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\"\n  },\n  urlParseError: {\n    code: \"url_parse_error\",\n    desc: \"URL could not be parsed into appropriate segments.\"\n  },\n  urlEmptyError: {\n    code: \"empty_url_error\",\n    desc: \"URL was empty or null.\"\n  },\n  emptyScopesError: {\n    code: \"empty_input_scopes_error\",\n    desc: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\"\n  },\n  nonArrayScopesError: {\n    code: \"nonarray_input_scopes_error\",\n    desc: \"Scopes cannot be passed as non-array.\"\n  },\n  clientIdSingleScopeError: {\n    code: \"clientid_input_scopes_error\",\n    desc: \"Client ID can only be provided as a single scope.\"\n  },\n  invalidPrompt: {\n    code: \"invalid_prompt_value\",\n    desc: \"Supported prompt values are 'login', 'select_account', 'consent', 'create' and 'none'.  Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\"\n  },\n  invalidClaimsRequest: {\n    code: \"invalid_claims\",\n    desc: \"Given claims parameter must be a stringified JSON object.\"\n  },\n  tokenRequestEmptyError: {\n    code: \"token_request_empty\",\n    desc: \"Token request was empty and not found in cache.\"\n  },\n  logoutRequestEmptyError: {\n    code: \"logout_request_empty\",\n    desc: \"The logout request was null or undefined.\"\n  },\n  invalidCodeChallengeMethod: {\n    code: \"invalid_code_challenge_method\",\n    desc: \"code_challenge_method passed is invalid. Valid values are \\\"plain\\\" and \\\"S256\\\".\"\n  },\n  invalidCodeChallengeParams: {\n    code: \"pkce_params_missing\",\n    desc: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\"\n  },\n  invalidCloudDiscoveryMetadata: {\n    code: \"invalid_cloud_discovery_metadata\",\n    desc: \"Invalid cloudDiscoveryMetadata provided. Must be a JSON object containing tenant_discovery_endpoint and metadata fields\"\n  },\n  invalidAuthorityMetadata: {\n    code: \"invalid_authority_metadata\",\n    desc: \"Invalid authorityMetadata provided. Must by a JSON object containing authorization_endpoint, token_endpoint, end_session_endpoint, issuer fields.\"\n  },\n  untrustedAuthority: {\n    code: \"untrusted_authority\",\n    desc: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\"\n  }\n};\n/**\r\n * Error thrown when there is an error in configuration of the MSAL.js library.\r\n */\n\nvar ClientConfigurationError = function (_super) {\n  __extends(ClientConfigurationError, _super);\n\n  function ClientConfigurationError(errorCode, errorMessage) {\n    var _this = _super.call(this, errorCode, errorMessage) || this;\n\n    _this.name = \"ClientConfigurationError\";\n    Object.setPrototypeOf(_this, ClientConfigurationError.prototype);\n    return _this;\n  }\n  /**\r\n   * Creates an error thrown when the redirect uri is empty (not set by caller)\r\n   */\n\n\n  ClientConfigurationError.createRedirectUriEmptyError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code, ClientConfigurationErrorMessage.redirectUriNotSet.desc);\n  };\n  /**\r\n   * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)\r\n   */\n\n\n  ClientConfigurationError.createPostLogoutRedirectUriEmptyError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code, ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);\n  };\n  /**\r\n   * Creates an error thrown when the claims request could not be successfully parsed\r\n   */\n\n\n  ClientConfigurationError.createClaimsRequestParsingError = function (claimsRequestParseError) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code, ClientConfigurationErrorMessage.claimsRequestParsingError.desc + \" Given value: \" + claimsRequestParseError);\n  };\n  /**\r\n   * Creates an error thrown if authority uri is given an insecure protocol.\r\n   * @param urlString\r\n   */\n\n\n  ClientConfigurationError.createInsecureAuthorityUriError = function (urlString) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code, ClientConfigurationErrorMessage.authorityUriInsecure.desc + \" Given URI: \" + urlString);\n  };\n  /**\r\n   * Creates an error thrown if URL string does not parse into separate segments.\r\n   * @param urlString\r\n   */\n\n\n  ClientConfigurationError.createUrlParseError = function (urlParseError) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code, ClientConfigurationErrorMessage.urlParseError.desc + \" Given Error: \" + urlParseError);\n  };\n  /**\r\n   * Creates an error thrown if URL string is empty or null.\r\n   * @param urlString\r\n   */\n\n\n  ClientConfigurationError.createUrlEmptyError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code, ClientConfigurationErrorMessage.urlEmptyError.desc);\n  };\n  /**\r\n   * Error thrown when scopes are empty.\r\n   * @param scopesValue\r\n   */\n\n\n  ClientConfigurationError.createEmptyScopesArrayError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code, \"\" + ClientConfigurationErrorMessage.emptyScopesError.desc);\n  };\n  /**\r\n   * Error thrown when client id scope is not provided as single scope.\r\n   * @param inputScopes\r\n   */\n\n\n  ClientConfigurationError.createClientIdSingleScopeError = function (inputScopes) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code, ClientConfigurationErrorMessage.clientIdSingleScopeError.desc + \" Given Scopes: \" + inputScopes);\n  };\n  /**\r\n   * Error thrown when prompt is not an allowed type.\r\n   * @param promptValue\r\n   */\n\n\n  ClientConfigurationError.createInvalidPromptError = function (promptValue) {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code, ClientConfigurationErrorMessage.invalidPrompt.desc + \" Given value: \" + promptValue);\n  };\n  /**\r\n   * Creates error thrown when claims parameter is not a stringified JSON object\r\n   */\n\n\n  ClientConfigurationError.createInvalidClaimsRequestError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidClaimsRequest.code, ClientConfigurationErrorMessage.invalidClaimsRequest.desc);\n  };\n  /**\r\n   * Throws error when token request is empty and nothing cached in storage.\r\n   */\n\n\n  ClientConfigurationError.createEmptyLogoutRequestError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.logoutRequestEmptyError.code, ClientConfigurationErrorMessage.logoutRequestEmptyError.desc);\n  };\n  /**\r\n   * Throws error when token request is empty and nothing cached in storage.\r\n   */\n\n\n  ClientConfigurationError.createEmptyTokenRequestError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.tokenRequestEmptyError.code, ClientConfigurationErrorMessage.tokenRequestEmptyError.desc);\n  };\n  /**\r\n   * Throws error when an invalid code_challenge_method is passed by the user\r\n   */\n\n\n  ClientConfigurationError.createInvalidCodeChallengeMethodError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code, ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc);\n  };\n  /**\r\n   * Throws error when both params: code_challenge and code_challenge_method are not passed together\r\n   */\n\n\n  ClientConfigurationError.createInvalidCodeChallengeParamsError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCodeChallengeParams.code, ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc);\n  };\n  /**\r\n   * Throws an error when the user passes invalid cloudDiscoveryMetadata\r\n   */\n\n\n  ClientConfigurationError.createInvalidCloudDiscoveryMetadataError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code, ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);\n  };\n  /**\r\n   * Throws an error when the user passes invalid cloudDiscoveryMetadata\r\n   */\n\n\n  ClientConfigurationError.createInvalidAuthorityMetadataError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthorityMetadata.code, ClientConfigurationErrorMessage.invalidAuthorityMetadata.desc);\n  };\n  /**\r\n   * Throws error when provided authority is not a member of the trusted host list\r\n   */\n\n\n  ClientConfigurationError.createUntrustedAuthorityError = function () {\n    return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code, ClientConfigurationErrorMessage.untrustedAuthority.desc);\n  };\n\n  return ClientConfigurationError;\n}(ClientAuthError$1);\n\nexport { ClientConfigurationError, ClientConfigurationErrorMessage };","map":{"version":3,"sources":["../../src/error/ClientConfigurationError.ts"],"names":["ClientAuthError"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { ClientAuthError } from \"./ClientAuthError\";\r\n\r\n/**\r\n * ClientConfigurationErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nexport const ClientConfigurationErrorMessage = {\r\n    redirectUriNotSet: {\r\n        code: \"redirect_uri_empty\",\r\n        desc: \"A redirect URI is required for all calls, and none has been set.\"\r\n    },\r\n    postLogoutUriNotSet: {\r\n        code: \"post_logout_uri_empty\",\r\n        desc: \"A post logout redirect has not been set.\"\r\n    },\r\n    claimsRequestParsingError: {\r\n        code: \"claims_request_parsing_error\",\r\n        desc: \"Could not parse the given claims request object.\"\r\n    },\r\n    authorityUriInsecure: {\r\n        code: \"authority_uri_insecure\",\r\n        desc: \"Authority URIs must use https.  Please see here for valid authority configuration options: https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-initializing-client-applications#configuration-options\"\r\n    },\r\n    urlParseError: {\r\n        code: \"url_parse_error\",\r\n        desc: \"URL could not be parsed into appropriate segments.\"\r\n    },\r\n    urlEmptyError: {\r\n        code: \"empty_url_error\",\r\n        desc: \"URL was empty or null.\"\r\n    },\r\n    emptyScopesError: {\r\n        code: \"empty_input_scopes_error\",\r\n        desc: \"Scopes cannot be passed as null, undefined or empty array because they are required to obtain an access token.\"\r\n    },\r\n    nonArrayScopesError: {\r\n        code: \"nonarray_input_scopes_error\",\r\n        desc: \"Scopes cannot be passed as non-array.\"\r\n    },\r\n    clientIdSingleScopeError: {\r\n        code: \"clientid_input_scopes_error\",\r\n        desc: \"Client ID can only be provided as a single scope.\"\r\n    },\r\n    invalidPrompt: {\r\n        code: \"invalid_prompt_value\",\r\n        desc: \"Supported prompt values are 'login', 'select_account', 'consent', 'create' and 'none'.  Please see here for valid configuration options: https://azuread.github.io/microsoft-authentication-library-for-js/ref/modules/_azure_msal_common.html#commonauthorizationurlrequest\",\r\n    },\r\n    invalidClaimsRequest: {\r\n        code: \"invalid_claims\",\r\n        desc: \"Given claims parameter must be a stringified JSON object.\"\r\n    },\r\n    tokenRequestEmptyError: {\r\n        code: \"token_request_empty\",\r\n        desc: \"Token request was empty and not found in cache.\"\r\n    },\r\n    logoutRequestEmptyError: {\r\n        code: \"logout_request_empty\",\r\n        desc: \"The logout request was null or undefined.\"\r\n    },\r\n    invalidCodeChallengeMethod: {\r\n        code: \"invalid_code_challenge_method\",\r\n        desc: \"code_challenge_method passed is invalid. Valid values are \\\"plain\\\" and \\\"S256\\\".\"\r\n    },\r\n    invalidCodeChallengeParams: {\r\n        code: \"pkce_params_missing\",\r\n        desc: \"Both params: code_challenge and code_challenge_method are to be passed if to be sent in the request\"\r\n    },\r\n    invalidCloudDiscoveryMetadata: {\r\n        code: \"invalid_cloud_discovery_metadata\",\r\n        desc: \"Invalid cloudDiscoveryMetadata provided. Must be a JSON object containing tenant_discovery_endpoint and metadata fields\"\r\n    },\r\n    invalidAuthorityMetadata: {\r\n        code: \"invalid_authority_metadata\",\r\n        desc: \"Invalid authorityMetadata provided. Must by a JSON object containing authorization_endpoint, token_endpoint, end_session_endpoint, issuer fields.\"\r\n    },\r\n    untrustedAuthority: {\r\n        code: \"untrusted_authority\",\r\n        desc: \"The provided authority is not a trusted authority. Please include this authority in the knownAuthorities config parameter.\"\r\n    }\r\n};\r\n\r\n/**\r\n * Error thrown when there is an error in configuration of the MSAL.js library.\r\n */\r\nexport class ClientConfigurationError extends ClientAuthError {\r\n\r\n    constructor(errorCode: string, errorMessage?: string) {\r\n        super(errorCode, errorMessage);\r\n        this.name = \"ClientConfigurationError\";\r\n        Object.setPrototypeOf(this, ClientConfigurationError.prototype);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the redirect uri is empty (not set by caller)\r\n     */\r\n    static createRedirectUriEmptyError(): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.redirectUriNotSet.code,\r\n            ClientConfigurationErrorMessage.redirectUriNotSet.desc);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the post-logout redirect uri is empty (not set by caller)\r\n     */\r\n    static createPostLogoutRedirectUriEmptyError(): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.postLogoutUriNotSet.code,\r\n            ClientConfigurationErrorMessage.postLogoutUriNotSet.desc);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the claims request could not be successfully parsed\r\n     */\r\n    static createClaimsRequestParsingError(claimsRequestParseError: string): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.claimsRequestParsingError.code,\r\n            `${ClientConfigurationErrorMessage.claimsRequestParsingError.desc} Given value: ${claimsRequestParseError}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown if authority uri is given an insecure protocol.\r\n     * @param urlString\r\n     */\r\n    static createInsecureAuthorityUriError(urlString: string): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.authorityUriInsecure.code,\r\n            `${ClientConfigurationErrorMessage.authorityUriInsecure.desc} Given URI: ${urlString}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown if URL string does not parse into separate segments.\r\n     * @param urlString\r\n     */\r\n    static createUrlParseError(urlParseError: string): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlParseError.code,\r\n            `${ClientConfigurationErrorMessage.urlParseError.desc} Given Error: ${urlParseError}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown if URL string is empty or null.\r\n     * @param urlString\r\n     */\r\n    static createUrlEmptyError(): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.urlEmptyError.code,\r\n            ClientConfigurationErrorMessage.urlEmptyError.desc);\r\n    }\r\n\r\n    /**\r\n     * Error thrown when scopes are empty.\r\n     * @param scopesValue\r\n     */\r\n    static createEmptyScopesArrayError(): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.emptyScopesError.code,\r\n            `${ClientConfigurationErrorMessage.emptyScopesError.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Error thrown when client id scope is not provided as single scope.\r\n     * @param inputScopes\r\n     */\r\n    static createClientIdSingleScopeError(inputScopes: Array<string>): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.clientIdSingleScopeError.code,\r\n            `${ClientConfigurationErrorMessage.clientIdSingleScopeError.desc} Given Scopes: ${inputScopes}`);\r\n    }\r\n\r\n    /**\r\n     * Error thrown when prompt is not an allowed type.\r\n     * @param promptValue\r\n     */\r\n    static createInvalidPromptError(promptValue: string): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidPrompt.code,\r\n            `${ClientConfigurationErrorMessage.invalidPrompt.desc} Given value: ${promptValue}`);\r\n    }\r\n\r\n    /**\r\n     * Creates error thrown when claims parameter is not a stringified JSON object\r\n     */\r\n    static createInvalidClaimsRequestError(): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidClaimsRequest.code,\r\n            ClientConfigurationErrorMessage.invalidClaimsRequest.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws error when token request is empty and nothing cached in storage.\r\n     */\r\n    static createEmptyLogoutRequestError(): ClientConfigurationError {\r\n        return new ClientConfigurationError(\r\n            ClientConfigurationErrorMessage.logoutRequestEmptyError.code,\r\n            ClientConfigurationErrorMessage.logoutRequestEmptyError.desc\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Throws error when token request is empty and nothing cached in storage.\r\n     */\r\n    static createEmptyTokenRequestError(): ClientConfigurationError {\r\n        return new ClientConfigurationError(\r\n            ClientConfigurationErrorMessage.tokenRequestEmptyError.code,\r\n            ClientConfigurationErrorMessage.tokenRequestEmptyError.desc\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Throws error when an invalid code_challenge_method is passed by the user\r\n     */\r\n    static createInvalidCodeChallengeMethodError(): ClientConfigurationError {\r\n        return new ClientConfigurationError(\r\n            ClientConfigurationErrorMessage.invalidCodeChallengeMethod.code,\r\n            ClientConfigurationErrorMessage.invalidCodeChallengeMethod.desc\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Throws error when both params: code_challenge and code_challenge_method are not passed together\r\n     */\r\n    static createInvalidCodeChallengeParamsError(): ClientConfigurationError {\r\n        return new ClientConfigurationError(\r\n            ClientConfigurationErrorMessage.invalidCodeChallengeParams.code,\r\n            ClientConfigurationErrorMessage.invalidCodeChallengeParams.desc\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Throws an error when the user passes invalid cloudDiscoveryMetadata\r\n     */\r\n    static createInvalidCloudDiscoveryMetadataError(): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.code,\r\n            ClientConfigurationErrorMessage.invalidCloudDiscoveryMetadata.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws an error when the user passes invalid cloudDiscoveryMetadata\r\n     */\r\n    static createInvalidAuthorityMetadataError(): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.invalidAuthorityMetadata.code,\r\n            ClientConfigurationErrorMessage.invalidAuthorityMetadata.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws error when provided authority is not a member of the trusted host list\r\n     */\r\n    static createUntrustedAuthorityError(): ClientConfigurationError {\r\n        return new ClientConfigurationError(ClientConfigurationErrorMessage.untrustedAuthority.code,\r\n            ClientConfigurationErrorMessage.untrustedAuthority.desc);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}