{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * @class\r\n * @implements Middleware\r\n * Class for HTTPMessageHandler\r\n */\n\nexport class HTTPMessageHandler {\n  /**\r\n   * @public\r\n   * @async\r\n   * To execute the current middleware\r\n   * @param {Context} context - The request context object\r\n   * @returns A promise that resolves to nothing\r\n   */\n  execute(context) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      try {\n        context.response = yield fetch(context.request, context.options);\n        return;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["../../../src/middleware/HTTPMessageHandler.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAUH;;;;AAIG;;AACH,OAAM,MAAO,kBAAP,CAAyB;AAC9B;;;;;;AAMG;AACU,EAAA,OAAO,CAAC,OAAD,EAAiB;;AACpC,UAAI;AACH,QAAA,OAAO,CAAC,QAAR,GAAmB,MAAM,KAAK,CAAC,OAAO,CAAC,OAAT,EAAkB,OAAO,CAAC,OAA1B,CAA9B;AACA;AACA,OAHD,CAGE,OAAO,KAAP,EAAc;AACf,cAAM,KAAN;AACA;AACD,K;AAAA;;AAf6B","sourceRoot":"","sourcesContent":["/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * @class\r\n * @implements Middleware\r\n * Class for HTTPMessageHandler\r\n */\r\nexport class HTTPMessageHandler {\r\n    /**\r\n     * @public\r\n     * @async\r\n     * To execute the current middleware\r\n     * @param {Context} context - The request context object\r\n     * @returns A promise that resolves to nothing\r\n     */\r\n    execute(context) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                context.response = yield fetch(context.request, context.options);\r\n                return;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=HTTPMessageHandler.js.map"]},"metadata":{},"sourceType":"module"}