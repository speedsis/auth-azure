{"ast":null,"code":"var _jsxFileName = \"/Users/speedsis/Downloads/ms-identity-javascript-react-tutorial-main/2-Authorization-I/1-call-graph/SPA/src/pages/Tenant.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { MsalAuthenticationTemplate, useMsal, useAccount } from \"@azure/msal-react\";\nimport { InteractionType, EventType } from \"@azure/msal-browser\";\nimport { loginRequest, protectedResources } from \"../authConfig\";\nimport { callApiWithToken } from \"../fetch\";\nimport { TenantData } from \"../components/DataDisplay\";\nimport Button from \"react-bootstrap/Button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TenantContent = () => {\n  _s();\n\n  /**\n   * useMsal is hook that returns the PublicClientApplication instance, \n   * an array of all accounts currently signed in and an inProgress value \n   * that tells you what msal is currently doing. For more, visit: \n   * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\n   */\n  const {\n    instance,\n    accounts,\n    inProgress\n  } = useMsal();\n  const account = useAccount(accounts[0] || {});\n  const [tenantData, setTenantData] = useState(null);\n  useEffect(() => {\n    /**\n     * In order to get the direct response from calling acquireTokenRedirect() API, register an event\n     * and listen for ACQUIRE_TOKEN_SUCCESS. Make sure to remove the event once component unmounts. For more, \n     * visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/events.md\n     */\n    // This will be run on component mount\n    const callbackId = instance.addEventCallback(message => {\n      // This will be run every time an event is emitted after registering this callback\n      if (message.eventType === EventType.ACQUIRE_TOKEN_SUCCESS) {\n        const response = message.payload; // Do something with the response\n\n        callApiWithToken(response.accessToken, protectedResources.armTenants.endpoint).then(response => setTenantData(response));\n      }\n    });\n    return () => {\n      // This will be run on component unmount\n      if (callbackId) {\n        instance.removeEventCallback(callbackId);\n      }\n    };\n  }, [account, inProgress, instance]);\n\n  const requestTenantData = () => {\n    instance.acquireTokenRedirect({\n      scopes: protectedResources.armTenants.scopes\n    }).catch(error => console.log(error));\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: tenantData ? /*#__PURE__*/_jsxDEV(TenantData, {\n      tenantData: tenantData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: requestTenantData,\n        children: \"Request Tenant Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this)\n  }, void 0, false);\n};\n/**\n * The `MsalAuthenticationTemplate` component will render its children if a user is authenticated \n * or attempt to sign a user in. Just provide it with the interaction type you would like to use \n * (redirect or popup) and optionally a [request object](https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/request-response-object.md)\n * to be passed to the login API, a component to display while authentication is in progress or a component to display if an error occurs. For more, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\n */\n\n\n_s(TenantContent, \"drsFOeqy47Yju0kr69gV50FkezY=\", false, function () {\n  return [useMsal, useAccount];\n});\n\n_c = TenantContent;\nexport const Tenant = () => {\n  const authRequest = { ...loginRequest\n  };\n  return /*#__PURE__*/_jsxDEV(MsalAuthenticationTemplate, {\n    interactionType: InteractionType.Redirect,\n    authenticationRequest: authRequest,\n    children: /*#__PURE__*/_jsxDEV(TenantContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 9\n  }, this);\n};\n_c2 = Tenant;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"TenantContent\");\n$RefreshReg$(_c2, \"Tenant\");","map":{"version":3,"sources":["/Users/speedsis/Downloads/ms-identity-javascript-react-tutorial-main/2-Authorization-I/1-call-graph/SPA/src/pages/Tenant.jsx"],"names":["useEffect","useState","MsalAuthenticationTemplate","useMsal","useAccount","InteractionType","EventType","loginRequest","protectedResources","callApiWithToken","TenantData","Button","TenantContent","instance","accounts","inProgress","account","tenantData","setTenantData","callbackId","addEventCallback","message","eventType","ACQUIRE_TOKEN_SUCCESS","response","payload","accessToken","armTenants","endpoint","then","removeEventCallback","requestTenantData","acquireTokenRedirect","scopes","catch","error","console","log","Tenant","authRequest","Redirect"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,SAASC,0BAAT,EAAqCC,OAArC,EAA8CC,UAA9C,QAAgE,mBAAhE;AACA,SAASC,eAAT,EAA0BC,SAA1B,QAA2C,qBAA3C;AAEA,SAASC,YAAT,EAAuBC,kBAAvB,QAAiD,eAAjD;AACA,SAASC,gBAAT,QAAiC,UAAjC;AACA,SAASC,UAAT,QAA2B,2BAA3B;AAEA,OAAOC,MAAP,MAAmB,wBAAnB;;;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACxB;AACJ;AACA;AACA;AACA;AACA;AACI,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA;AAAtB,MAAqCZ,OAAO,EAAlD;AACA,QAAMa,OAAO,GAAGZ,UAAU,CAACU,QAAQ,CAAC,CAAD,CAAR,IAAe,EAAhB,CAA1B;AACA,QAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,IAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AAEZ;AACR;AACA;AACA;AACA;AAEQ;AACA,UAAMmB,UAAU,GAAGN,QAAQ,CAACO,gBAAT,CAA2BC,OAAD,IAAa;AACtD;AACA,UAAIA,OAAO,CAACC,SAAR,KAAsBhB,SAAS,CAACiB,qBAApC,EAA2D;AACvD,cAAMC,QAAQ,GAAGH,OAAO,CAACI,OAAzB,CADuD,CAGvD;;AACAhB,QAAAA,gBAAgB,CAACe,QAAQ,CAACE,WAAV,EAAuBlB,kBAAkB,CAACmB,UAAnB,CAA8BC,QAArD,CAAhB,CACKC,IADL,CACUL,QAAQ,IAAIN,aAAa,CAACM,QAAD,CADnC;AAEH;AACJ,KATkB,CAAnB;AAUA,WAAO,MAAM;AACT;AACA,UAAIL,UAAJ,EAAgB;AACZN,QAAAA,QAAQ,CAACiB,mBAAT,CAA6BX,UAA7B;AACH;AACJ,KALD;AAMH,GAzBQ,EAyBN,CAACH,OAAD,EAAUD,UAAV,EAAsBF,QAAtB,CAzBM,CAAT;;AA2BA,QAAMkB,iBAAiB,GAAG,MAAM;AAC5BlB,IAAAA,QAAQ,CAACmB,oBAAT,CAA8B;AAC1BC,MAAAA,MAAM,EAAEzB,kBAAkB,CAACmB,UAAnB,CAA8BM;AADZ,KAA9B,EAEGC,KAFH,CAESC,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAFlB;AAGH,GAJD;;AAMA,sBACI;AAAA,cACMlB,UAAU,gBAER,QAAC,UAAD;AAAY,MAAA,UAAU,EAAEA;AAAxB;AAAA;AAAA;AAAA;AAAA,YAFQ,gBAIR;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA,6BACI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,OAAO,EAAEc,iBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AALR,mBADJ;AAYH,CAxDD;AA0DA;AACA;AACA;AACA;AACA;AACA;AACA;;;GAhEMnB,a;UAOyCT,O,EAC3BC,U;;;KARdQ,a;AAiEN,OAAO,MAAM0B,MAAM,GAAG,MAAM;AACxB,QAAMC,WAAW,GAAG,EAChB,GAAGhC;AADa,GAApB;AAIA,sBACI,QAAC,0BAAD;AACI,IAAA,eAAe,EAAEF,eAAe,CAACmC,QADrC;AAEI,IAAA,qBAAqB,EAAED,WAF3B;AAAA,2BAII,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAbM;MAAMD,M","sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport { MsalAuthenticationTemplate, useMsal, useAccount } from \"@azure/msal-react\";\nimport { InteractionType, EventType } from \"@azure/msal-browser\";\n\nimport { loginRequest, protectedResources } from \"../authConfig\";\nimport { callApiWithToken } from \"../fetch\";\nimport { TenantData } from \"../components/DataDisplay\";\n\nimport Button from \"react-bootstrap/Button\";\n\nconst TenantContent = () => {\n    /**\n     * useMsal is hook that returns the PublicClientApplication instance, \n     * an array of all accounts currently signed in and an inProgress value \n     * that tells you what msal is currently doing. For more, visit: \n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\n     */\n    const { instance, accounts, inProgress } = useMsal();\n    const account = useAccount(accounts[0] || {});\n    const [tenantData, setTenantData] = useState(null);\n\n    useEffect(() => {\n\n        /**\n         * In order to get the direct response from calling acquireTokenRedirect() API, register an event\n         * and listen for ACQUIRE_TOKEN_SUCCESS. Make sure to remove the event once component unmounts. For more, \n         * visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/events.md\n         */\n\n        // This will be run on component mount\n        const callbackId = instance.addEventCallback((message) => {\n            // This will be run every time an event is emitted after registering this callback\n            if (message.eventType === EventType.ACQUIRE_TOKEN_SUCCESS) {\n                const response = message.payload;\n\n                // Do something with the response\n                callApiWithToken(response.accessToken, protectedResources.armTenants.endpoint)\n                    .then(response => setTenantData(response));\n            }\n        });\n        return () => {\n            // This will be run on component unmount\n            if (callbackId) {\n                instance.removeEventCallback(callbackId);\n            }\n        }\n    }, [account, inProgress, instance]);\n\n    const requestTenantData = () => {\n        instance.acquireTokenRedirect({\n            scopes: protectedResources.armTenants.scopes,\n        }).catch(error => console.log(error))\n    }\n\n    return (\n        <>\n            { tenantData ?\n\n                <TenantData tenantData={tenantData} />\n                :\n                <div className=\"row justify-content-center\">\n                    <Button variant=\"secondary\" onClick={requestTenantData}>Request Tenant Data</Button>\n                </div>\n            }\n        </>\n    );\n};\n\n/**\n * The `MsalAuthenticationTemplate` component will render its children if a user is authenticated \n * or attempt to sign a user in. Just provide it with the interaction type you would like to use \n * (redirect or popup) and optionally a [request object](https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/request-response-object.md)\n * to be passed to the login API, a component to display while authentication is in progress or a component to display if an error occurs. For more, visit:\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\n */\nexport const Tenant = () => {\n    const authRequest = {\n        ...loginRequest\n    };\n\n    return (\n        <MsalAuthenticationTemplate\n            interactionType={InteractionType.Redirect}\n            authenticationRequest={authRequest}\n        >\n            <TenantContent />\n        </MsalAuthenticationTemplate>\n    )\n};"]},"metadata":{},"sourceType":"module"}