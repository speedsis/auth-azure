{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * @constant\r\n * To generate the UUID\r\n * @returns The UUID string\r\n */\n\nexport const generateUUID = () => {\n  let uuid = \"\";\n\n  for (let j = 0; j < 32; j++) {\n    if (j === 8 || j === 12 || j === 16 || j === 20) {\n      uuid += \"-\";\n    }\n\n    uuid += Math.floor(Math.random() * 16).toString(16);\n  }\n\n  return uuid;\n};\n/**\r\n * @constant\r\n * To get the request header from the request\r\n * @param {RequestInfo} request - The request object or the url string\r\n * @param {FetchOptions|undefined} options - The request options object\r\n * @param {string} key - The header key string\r\n * @returns A header value for the given key from the request\r\n */\n\nexport const getRequestHeader = (request, options, key) => {\n  let value = null;\n\n  if (typeof Request !== \"undefined\" && request instanceof Request) {\n    value = request.headers.get(key);\n  } else if (typeof options !== \"undefined\" && options.headers !== undefined) {\n    if (typeof Headers !== \"undefined\" && options.headers instanceof Headers) {\n      value = options.headers.get(key);\n    } else if (options.headers instanceof Array) {\n      const headers = options.headers;\n\n      for (let i = 0, l = headers.length; i < l; i++) {\n        if (headers[i][0] === key) {\n          value = headers[i][1];\n          break;\n        }\n      }\n    } else if (options.headers[key] !== undefined) {\n      value = options.headers[key];\n    }\n  }\n\n  return value;\n};\n/**\r\n * @constant\r\n * To set the header value to the given request\r\n * @param {RequestInfo} request - The request object or the url string\r\n * @param {FetchOptions|undefined} options - The request options object\r\n * @param {string} key - The header key string\r\n * @param {string } value - The header value string\r\n * @returns Nothing\r\n */\n\nexport const setRequestHeader = (request, options, key, value) => {\n  if (typeof Request !== \"undefined\" && request instanceof Request) {\n    request.headers.set(key, value);\n  } else if (typeof options !== \"undefined\") {\n    if (options.headers === undefined) {\n      options.headers = new Headers({\n        [key]: value\n      });\n    } else {\n      if (typeof Headers !== \"undefined\" && options.headers instanceof Headers) {\n        options.headers.set(key, value);\n      } else if (options.headers instanceof Array) {\n        let i = 0;\n        const l = options.headers.length;\n\n        for (; i < l; i++) {\n          const header = options.headers[i];\n\n          if (header[0] === key) {\n            header[1] = value;\n            break;\n          }\n        }\n\n        if (i === l) {\n          options.headers.push([key, value]);\n        }\n      } else {\n        Object.assign(options.headers, {\n          [key]: value\n        });\n      }\n    }\n  }\n};\n/**\r\n * @constant\r\n * To append the header value to the given request\r\n * @param {RequestInfo} request - The request object or the url string\r\n * @param {FetchOptions|undefined} options - The request options object\r\n * @param {string} key - The header key string\r\n * @param {string } value - The header value string\r\n * @returns Nothing\r\n */\n\nexport const appendRequestHeader = (request, options, key, value) => {\n  if (typeof Request !== \"undefined\" && request instanceof Request) {\n    request.headers.append(key, value);\n  } else if (typeof options !== \"undefined\") {\n    if (options.headers === undefined) {\n      options.headers = new Headers({\n        [key]: value\n      });\n    } else {\n      if (typeof Headers !== \"undefined\" && options.headers instanceof Headers) {\n        options.headers.append(key, value);\n      } else if (options.headers instanceof Array) {\n        options.headers.push([key, value]);\n      } else if (options.headers === undefined) {\n        options.headers = {\n          [key]: value\n        };\n      } else if (options.headers[key] === undefined) {\n        options.headers[key] = value;\n      } else {\n        options.headers[key] += `, ${value}`;\n      }\n    }\n  }\n};\n/**\r\n * @constant\r\n * To clone the request with the new url\r\n * @param {string} url - The new url string\r\n * @param {Request} request - The request object\r\n * @returns A promise that resolves to request object\r\n */\n\nexport const cloneRequestWithNewUrl = (newUrl, request) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n  const body = request.headers.get(\"Content-Type\") ? yield request.blob() : yield Promise.resolve(undefined);\n  const {\n    method,\n    headers,\n    referrer,\n    referrerPolicy,\n    mode,\n    credentials,\n    cache,\n    redirect,\n    integrity,\n    keepalive,\n    signal\n  } = request;\n  return new Request(newUrl, {\n    method,\n    headers,\n    body,\n    referrer,\n    referrerPolicy,\n    mode,\n    credentials,\n    cache,\n    redirect,\n    integrity,\n    keepalive,\n    signal\n  });\n});","map":{"version":3,"sources":["../../../src/middleware/MiddlewareUtil.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * @constant\r\n * To generate the UUID\r\n * @returns The UUID string\r\n */\r\nexport const generateUUID = () => {\r\n    let uuid = \"\";\r\n    for (let j = 0; j < 32; j++) {\r\n        if (j === 8 || j === 12 || j === 16 || j === 20) {\r\n            uuid += \"-\";\r\n        }\r\n        uuid += Math.floor(Math.random() * 16).toString(16);\r\n    }\r\n    return uuid;\r\n};\r\n/**\r\n * @constant\r\n * To get the request header from the request\r\n * @param {RequestInfo} request - The request object or the url string\r\n * @param {FetchOptions|undefined} options - The request options object\r\n * @param {string} key - The header key string\r\n * @returns A header value for the given key from the request\r\n */\r\nexport const getRequestHeader = (request, options, key) => {\r\n    let value = null;\r\n    if (typeof Request !== \"undefined\" && request instanceof Request) {\r\n        value = request.headers.get(key);\r\n    }\r\n    else if (typeof options !== \"undefined\" && options.headers !== undefined) {\r\n        if (typeof Headers !== \"undefined\" && options.headers instanceof Headers) {\r\n            value = options.headers.get(key);\r\n        }\r\n        else if (options.headers instanceof Array) {\r\n            const headers = options.headers;\r\n            for (let i = 0, l = headers.length; i < l; i++) {\r\n                if (headers[i][0] === key) {\r\n                    value = headers[i][1];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        else if (options.headers[key] !== undefined) {\r\n            value = options.headers[key];\r\n        }\r\n    }\r\n    return value;\r\n};\r\n/**\r\n * @constant\r\n * To set the header value to the given request\r\n * @param {RequestInfo} request - The request object or the url string\r\n * @param {FetchOptions|undefined} options - The request options object\r\n * @param {string} key - The header key string\r\n * @param {string } value - The header value string\r\n * @returns Nothing\r\n */\r\nexport const setRequestHeader = (request, options, key, value) => {\r\n    if (typeof Request !== \"undefined\" && request instanceof Request) {\r\n        request.headers.set(key, value);\r\n    }\r\n    else if (typeof options !== \"undefined\") {\r\n        if (options.headers === undefined) {\r\n            options.headers = new Headers({\r\n                [key]: value,\r\n            });\r\n        }\r\n        else {\r\n            if (typeof Headers !== \"undefined\" && options.headers instanceof Headers) {\r\n                options.headers.set(key, value);\r\n            }\r\n            else if (options.headers instanceof Array) {\r\n                let i = 0;\r\n                const l = options.headers.length;\r\n                for (; i < l; i++) {\r\n                    const header = options.headers[i];\r\n                    if (header[0] === key) {\r\n                        header[1] = value;\r\n                        break;\r\n                    }\r\n                }\r\n                if (i === l) {\r\n                    options.headers.push([key, value]);\r\n                }\r\n            }\r\n            else {\r\n                Object.assign(options.headers, { [key]: value });\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * @constant\r\n * To append the header value to the given request\r\n * @param {RequestInfo} request - The request object or the url string\r\n * @param {FetchOptions|undefined} options - The request options object\r\n * @param {string} key - The header key string\r\n * @param {string } value - The header value string\r\n * @returns Nothing\r\n */\r\nexport const appendRequestHeader = (request, options, key, value) => {\r\n    if (typeof Request !== \"undefined\" && request instanceof Request) {\r\n        request.headers.append(key, value);\r\n    }\r\n    else if (typeof options !== \"undefined\") {\r\n        if (options.headers === undefined) {\r\n            options.headers = new Headers({\r\n                [key]: value,\r\n            });\r\n        }\r\n        else {\r\n            if (typeof Headers !== \"undefined\" && options.headers instanceof Headers) {\r\n                options.headers.append(key, value);\r\n            }\r\n            else if (options.headers instanceof Array) {\r\n                options.headers.push([key, value]);\r\n            }\r\n            else if (options.headers === undefined) {\r\n                options.headers = { [key]: value };\r\n            }\r\n            else if (options.headers[key] === undefined) {\r\n                options.headers[key] = value;\r\n            }\r\n            else {\r\n                options.headers[key] += `, ${value}`;\r\n            }\r\n        }\r\n    }\r\n};\r\n/**\r\n * @constant\r\n * To clone the request with the new url\r\n * @param {string} url - The new url string\r\n * @param {Request} request - The request object\r\n * @returns A promise that resolves to request object\r\n */\r\nexport const cloneRequestWithNewUrl = (newUrl, request) => tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n    const body = request.headers.get(\"Content-Type\") ? yield request.blob() : yield Promise.resolve(undefined);\r\n    const { method, headers, referrer, referrerPolicy, mode, credentials, cache, redirect, integrity, keepalive, signal } = request;\r\n    return new Request(newUrl, { method, headers, body, referrer, referrerPolicy, mode, credentials, cache, redirect, integrity, keepalive, signal });\r\n});\r\n//# sourceMappingURL=MiddlewareUtil.js.map"]},"metadata":{},"sourceType":"module"}