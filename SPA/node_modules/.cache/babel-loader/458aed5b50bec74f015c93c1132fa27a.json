{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { CodeChallengeMethodValues, PromptValue } from '../utils/Constants.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\nimport { ClientConfigurationError as ClientConfigurationError$1 } from '../error/ClientConfigurationError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Validates server consumable params from the \"request\" objects\r\n */\n\nvar RequestValidator = function () {\n  function RequestValidator() {}\n  /**\r\n   * Utility to check if the `redirectUri` in the request is a non-null value\r\n   * @param redirectUri\r\n   */\n\n\n  RequestValidator.validateRedirectUri = function (redirectUri) {\n    if (StringUtils$1.isEmpty(redirectUri)) {\n      throw ClientConfigurationError$1.createRedirectUriEmptyError();\n    }\n  };\n  /**\r\n   * Utility to validate prompt sent by the user in the request\r\n   * @param prompt\r\n   */\n\n\n  RequestValidator.validatePrompt = function (prompt) {\n    var promptValues = [];\n\n    for (var value in PromptValue) {\n      promptValues.push(PromptValue[value]);\n    }\n\n    if (promptValues.indexOf(prompt) < 0) {\n      throw ClientConfigurationError$1.createInvalidPromptError(prompt);\n    }\n  };\n\n  RequestValidator.validateClaims = function (claims) {\n    try {\n      JSON.parse(claims);\n    } catch (e) {\n      throw ClientConfigurationError$1.createInvalidClaimsRequestError();\n    }\n  };\n  /**\r\n   * Utility to validate code_challenge and code_challenge_method\r\n   * @param codeChallenge\r\n   * @param codeChallengeMethod\r\n   */\n\n\n  RequestValidator.validateCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\n    if (StringUtils$1.isEmpty(codeChallenge) || StringUtils$1.isEmpty(codeChallengeMethod)) {\n      throw ClientConfigurationError$1.createInvalidCodeChallengeParamsError();\n    } else {\n      this.validateCodeChallengeMethod(codeChallengeMethod);\n    }\n  };\n  /**\r\n   * Utility to validate code_challenge_method\r\n   * @param codeChallengeMethod\r\n   */\n\n\n  RequestValidator.validateCodeChallengeMethod = function (codeChallengeMethod) {\n    if ([CodeChallengeMethodValues.PLAIN, CodeChallengeMethodValues.S256].indexOf(codeChallengeMethod) < 0) {\n      throw ClientConfigurationError$1.createInvalidCodeChallengeMethodError();\n    }\n  };\n  /**\r\n   * Removes unnecessary or duplicate query parameters from extraQueryParameters\r\n   * @param request\r\n   */\n\n\n  RequestValidator.sanitizeEQParams = function (eQParams, queryParams) {\n    if (!eQParams) {\n      return {};\n    } // Remove any query parameters already included in SSO params\n\n\n    queryParams.forEach(function (value, key) {\n      if (eQParams[key]) {\n        delete eQParams[key];\n      }\n    });\n    return eQParams;\n  };\n\n  return RequestValidator;\n}();\n\nexport { RequestValidator };","map":{"version":3,"sources":["../../src/request/RequestValidator.ts"],"names":["StringUtils","ClientConfigurationError"],"mappings":";;;;;;AAAA;;;;;AAUA;;;;;AAGA,WAAA,gBAAA,GAAA,CAkFC;;;;;;;AA5EU,EAAA,gBAAA,CAAA,mBAAA,GAAP,UAA2B,WAA3B,EAA8C;AAC1C,QAAIA,aAAW,CAAC,OAAZA,CAAoB,WAApBA,CAAJ,EAAsC;AAClC,YAAMC,0BAAwB,CAAC,2BAAzBA,EAAN;AACH;AACJ,GAJM;;;;;;;AAUA,EAAA,gBAAA,CAAA,cAAA,GAAP,UAAsB,MAAtB,EAAoC;AAChC,QAAM,YAAY,GAAG,EAArB;;AAEA,SAAK,IAAM,KAAX,IAAoB,WAApB,EAAiC;AAC7B,MAAA,YAAY,CAAC,IAAb,CAAkB,WAAW,CAAC,KAAD,CAA7B;AACH;;AAED,QAAI,YAAY,CAAC,OAAb,CAAqB,MAArB,IAA+B,CAAnC,EAAsC;AAClC,YAAMA,0BAAwB,CAAC,wBAAzBA,CAAkD,MAAlDA,CAAN;AACH;AACJ,GAVM;;AAYA,EAAA,gBAAA,CAAA,cAAA,GAAP,UAAsB,MAAtB,EAAoC;AAChC,QAAI;AACA,MAAA,IAAI,CAAC,KAAL,CAAW,MAAX;AACH,KAFD,CAEE,OAAM,CAAN,EAAS;AACP,YAAMA,0BAAwB,CAAC,+BAAzBA,EAAN;AACH;AACJ,GANM;;;;;;;;AAaA,EAAA,gBAAA,CAAA,2BAAA,GAAP,UAAmC,aAAnC,EAA0D,mBAA1D,EAAqF;AACjF,QAAID,aAAW,CAAC,OAAZA,CAAoB,aAApBA,KAAsCA,aAAW,CAAC,OAAZA,CAAoB,mBAApBA,CAA1C,EAAoF;AAChF,YAAMC,0BAAwB,CAAC,qCAAzBA,EAAN;AACH,KAFD,MAEO;AACH,WAAK,2BAAL,CAAiC,mBAAjC;AACH;AACJ,GANM;;;;;;;AAYA,EAAA,gBAAA,CAAA,2BAAA,GAAP,UAAmC,mBAAnC,EAA8D;AAC1D,QACI,CACI,yBAAyB,CAAC,KAD9B,EAEI,yBAAyB,CAAC,IAF9B,EAGE,OAHF,CAGU,mBAHV,IAGiC,CAJrC,EAKE;AACE,YAAMA,0BAAwB,CAAC,qCAAzBA,EAAN;AACH;AACJ,GATM;;;;;;;AAeA,EAAA,gBAAA,CAAA,gBAAA,GAAP,UAAwB,QAAxB,EAA8C,WAA9C,EAA8E;AAC1E,QAAI,CAAC,QAAL,EAAe;AACX,aAAO,EAAP;AACH,KAHyE,C;;;AAM1E,IAAA,WAAW,CAAC,OAAZ,CAAoB,UAAC,KAAD,EAAQ,GAAR,EAAW;AAC3B,UAAI,QAAQ,CAAC,GAAD,CAAZ,EAAmB;AACf,eAAO,QAAQ,CAAC,GAAD,CAAf;AACH;AACJ,KAJD;AAMA,WAAO,QAAP;AACH,GAbM;;AAcX,SAAA,gBAAA;AAAC,C","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { PromptValue, CodeChallengeMethodValues} from \"../utils/Constants\";\r\nimport { StringDict } from \"../utils/MsalTypes\";\r\n\r\n/**\r\n * Validates server consumable params from the \"request\" objects\r\n */\r\nexport class RequestValidator {\r\n\r\n    /**\r\n     * Utility to check if the `redirectUri` in the request is a non-null value\r\n     * @param redirectUri\r\n     */\r\n    static validateRedirectUri(redirectUri: string) : void {\r\n        if (StringUtils.isEmpty(redirectUri)) {\r\n            throw ClientConfigurationError.createRedirectUriEmptyError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Utility to validate prompt sent by the user in the request\r\n     * @param prompt\r\n     */\r\n    static validatePrompt(prompt: string) : void {\r\n        const promptValues = [];\r\n\r\n        for (const value in PromptValue) {\r\n            promptValues.push(PromptValue[value]);\r\n        }\r\n\r\n        if (promptValues.indexOf(prompt) < 0) {\r\n            throw ClientConfigurationError.createInvalidPromptError(prompt);\r\n        }\r\n    }\r\n\r\n    static validateClaims(claims: string) : void {\r\n        try {\r\n            JSON.parse(claims);\r\n        } catch(e) {\r\n            throw ClientConfigurationError.createInvalidClaimsRequestError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Utility to validate code_challenge and code_challenge_method\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */\r\n    static validateCodeChallengeParams(codeChallenge: string, codeChallengeMethod: string) : void  {\r\n        if (StringUtils.isEmpty(codeChallenge) || StringUtils.isEmpty(codeChallengeMethod)) {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\r\n        } else {\r\n            this.validateCodeChallengeMethod(codeChallengeMethod);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Utility to validate code_challenge_method\r\n     * @param codeChallengeMethod\r\n     */\r\n    static validateCodeChallengeMethod(codeChallengeMethod: string) : void {\r\n        if (\r\n            [\r\n                CodeChallengeMethodValues.PLAIN,\r\n                CodeChallengeMethodValues.S256\r\n            ].indexOf(codeChallengeMethod) < 0\r\n        ) {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeMethodError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes unnecessary or duplicate query parameters from extraQueryParameters\r\n     * @param request\r\n     */\r\n    static sanitizeEQParams(eQParams: StringDict, queryParams: Map<string, string>) : StringDict {\r\n        if (!eQParams) {\r\n            return {};\r\n        }\r\n\r\n        // Remove any query parameters already included in SSO params\r\n        queryParams.forEach((value, key) => {\r\n            if (eQParams[key]) {\r\n                delete eQParams[key];\r\n            }\r\n        });\r\n\r\n        return eQParams;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}