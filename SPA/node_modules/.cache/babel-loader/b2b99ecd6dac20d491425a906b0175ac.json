{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Utility functions for strings in a browser. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\r\n */\n\nvar BrowserStringUtils = function () {\n  function BrowserStringUtils() {}\n  /**\r\n   * Converts string to Uint8Array\r\n   * @param sDOMStr\r\n   */\n\n\n  BrowserStringUtils.stringToUtf8Arr = function (sDOMStr) {\n    var nChr;\n    var nArrLen = 0;\n    var nStrLen = sDOMStr.length;\n    /* mapping... */\n\n    for (var nMapIdx = 0; nMapIdx < nStrLen; nMapIdx++) {\n      nChr = sDOMStr.charCodeAt(nMapIdx);\n      nArrLen += nChr < 0x80 ? 1 : nChr < 0x800 ? 2 : nChr < 0x10000 ? 3 : nChr < 0x200000 ? 4 : nChr < 0x4000000 ? 5 : 6;\n    }\n\n    var aBytes = new Uint8Array(nArrLen);\n    /* transcription... */\n\n    for (var nIdx = 0, nChrIdx = 0; nIdx < nArrLen; nChrIdx++) {\n      nChr = sDOMStr.charCodeAt(nChrIdx);\n\n      if (nChr < 128) {\n        /* one byte */\n        aBytes[nIdx++] = nChr;\n      } else if (nChr < 0x800) {\n        /* two bytes */\n        aBytes[nIdx++] = 192 + (nChr >>> 6);\n        aBytes[nIdx++] = 128 + (nChr & 63);\n      } else if (nChr < 0x10000) {\n        /* three bytes */\n        aBytes[nIdx++] = 224 + (nChr >>> 12);\n        aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\n        aBytes[nIdx++] = 128 + (nChr & 63);\n      } else if (nChr < 0x200000) {\n        /* four bytes */\n        aBytes[nIdx++] = 240 + (nChr >>> 18);\n        aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\n        aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\n        aBytes[nIdx++] = 128 + (nChr & 63);\n      } else if (nChr < 0x4000000) {\n        /* five bytes */\n        aBytes[nIdx++] = 248 + (nChr >>> 24);\n        aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);\n        aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\n        aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\n        aBytes[nIdx++] = 128 + (nChr & 63);\n      } else\n        /* if (nChr <= 0x7fffffff) */\n        {\n          /* six bytes */\n          aBytes[nIdx++] = 252 + (nChr >>> 30);\n          aBytes[nIdx++] = 128 + (nChr >>> 24 & 63);\n          aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);\n          aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\n          aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\n          aBytes[nIdx++] = 128 + (nChr & 63);\n        }\n    }\n\n    return aBytes;\n  };\n  /**\r\n   * Converst string to ArrayBuffer\r\n   * @param dataString\r\n   */\n\n\n  BrowserStringUtils.stringToArrayBuffer = function (dataString) {\n    var data = new ArrayBuffer(dataString.length);\n    var dataView = new Uint8Array(data);\n\n    for (var i = 0; i < dataString.length; i++) {\n      dataView[i] = dataString.charCodeAt(i);\n    }\n\n    return data;\n  };\n  /**\r\n   * Converts Uint8Array to a string\r\n   * @param aBytes\r\n   */\n\n\n  BrowserStringUtils.utf8ArrToString = function (aBytes) {\n    var sView = \"\";\n\n    for (var nPart = void 0, nLen = aBytes.length, nIdx = 0; nIdx < nLen; nIdx++) {\n      nPart = aBytes[nIdx];\n      sView += String.fromCharCode(nPart > 251 && nPart < 254 && nIdx + 5 < nLen ?\n      /* six bytes */\n\n      /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */\n      (nPart - 252) * 1073741824 + (aBytes[++nIdx] - 128 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128 : nPart > 247 && nPart < 252 && nIdx + 4 < nLen ?\n      /* five bytes */\n      (nPart - 248 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128 : nPart > 239 && nPart < 248 && nIdx + 3 < nLen ?\n      /* four bytes */\n      (nPart - 240 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128 : nPart > 223 && nPart < 240 && nIdx + 2 < nLen ?\n      /* three bytes */\n      (nPart - 224 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128 : nPart > 191 && nPart < 224 && nIdx + 1 < nLen ?\n      /* two bytes */\n      (nPart - 192 << 6) + aBytes[++nIdx] - 128 :\n      /* nPart < 127 ? */\n\n      /* one byte */\n      nPart);\n    }\n\n    return sView;\n  };\n\n  return BrowserStringUtils;\n}();\n\nexport { BrowserStringUtils };","map":{"version":3,"sources":["../../src/utils/BrowserStringUtils.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\n/**\r\n * Utility functions for strings in a browser. See here for implementation details:\r\n * https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding#Solution_2_%E2%80%93_JavaScript's_UTF-16_%3E_UTF-8_%3E_base64\r\n */\r\nexport class BrowserStringUtils {\r\n\r\n    /**\r\n     * Converts string to Uint8Array\r\n     * @param sDOMStr \r\n     */\r\n    static stringToUtf8Arr (sDOMStr: string): Uint8Array {\r\n        let nChr;\r\n        let nArrLen = 0;\r\n        const nStrLen = sDOMStr.length;\r\n        /* mapping... */\r\n        for (let nMapIdx = 0; nMapIdx < nStrLen; nMapIdx++) {\r\n            nChr = sDOMStr.charCodeAt(nMapIdx);\r\n            nArrLen += nChr < 0x80 ? 1 : nChr < 0x800 ? 2 : nChr < 0x10000 ? 3 : nChr < 0x200000 ? 4 : nChr < 0x4000000 ? 5 : 6;\r\n        }\r\n\r\n        const aBytes = new Uint8Array(nArrLen);\r\n\r\n        /* transcription... */\r\n\r\n        for (let nIdx = 0, nChrIdx = 0; nIdx < nArrLen; nChrIdx++) {\r\n            nChr = sDOMStr.charCodeAt(nChrIdx);\r\n            if (nChr < 128) {\r\n                /* one byte */\r\n                aBytes[nIdx++] = nChr;\r\n            } else if (nChr < 0x800) {\r\n                /* two bytes */\r\n                aBytes[nIdx++] = 192 + (nChr >>> 6);\r\n                aBytes[nIdx++] = 128 + (nChr & 63);\r\n            } else if (nChr < 0x10000) {\r\n                /* three bytes */\r\n                aBytes[nIdx++] = 224 + (nChr >>> 12);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr & 63);\r\n            } else if (nChr < 0x200000) {\r\n                /* four bytes */\r\n                aBytes[nIdx++] = 240 + (nChr >>> 18);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr & 63);\r\n            } else if (nChr < 0x4000000) {\r\n                /* five bytes */\r\n                aBytes[nIdx++] = 248 + (nChr >>> 24);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr & 63);\r\n            } else /* if (nChr <= 0x7fffffff) */ {\r\n                /* six bytes */\r\n                aBytes[nIdx++] = 252 + (nChr >>> 30);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 24 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 18 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 12 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr >>> 6 & 63);\r\n                aBytes[nIdx++] = 128 + (nChr & 63);\r\n            }\r\n        }\r\n\r\n        return aBytes;      \r\n    }\r\n\r\n    /**\r\n     * Converst string to ArrayBuffer\r\n     * @param dataString \r\n     */\r\n    static stringToArrayBuffer(dataString: string): ArrayBuffer {\r\n        const data = new ArrayBuffer(dataString.length);\r\n        const dataView = new Uint8Array(data);\r\n        for (let i: number = 0; i < dataString.length; i++) {\r\n            dataView[i] = dataString.charCodeAt(i);\r\n        }\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Converts Uint8Array to a string\r\n     * @param aBytes \r\n     */\r\n    static utf8ArrToString (aBytes: Uint8Array): string {\r\n        let sView = \"\";\r\n        for (let nPart, nLen = aBytes.length, nIdx = 0; nIdx < nLen; nIdx++) {\r\n            nPart = aBytes[nIdx];\r\n            sView += String.fromCharCode(\r\n                nPart > 251 && nPart < 254 && nIdx + 5 < nLen ? /* six bytes */\r\n                    /* (nPart - 252 << 30) may be not so safe in ECMAScript! So...: */\r\n                    (nPart - 252) * 1073741824 + (aBytes[++nIdx] - 128 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\r\n                    : nPart > 247 && nPart < 252 && nIdx + 4 < nLen ? /* five bytes */\r\n                        (nPart - 248 << 24) + (aBytes[++nIdx] - 128 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\r\n                        : nPart > 239 && nPart < 248 && nIdx + 3 < nLen ? /* four bytes */\r\n                            (nPart - 240 << 18) + (aBytes[++nIdx] - 128 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\r\n                            : nPart > 223 && nPart < 240 && nIdx + 2 < nLen ? /* three bytes */\r\n                                (nPart - 224 << 12) + (aBytes[++nIdx] - 128 << 6) + aBytes[++nIdx] - 128\r\n                                : nPart > 191 && nPart < 224 && nIdx + 1 < nLen ? /* two bytes */\r\n                                    (nPart - 192 << 6) + aBytes[++nIdx] - 128\r\n                                    : /* nPart < 127 ? */ /* one byte */\r\n                                    nPart\r\n            );\r\n        }\r\n        return sView;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}