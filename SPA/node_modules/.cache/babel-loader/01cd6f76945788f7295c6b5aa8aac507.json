{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nimport * as tslib_1 from \"tslib\";\nimport { GraphErrorHandler } from \"./GraphErrorHandler\";\nimport { oDataQueryNames, serializeContent, urlJoin } from \"./GraphRequestUtil\";\nimport { GraphResponseHandler } from \"./GraphResponseHandler\";\nimport { MiddlewareControl } from \"./middleware/MiddlewareControl\";\nimport { RequestMethod } from \"./RequestMethod\";\nimport { ResponseType } from \"./ResponseType\";\n/**\r\n * @class\r\n * A Class representing GraphRequest\r\n */\n\nexport class GraphRequest {\n  /* tslint:enable: variable-name */\n\n  /**\r\n   * @public\r\n   * @constructor\r\n   * Creates an instance of GraphRequest\r\n   * @param {HTTPClient} httpClient - The HTTPClient instance\r\n   * @param {ClientOptions} config - The options for making request\r\n   * @param {string} path - A path string\r\n   */\n  constructor(httpClient, config, path) {\n    /**\r\n     * @private\r\n     * Parses the path string and creates URLComponents out of it\r\n     * @param {string} path - The request path string\r\n     * @returns Nothing\r\n     */\n    this.parsePath = path => {\n      // Strips out the base of the url if they passed in\n      if (path.indexOf(\"https://\") !== -1) {\n        path = path.replace(\"https://\", \"\"); // Find where the host ends\n\n        const endOfHostStrPos = path.indexOf(\"/\");\n\n        if (endOfHostStrPos !== -1) {\n          // Parse out the host\n          this.urlComponents.host = \"https://\" + path.substring(0, endOfHostStrPos); // Strip the host from path\n\n          path = path.substring(endOfHostStrPos + 1, path.length);\n        } // Remove the following version\n\n\n        const endOfVersionStrPos = path.indexOf(\"/\");\n\n        if (endOfVersionStrPos !== -1) {\n          // Parse out the version\n          this.urlComponents.version = path.substring(0, endOfVersionStrPos); // Strip version from path\n\n          path = path.substring(endOfVersionStrPos + 1, path.length);\n        }\n      } // Strip out any leading \"/\"\n\n\n      if (path.charAt(0) === \"/\") {\n        path = path.substr(1);\n      }\n\n      const queryStrPos = path.indexOf(\"?\");\n\n      if (queryStrPos === -1) {\n        // No query string\n        this.urlComponents.path = path;\n      } else {\n        this.urlComponents.path = path.substr(0, queryStrPos); // Capture query string into oDataQueryParams and otherURLQueryParams\n\n        const queryParams = path.substring(queryStrPos + 1, path.length).split(\"&\");\n\n        for (const queryParam of queryParams) {\n          this.parseQueryParameter(queryParam);\n        }\n      }\n    };\n\n    this.httpClient = httpClient;\n    this.config = config;\n    this.urlComponents = {\n      host: this.config.baseUrl,\n      version: this.config.defaultVersion,\n      oDataQueryParams: {},\n      otherURLQueryParams: {},\n      otherURLQueryOptions: []\n    };\n    this._headers = {};\n    this._options = {};\n    this._middlewareOptions = [];\n    this.parsePath(path);\n  }\n  /**\r\n   * @private\r\n   * Adds the query parameter as comma separated values\r\n   * @param {string} propertyName - The name of a property\r\n   * @param {string|string[]} propertyValue - The vale of a property\r\n   * @param {IArguments} additionalProperties - The additional properties\r\n   * @returns Nothing\r\n   */\n\n\n  addCsvQueryParameter(propertyName, propertyValue, additionalProperties) {\n    // If there are already $propertyName value there, append a \",\"\n    this.urlComponents.oDataQueryParams[propertyName] = this.urlComponents.oDataQueryParams[propertyName] ? this.urlComponents.oDataQueryParams[propertyName] + \",\" : \"\";\n    let allValues = [];\n\n    if (additionalProperties.length > 1 && typeof propertyValue === \"string\") {\n      allValues = Array.prototype.slice.call(additionalProperties);\n    } else if (typeof propertyValue === \"string\") {\n      allValues.push(propertyValue);\n    } else {\n      allValues = allValues.concat(propertyValue);\n    }\n\n    this.urlComponents.oDataQueryParams[propertyName] += allValues.join(\",\");\n  }\n  /**\r\n   * @private\r\n   * Builds the full url from the URLComponents to make a request\r\n   * @returns The URL string that is qualified to make a request to graph endpoint\r\n   */\n\n\n  buildFullUrl() {\n    const url = urlJoin([this.urlComponents.host, this.urlComponents.version, this.urlComponents.path]) + this.createQueryString();\n\n    if (this.config.debugLogging) {\n      console.log(url); // tslint:disable-line: no-console\n    }\n\n    return url;\n  }\n  /**\r\n   * @private\r\n   * Builds the query string from the URLComponents\r\n   * @returns The Constructed query string\r\n   */\n\n\n  createQueryString() {\n    // Combining query params from oDataQueryParams and otherURLQueryParams\n    const urlComponents = this.urlComponents;\n    const query = [];\n\n    if (Object.keys(urlComponents.oDataQueryParams).length !== 0) {\n      for (const property in urlComponents.oDataQueryParams) {\n        if (urlComponents.oDataQueryParams.hasOwnProperty(property)) {\n          query.push(property + \"=\" + urlComponents.oDataQueryParams[property]);\n        }\n      }\n    }\n\n    if (Object.keys(urlComponents.otherURLQueryParams).length !== 0) {\n      for (const property in urlComponents.otherURLQueryParams) {\n        if (urlComponents.otherURLQueryParams.hasOwnProperty(property)) {\n          query.push(property + \"=\" + urlComponents.otherURLQueryParams[property]);\n        }\n      }\n    }\n\n    if (urlComponents.otherURLQueryOptions.length !== 0) {\n      for (const str of urlComponents.otherURLQueryOptions) {\n        query.push(str);\n      }\n    }\n\n    return query.length > 0 ? \"?\" + query.join(\"&\") : \"\";\n  }\n  /**\r\n   * @private\r\n   * Parses the query parameters to set the urlComponents property of the GraphRequest object\r\n   * @param {string|KeyValuePairObjectStringNumber} queryDictionaryOrString - The query parameter\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  parseQueryParameter(queryDictionaryOrString) {\n    if (typeof queryDictionaryOrString === \"string\") {\n      if (queryDictionaryOrString.charAt(0) === \"?\") {\n        queryDictionaryOrString = queryDictionaryOrString.substring(1);\n      }\n\n      if (queryDictionaryOrString.indexOf(\"&\") !== -1) {\n        const queryParams = queryDictionaryOrString.split(\"&\");\n\n        for (const str of queryParams) {\n          this.parseQueryParamenterString(str);\n        }\n      } else {\n        this.parseQueryParamenterString(queryDictionaryOrString);\n      }\n    } else if (queryDictionaryOrString.constructor === Object) {\n      for (const key in queryDictionaryOrString) {\n        if (queryDictionaryOrString.hasOwnProperty(key)) {\n          this.setURLComponentsQueryParamater(key, queryDictionaryOrString[key]);\n        }\n      }\n    }\n\n    return this;\n  }\n  /**\r\n   * @private\r\n   * Parses the query parameter of string type to set the urlComponents property of the GraphRequest object\r\n   * @param {string} queryParameter - the query parameters\r\n   * returns nothing\r\n   */\n\n\n  parseQueryParamenterString(queryParameter) {\n    /* The query key-value pair must be split on the first equals sign to avoid errors in parsing nested query parameters.\r\n             Example-> \"/me?$expand=home($select=city)\" */\n    if (this.isValidQueryKeyValuePair(queryParameter)) {\n      const indexOfFirstEquals = queryParameter.indexOf(\"=\");\n      const paramKey = queryParameter.substring(0, indexOfFirstEquals);\n      const paramValue = queryParameter.substring(indexOfFirstEquals + 1);\n      this.setURLComponentsQueryParamater(paramKey, paramValue);\n    } else {\n      /* Push values which are not of key-value structure.\r\n      Example-> Handle an invalid input->.query(test), .query($select($select=name)) and let the Graph API respond with the error in the URL*/\n      this.urlComponents.otherURLQueryOptions.push(queryParameter);\n    }\n  }\n  /**\r\n   * @private\r\n   * Sets values into the urlComponents property of GraphRequest object.\r\n   * @param {string} paramKey - the query parameter key\r\n   * @param {string} paramValue - the query paramter value\r\n   * @returns nothing\r\n   */\n\n\n  setURLComponentsQueryParamater(paramKey, paramValue) {\n    if (oDataQueryNames.indexOf(paramKey) !== -1) {\n      const currentValue = this.urlComponents.oDataQueryParams[paramKey];\n      const isValueAppendable = currentValue && (paramKey === \"$expand\" || paramKey === \"$select\" || paramKey === \"$orderby\");\n      this.urlComponents.oDataQueryParams[paramKey] = isValueAppendable ? currentValue + \",\" + paramValue : paramValue;\n    } else {\n      this.urlComponents.otherURLQueryParams[paramKey] = paramValue;\n    }\n  }\n  /**\r\n   * @private\r\n   * Check if the query parameter string has a valid key-value structure\r\n   * @param {string} queryString - the query parameter string. Example -> \"name=value\"\r\n   * #returns true if the query string has a valid key-value structure else false\r\n   */\n\n\n  isValidQueryKeyValuePair(queryString) {\n    const indexofFirstEquals = queryString.indexOf(\"=\");\n\n    if (indexofFirstEquals === -1) {\n      return false;\n    }\n\n    const indexofOpeningParanthesis = queryString.indexOf(\"(\");\n\n    if (indexofOpeningParanthesis !== -1 && queryString.indexOf(\"(\") < indexofFirstEquals) {\n      // Example -> .query($select($expand=true));\n      return false;\n    }\n\n    return true;\n  }\n  /**\r\n   * @private\r\n   * Updates the custom headers and options for a request\r\n   * @param {FetchOptions} options - The request options object\r\n   * @returns Nothing\r\n   */\n\n\n  updateRequestOptions(options) {\n    const optionsHeaders = Object.assign({}, options.headers);\n\n    if (this.config.fetchOptions !== undefined) {\n      const fetchOptions = Object.assign({}, this.config.fetchOptions);\n      Object.assign(options, fetchOptions);\n\n      if (typeof this.config.fetchOptions.headers !== undefined) {\n        options.headers = Object.assign({}, this.config.fetchOptions.headers);\n      }\n    }\n\n    Object.assign(options, this._options);\n\n    if (options.headers !== undefined) {\n      Object.assign(optionsHeaders, options.headers);\n    }\n\n    Object.assign(optionsHeaders, this._headers);\n    options.headers = optionsHeaders;\n  }\n  /**\r\n   * @private\r\n   * @async\r\n   * Adds the custom headers and options to the request and makes the HTTPClient send request call\r\n   * @param {RequestInfo} request - The request url string or the Request object value\r\n   * @param {FetchOptions} options - The options to make a request\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the response content\r\n   */\n\n\n  send(request, options, callback) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      let rawResponse;\n      const middlewareControl = new MiddlewareControl(this._middlewareOptions);\n      this.updateRequestOptions(options);\n\n      try {\n        const context = yield this.httpClient.sendRequest({\n          request,\n          options,\n          middlewareControl\n        });\n        rawResponse = context.response;\n        const response = yield GraphResponseHandler.getResponse(rawResponse, this._responseType, callback);\n        return response;\n      } catch (error) {\n        let statusCode;\n\n        if (typeof rawResponse !== \"undefined\") {\n          statusCode = rawResponse.status;\n        }\n\n        const gError = yield GraphErrorHandler.getError(error, statusCode, callback);\n        throw gError;\n      }\n    });\n  }\n  /**\r\n   * @private\r\n   * Checks if the content-type is present in the _headers property. If not present, defaults the content-type to application/json\r\n   * @param none\r\n   * @returns nothing\r\n   */\n\n\n  setHeaderContentType() {\n    if (!this._headers) {\n      this.header(\"Content-Type\", \"application/json\");\n      return;\n    }\n\n    const headerKeys = Object.keys(this._headers);\n\n    for (const headerKey of headerKeys) {\n      if (headerKey.toLowerCase() === \"content-type\") {\n        return;\n      }\n    } // Default the content-type to application/json in case the content-type is not present in the header\n\n\n    this.header(\"Content-Type\", \"application/json\");\n  }\n  /**\r\n   * @public\r\n   * Sets the custom header for a request\r\n   * @param {string} headerKey - A header key\r\n   * @param {string} headerValue - A header value\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  header(headerKey, headerValue) {\n    this._headers[headerKey] = headerValue;\n    return this;\n  }\n  /**\r\n   * @public\r\n   * Sets the custom headers for a request\r\n   * @param {KeyValuePairObjectStringNumber | HeadersInit} headers - The request headers\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  headers(headers) {\n    for (const key in headers) {\n      if (headers.hasOwnProperty(key)) {\n        this._headers[key] = headers[key];\n      }\n    }\n\n    return this;\n  }\n  /**\r\n   * @public\r\n   * Sets the option for making a request\r\n   * @param {string} key - The key value\r\n   * @param {any} value - The value\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  option(key, value) {\n    this._options[key] = value;\n    return this;\n  }\n  /**\r\n   * @public\r\n   * Sets the options for making a request\r\n   * @param {{ [key: string]: any }} options - The options key value pair\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  options(options) {\n    for (const key in options) {\n      if (options.hasOwnProperty(key)) {\n        this._options[key] = options[key];\n      }\n    }\n\n    return this;\n  }\n  /**\r\n   * @public\r\n   * Sets the middleware options for a request\r\n   * @param {MiddlewareOptions[]} options - The array of middleware options\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  middlewareOptions(options) {\n    this._middlewareOptions = options;\n    return this;\n  }\n  /**\r\n   * @public\r\n   * Sets the api endpoint version for a request\r\n   * @param {string} version - The version value\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  version(version) {\n    this.urlComponents.version = version;\n    return this;\n  }\n  /**\r\n   * @public\r\n   * Sets the api endpoint version for a request\r\n   * @param {ResponseType} responseType - The response type value\r\n   * @returns The same GraphRequest instance that is being called with\r\n   */\n\n\n  responseType(responseType) {\n    this._responseType = responseType;\n    return this;\n  }\n  /**\r\n   * @public\r\n   * To add properties for select OData Query param\r\n   * @param {string|string[]} properties - The Properties value\r\n   * @returns The same GraphRequest instance that is being called with, after adding the properties for $select query\r\n   */\n\n  /*\r\n   * Accepts .select(\"displayName,birthday\")\r\n   *     and .select([\"displayName\", \"birthday\"])\r\n   *     and .select(\"displayName\", \"birthday\")\r\n   *\r\n   */\n\n\n  select(properties) {\n    this.addCsvQueryParameter(\"$select\", properties, arguments);\n    return this;\n  }\n  /**\r\n   * @public\r\n   * To add properties for expand OData Query param\r\n   * @param {string|string[]} properties - The Properties value\r\n   * @returns The same GraphRequest instance that is being called with, after adding the properties for $expand query\r\n   */\n\n\n  expand(properties) {\n    this.addCsvQueryParameter(\"$expand\", properties, arguments);\n    return this;\n  }\n  /**\r\n   * @public\r\n   * To add properties for orderby OData Query param\r\n   * @param {string|string[]} properties - The Properties value\r\n   * @returns The same GraphRequest instance that is being called with, after adding the properties for $orderby query\r\n   */\n\n\n  orderby(properties) {\n    this.addCsvQueryParameter(\"$orderby\", properties, arguments);\n    return this;\n  }\n  /**\r\n   * @public\r\n   * To add query string for filter OData Query param. The request URL accepts only one $filter Odata Query option and its value is set to the most recently passed filter query string.\r\n   * @param {string} filterStr - The filter query string\r\n   * @returns The same GraphRequest instance that is being called with, after adding the $filter query\r\n   */\n\n\n  filter(filterStr) {\n    this.urlComponents.oDataQueryParams.$filter = filterStr;\n    return this;\n  }\n  /**\r\n   * @public\r\n   * To add criterion for search OData Query param. The request URL accepts only one $search Odata Query option and its value is set to the most recently passed search criterion string.\r\n   * @param {string} searchStr - The search criterion string\r\n   * @returns The same GraphRequest instance that is being called with, after adding the $search query criteria\r\n   */\n\n\n  search(searchStr) {\n    this.urlComponents.oDataQueryParams.$search = searchStr;\n    return this;\n  }\n  /**\r\n   * @public\r\n   * To add number for top OData Query param. The request URL accepts only one $top Odata Query option and its value is set to the most recently passed number value.\r\n   * @param {number} n - The number value\r\n   * @returns The same GraphRequest instance that is being called with, after adding the number for $top query\r\n   */\n\n\n  top(n) {\n    this.urlComponents.oDataQueryParams.$top = n;\n    return this;\n  }\n  /**\r\n   * @public\r\n   * To add number for skip OData Query param. The request URL accepts only one $skip Odata Query option and its value is set to the most recently passed number value.\r\n   * @param {number} n - The number value\r\n   * @returns The same GraphRequest instance that is being called with, after adding the number for the $skip query\r\n   */\n\n\n  skip(n) {\n    this.urlComponents.oDataQueryParams.$skip = n;\n    return this;\n  }\n  /**\r\n   * @public\r\n   * To add token string for skipToken OData Query param. The request URL accepts only one $skipToken Odata Query option and its value is set to the most recently passed token value.\r\n   * @param {string} token - The token value\r\n   * @returns The same GraphRequest instance that is being called with, after adding the token string for $skipToken query option\r\n   */\n\n\n  skipToken(token) {\n    this.urlComponents.oDataQueryParams.$skipToken = token;\n    return this;\n  }\n  /**\r\n   * @public\r\n   * To add boolean for count OData Query param. The URL accepts only one $count Odata Query option and its value is set to the most recently passed boolean value.\r\n   * @param {boolean} isCount - The count boolean\r\n   * @returns The same GraphRequest instance that is being called with, after adding the boolean value for the $count query option\r\n   */\n\n\n  count(isCount = false) {\n    this.urlComponents.oDataQueryParams.$count = isCount.toString();\n    return this;\n  }\n  /**\r\n   * @public\r\n   * Appends query string to the urlComponent\r\n   * @param {string|KeyValuePairObjectStringNumber} queryDictionaryOrString - The query value\r\n   * @returns The same GraphRequest instance that is being called with, after appending the query string to the url component\r\n   */\n\n  /*\r\n   * Accepts .query(\"displayName=xyz\")\r\n   *     and .select({ name: \"value\" })\r\n   */\n\n\n  query(queryDictionaryOrString) {\n    return this.parseQueryParameter(queryDictionaryOrString);\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Makes a http request with GET method\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the get response\r\n   */\n\n\n  get(callback) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      const options = {\n        method: RequestMethod.GET\n      };\n\n      try {\n        const response = yield this.send(url, options, callback);\n        return response;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Makes a http request with POST method\r\n   * @param {any} content - The content that needs to be sent with the request\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the post response\r\n   */\n\n\n  post(content, callback) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      const options = {\n        method: RequestMethod.POST,\n        body: serializeContent(content)\n      };\n      const className = content && content.constructor && content.constructor.name;\n\n      if (className === \"FormData\") {\n        // Content-Type headers should not be specified in case the of FormData type content\n        options.headers = {};\n      } else {\n        this.setHeaderContentType();\n        options.headers = this._headers;\n      }\n\n      try {\n        const response = yield this.send(url, options, callback);\n        return response;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Alias for Post request call\r\n   * @param {any} content - The content that needs to be sent with the request\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the post response\r\n   */\n\n\n  create(content, callback) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield this.post(content, callback);\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Makes http request with PUT method\r\n   * @param {any} content - The content that needs to be sent with the request\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the put response\r\n   */\n\n\n  put(content, callback) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      this.setHeaderContentType();\n      const options = {\n        method: RequestMethod.PUT,\n        body: serializeContent(content)\n      };\n\n      try {\n        const response = yield this.send(url, options, callback);\n        return response;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Makes http request with PATCH method\r\n   * @param {any} content - The content that needs to be sent with the request\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the patch response\r\n   */\n\n\n  patch(content, callback) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      this.setHeaderContentType();\n      const options = {\n        method: RequestMethod.PATCH,\n        body: serializeContent(content)\n      };\n\n      try {\n        const response = yield this.send(url, options, callback);\n        return response;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Alias for PATCH request\r\n   * @param {any} content - The content that needs to be sent with the request\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the patch response\r\n   */\n\n\n  update(content, callback) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield this.patch(content, callback);\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Makes http request with DELETE method\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the delete response\r\n   */\n\n\n  delete(callback) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      const options = {\n        method: RequestMethod.DELETE\n      };\n\n      try {\n        const response = yield this.send(url, options, callback);\n        return response;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Alias for delete request call\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the delete response\r\n   */\n\n\n  del(callback) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      try {\n        return yield this.delete(callback);\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Makes a http request with GET method to read response as a stream.\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the getStream response\r\n   */\n\n\n  getStream(callback) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      const options = {\n        method: RequestMethod.GET\n      };\n      this.responseType(ResponseType.STREAM);\n\n      try {\n        const stream = yield this.send(url, options, callback);\n        return stream;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * Makes a http request with GET method to read response as a stream.\r\n   * @param {any} stream - The stream instance\r\n   * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n   * @returns A promise that resolves to the putStream response\r\n   */\n\n\n  putStream(stream, callback) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const url = this.buildFullUrl();\n      const options = {\n        method: RequestMethod.PUT,\n        headers: {\n          \"Content-Type\": \"application/octet-stream\"\n        },\n        body: stream\n      };\n\n      try {\n        const response = yield this.send(url, options, callback);\n        return response;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["../../src/GraphRequest.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { GraphErrorHandler } from \"./GraphErrorHandler\";\r\nimport { oDataQueryNames, serializeContent, urlJoin } from \"./GraphRequestUtil\";\r\nimport { GraphResponseHandler } from \"./GraphResponseHandler\";\r\nimport { MiddlewareControl } from \"./middleware/MiddlewareControl\";\r\nimport { RequestMethod } from \"./RequestMethod\";\r\nimport { ResponseType } from \"./ResponseType\";\r\n/**\r\n * @class\r\n * A Class representing GraphRequest\r\n */\r\nexport class GraphRequest {\r\n    /* tslint:enable: variable-name */\r\n    /**\r\n     * @public\r\n     * @constructor\r\n     * Creates an instance of GraphRequest\r\n     * @param {HTTPClient} httpClient - The HTTPClient instance\r\n     * @param {ClientOptions} config - The options for making request\r\n     * @param {string} path - A path string\r\n     */\r\n    constructor(httpClient, config, path) {\r\n        /**\r\n         * @private\r\n         * Parses the path string and creates URLComponents out of it\r\n         * @param {string} path - The request path string\r\n         * @returns Nothing\r\n         */\r\n        this.parsePath = (path) => {\r\n            // Strips out the base of the url if they passed in\r\n            if (path.indexOf(\"https://\") !== -1) {\r\n                path = path.replace(\"https://\", \"\");\r\n                // Find where the host ends\r\n                const endOfHostStrPos = path.indexOf(\"/\");\r\n                if (endOfHostStrPos !== -1) {\r\n                    // Parse out the host\r\n                    this.urlComponents.host = \"https://\" + path.substring(0, endOfHostStrPos);\r\n                    // Strip the host from path\r\n                    path = path.substring(endOfHostStrPos + 1, path.length);\r\n                }\r\n                // Remove the following version\r\n                const endOfVersionStrPos = path.indexOf(\"/\");\r\n                if (endOfVersionStrPos !== -1) {\r\n                    // Parse out the version\r\n                    this.urlComponents.version = path.substring(0, endOfVersionStrPos);\r\n                    // Strip version from path\r\n                    path = path.substring(endOfVersionStrPos + 1, path.length);\r\n                }\r\n            }\r\n            // Strip out any leading \"/\"\r\n            if (path.charAt(0) === \"/\") {\r\n                path = path.substr(1);\r\n            }\r\n            const queryStrPos = path.indexOf(\"?\");\r\n            if (queryStrPos === -1) {\r\n                // No query string\r\n                this.urlComponents.path = path;\r\n            }\r\n            else {\r\n                this.urlComponents.path = path.substr(0, queryStrPos);\r\n                // Capture query string into oDataQueryParams and otherURLQueryParams\r\n                const queryParams = path.substring(queryStrPos + 1, path.length).split(\"&\");\r\n                for (const queryParam of queryParams) {\r\n                    this.parseQueryParameter(queryParam);\r\n                }\r\n            }\r\n        };\r\n        this.httpClient = httpClient;\r\n        this.config = config;\r\n        this.urlComponents = {\r\n            host: this.config.baseUrl,\r\n            version: this.config.defaultVersion,\r\n            oDataQueryParams: {},\r\n            otherURLQueryParams: {},\r\n            otherURLQueryOptions: [],\r\n        };\r\n        this._headers = {};\r\n        this._options = {};\r\n        this._middlewareOptions = [];\r\n        this.parsePath(path);\r\n    }\r\n    /**\r\n     * @private\r\n     * Adds the query parameter as comma separated values\r\n     * @param {string} propertyName - The name of a property\r\n     * @param {string|string[]} propertyValue - The vale of a property\r\n     * @param {IArguments} additionalProperties - The additional properties\r\n     * @returns Nothing\r\n     */\r\n    addCsvQueryParameter(propertyName, propertyValue, additionalProperties) {\r\n        // If there are already $propertyName value there, append a \",\"\r\n        this.urlComponents.oDataQueryParams[propertyName] = this.urlComponents.oDataQueryParams[propertyName] ? this.urlComponents.oDataQueryParams[propertyName] + \",\" : \"\";\r\n        let allValues = [];\r\n        if (additionalProperties.length > 1 && typeof propertyValue === \"string\") {\r\n            allValues = Array.prototype.slice.call(additionalProperties);\r\n        }\r\n        else if (typeof propertyValue === \"string\") {\r\n            allValues.push(propertyValue);\r\n        }\r\n        else {\r\n            allValues = allValues.concat(propertyValue);\r\n        }\r\n        this.urlComponents.oDataQueryParams[propertyName] += allValues.join(\",\");\r\n    }\r\n    /**\r\n     * @private\r\n     * Builds the full url from the URLComponents to make a request\r\n     * @returns The URL string that is qualified to make a request to graph endpoint\r\n     */\r\n    buildFullUrl() {\r\n        const url = urlJoin([this.urlComponents.host, this.urlComponents.version, this.urlComponents.path]) + this.createQueryString();\r\n        if (this.config.debugLogging) {\r\n            console.log(url); // tslint:disable-line: no-console\r\n        }\r\n        return url;\r\n    }\r\n    /**\r\n     * @private\r\n     * Builds the query string from the URLComponents\r\n     * @returns The Constructed query string\r\n     */\r\n    createQueryString() {\r\n        // Combining query params from oDataQueryParams and otherURLQueryParams\r\n        const urlComponents = this.urlComponents;\r\n        const query = [];\r\n        if (Object.keys(urlComponents.oDataQueryParams).length !== 0) {\r\n            for (const property in urlComponents.oDataQueryParams) {\r\n                if (urlComponents.oDataQueryParams.hasOwnProperty(property)) {\r\n                    query.push(property + \"=\" + urlComponents.oDataQueryParams[property]);\r\n                }\r\n            }\r\n        }\r\n        if (Object.keys(urlComponents.otherURLQueryParams).length !== 0) {\r\n            for (const property in urlComponents.otherURLQueryParams) {\r\n                if (urlComponents.otherURLQueryParams.hasOwnProperty(property)) {\r\n                    query.push(property + \"=\" + urlComponents.otherURLQueryParams[property]);\r\n                }\r\n            }\r\n        }\r\n        if (urlComponents.otherURLQueryOptions.length !== 0) {\r\n            for (const str of urlComponents.otherURLQueryOptions) {\r\n                query.push(str);\r\n            }\r\n        }\r\n        return query.length > 0 ? \"?\" + query.join(\"&\") : \"\";\r\n    }\r\n    /**\r\n     * @private\r\n     * Parses the query parameters to set the urlComponents property of the GraphRequest object\r\n     * @param {string|KeyValuePairObjectStringNumber} queryDictionaryOrString - The query parameter\r\n     * @returns The same GraphRequest instance that is being called with\r\n     */\r\n    parseQueryParameter(queryDictionaryOrString) {\r\n        if (typeof queryDictionaryOrString === \"string\") {\r\n            if (queryDictionaryOrString.charAt(0) === \"?\") {\r\n                queryDictionaryOrString = queryDictionaryOrString.substring(1);\r\n            }\r\n            if (queryDictionaryOrString.indexOf(\"&\") !== -1) {\r\n                const queryParams = queryDictionaryOrString.split(\"&\");\r\n                for (const str of queryParams) {\r\n                    this.parseQueryParamenterString(str);\r\n                }\r\n            }\r\n            else {\r\n                this.parseQueryParamenterString(queryDictionaryOrString);\r\n            }\r\n        }\r\n        else if (queryDictionaryOrString.constructor === Object) {\r\n            for (const key in queryDictionaryOrString) {\r\n                if (queryDictionaryOrString.hasOwnProperty(key)) {\r\n                    this.setURLComponentsQueryParamater(key, queryDictionaryOrString[key]);\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * @private\r\n     * Parses the query parameter of string type to set the urlComponents property of the GraphRequest object\r\n     * @param {string} queryParameter - the query parameters\r\n     * returns nothing\r\n     */\r\n    parseQueryParamenterString(queryParameter) {\r\n        /* The query key-value pair must be split on the first equals sign to avoid errors in parsing nested query parameters.\r\n                 Example-> \"/me?$expand=home($select=city)\" */\r\n        if (this.isValidQueryKeyValuePair(queryParameter)) {\r\n            const indexOfFirstEquals = queryParameter.indexOf(\"=\");\r\n            const paramKey = queryParameter.substring(0, indexOfFirstEquals);\r\n            const paramValue = queryParameter.substring(indexOfFirstEquals + 1);\r\n            this.setURLComponentsQueryParamater(paramKey, paramValue);\r\n        }\r\n        else {\r\n            /* Push values which are not of key-value structure.\r\n            Example-> Handle an invalid input->.query(test), .query($select($select=name)) and let the Graph API respond with the error in the URL*/\r\n            this.urlComponents.otherURLQueryOptions.push(queryParameter);\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * Sets values into the urlComponents property of GraphRequest object.\r\n     * @param {string} paramKey - the query parameter key\r\n     * @param {string} paramValue - the query paramter value\r\n     * @returns nothing\r\n     */\r\n    setURLComponentsQueryParamater(paramKey, paramValue) {\r\n        if (oDataQueryNames.indexOf(paramKey) !== -1) {\r\n            const currentValue = this.urlComponents.oDataQueryParams[paramKey];\r\n            const isValueAppendable = currentValue && (paramKey === \"$expand\" || paramKey === \"$select\" || paramKey === \"$orderby\");\r\n            this.urlComponents.oDataQueryParams[paramKey] = isValueAppendable ? currentValue + \",\" + paramValue : paramValue;\r\n        }\r\n        else {\r\n            this.urlComponents.otherURLQueryParams[paramKey] = paramValue;\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * Check if the query parameter string has a valid key-value structure\r\n     * @param {string} queryString - the query parameter string. Example -> \"name=value\"\r\n     * #returns true if the query string has a valid key-value structure else false\r\n     */\r\n    isValidQueryKeyValuePair(queryString) {\r\n        const indexofFirstEquals = queryString.indexOf(\"=\");\r\n        if (indexofFirstEquals === -1) {\r\n            return false;\r\n        }\r\n        const indexofOpeningParanthesis = queryString.indexOf(\"(\");\r\n        if (indexofOpeningParanthesis !== -1 && queryString.indexOf(\"(\") < indexofFirstEquals) {\r\n            // Example -> .query($select($expand=true));\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * @private\r\n     * Updates the custom headers and options for a request\r\n     * @param {FetchOptions} options - The request options object\r\n     * @returns Nothing\r\n     */\r\n    updateRequestOptions(options) {\r\n        const optionsHeaders = Object.assign({}, options.headers);\r\n        if (this.config.fetchOptions !== undefined) {\r\n            const fetchOptions = Object.assign({}, this.config.fetchOptions);\r\n            Object.assign(options, fetchOptions);\r\n            if (typeof this.config.fetchOptions.headers !== undefined) {\r\n                options.headers = Object.assign({}, this.config.fetchOptions.headers);\r\n            }\r\n        }\r\n        Object.assign(options, this._options);\r\n        if (options.headers !== undefined) {\r\n            Object.assign(optionsHeaders, options.headers);\r\n        }\r\n        Object.assign(optionsHeaders, this._headers);\r\n        options.headers = optionsHeaders;\r\n    }\r\n    /**\r\n     * @private\r\n     * @async\r\n     * Adds the custom headers and options to the request and makes the HTTPClient send request call\r\n     * @param {RequestInfo} request - The request url string or the Request object value\r\n     * @param {FetchOptions} options - The options to make a request\r\n     * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n     * @returns A promise that resolves to the response content\r\n     */\r\n    send(request, options, callback) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            let rawResponse;\r\n            const middlewareControl = new MiddlewareControl(this._middlewareOptions);\r\n            this.updateRequestOptions(options);\r\n            try {\r\n                const context = yield this.httpClient.sendRequest({\r\n                    request,\r\n                    options,\r\n                    middlewareControl,\r\n                });\r\n                rawResponse = context.response;\r\n                const response = yield GraphResponseHandler.getResponse(rawResponse, this._responseType, callback);\r\n                return response;\r\n            }\r\n            catch (error) {\r\n                let statusCode;\r\n                if (typeof rawResponse !== \"undefined\") {\r\n                    statusCode = rawResponse.status;\r\n                }\r\n                const gError = yield GraphErrorHandler.getError(error, statusCode, callback);\r\n                throw gError;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @private\r\n     * Checks if the content-type is present in the _headers property. If not present, defaults the content-type to application/json\r\n     * @param none\r\n     * @returns nothing\r\n     */\r\n    setHeaderContentType() {\r\n        if (!this._headers) {\r\n            this.header(\"Content-Type\", \"application/json\");\r\n            return;\r\n        }\r\n        const headerKeys = Object.keys(this._headers);\r\n        for (const headerKey of headerKeys) {\r\n            if (headerKey.toLowerCase() === \"content-type\") {\r\n                return;\r\n            }\r\n        }\r\n        // Default the content-type to application/json in case the content-type is not present in the header\r\n        this.header(\"Content-Type\", \"application/json\");\r\n    }\r\n    /**\r\n     * @public\r\n     * Sets the custom header for a request\r\n     * @param {string} headerKey - A header key\r\n     * @param {string} headerValue - A header value\r\n     * @returns The same GraphRequest instance that is being called with\r\n     */\r\n    header(headerKey, headerValue) {\r\n        this._headers[headerKey] = headerValue;\r\n        return this;\r\n    }\r\n    /**\r\n     * @public\r\n     * Sets the custom headers for a request\r\n     * @param {KeyValuePairObjectStringNumber | HeadersInit} headers - The request headers\r\n     * @returns The same GraphRequest instance that is being called with\r\n     */\r\n    headers(headers) {\r\n        for (const key in headers) {\r\n            if (headers.hasOwnProperty(key)) {\r\n                this._headers[key] = headers[key];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * @public\r\n     * Sets the option for making a request\r\n     * @param {string} key - The key value\r\n     * @param {any} value - The value\r\n     * @returns The same GraphRequest instance that is being called with\r\n     */\r\n    option(key, value) {\r\n        this._options[key] = value;\r\n        return this;\r\n    }\r\n    /**\r\n     * @public\r\n     * Sets the options for making a request\r\n     * @param {{ [key: string]: any }} options - The options key value pair\r\n     * @returns The same GraphRequest instance that is being called with\r\n     */\r\n    options(options) {\r\n        for (const key in options) {\r\n            if (options.hasOwnProperty(key)) {\r\n                this._options[key] = options[key];\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * @public\r\n     * Sets the middleware options for a request\r\n     * @param {MiddlewareOptions[]} options - The array of middleware options\r\n     * @returns The same GraphRequest instance that is being called with\r\n     */\r\n    middlewareOptions(options) {\r\n        this._middlewareOptions = options;\r\n        return this;\r\n    }\r\n    /**\r\n     * @public\r\n     * Sets the api endpoint version for a request\r\n     * @param {string} version - The version value\r\n     * @returns The same GraphRequest instance that is being called with\r\n     */\r\n    version(version) {\r\n        this.urlComponents.version = version;\r\n        return this;\r\n    }\r\n    /**\r\n     * @public\r\n     * Sets the api endpoint version for a request\r\n     * @param {ResponseType} responseType - The response type value\r\n     * @returns The same GraphRequest instance that is being called with\r\n     */\r\n    responseType(responseType) {\r\n        this._responseType = responseType;\r\n        return this;\r\n    }\r\n    /**\r\n     * @public\r\n     * To add properties for select OData Query param\r\n     * @param {string|string[]} properties - The Properties value\r\n     * @returns The same GraphRequest instance that is being called with, after adding the properties for $select query\r\n     */\r\n    /*\r\n     * Accepts .select(\"displayName,birthday\")\r\n     *     and .select([\"displayName\", \"birthday\"])\r\n     *     and .select(\"displayName\", \"birthday\")\r\n     *\r\n     */\r\n    select(properties) {\r\n        this.addCsvQueryParameter(\"$select\", properties, arguments);\r\n        return this;\r\n    }\r\n    /**\r\n     * @public\r\n     * To add properties for expand OData Query param\r\n     * @param {string|string[]} properties - The Properties value\r\n     * @returns The same GraphRequest instance that is being called with, after adding the properties for $expand query\r\n     */\r\n    expand(properties) {\r\n        this.addCsvQueryParameter(\"$expand\", properties, arguments);\r\n        return this;\r\n    }\r\n    /**\r\n     * @public\r\n     * To add properties for orderby OData Query param\r\n     * @param {string|string[]} properties - The Properties value\r\n     * @returns The same GraphRequest instance that is being called with, after adding the properties for $orderby query\r\n     */\r\n    orderby(properties) {\r\n        this.addCsvQueryParameter(\"$orderby\", properties, arguments);\r\n        return this;\r\n    }\r\n    /**\r\n     * @public\r\n     * To add query string for filter OData Query param. The request URL accepts only one $filter Odata Query option and its value is set to the most recently passed filter query string.\r\n     * @param {string} filterStr - The filter query string\r\n     * @returns The same GraphRequest instance that is being called with, after adding the $filter query\r\n     */\r\n    filter(filterStr) {\r\n        this.urlComponents.oDataQueryParams.$filter = filterStr;\r\n        return this;\r\n    }\r\n    /**\r\n     * @public\r\n     * To add criterion for search OData Query param. The request URL accepts only one $search Odata Query option and its value is set to the most recently passed search criterion string.\r\n     * @param {string} searchStr - The search criterion string\r\n     * @returns The same GraphRequest instance that is being called with, after adding the $search query criteria\r\n     */\r\n    search(searchStr) {\r\n        this.urlComponents.oDataQueryParams.$search = searchStr;\r\n        return this;\r\n    }\r\n    /**\r\n     * @public\r\n     * To add number for top OData Query param. The request URL accepts only one $top Odata Query option and its value is set to the most recently passed number value.\r\n     * @param {number} n - The number value\r\n     * @returns The same GraphRequest instance that is being called with, after adding the number for $top query\r\n     */\r\n    top(n) {\r\n        this.urlComponents.oDataQueryParams.$top = n;\r\n        return this;\r\n    }\r\n    /**\r\n     * @public\r\n     * To add number for skip OData Query param. The request URL accepts only one $skip Odata Query option and its value is set to the most recently passed number value.\r\n     * @param {number} n - The number value\r\n     * @returns The same GraphRequest instance that is being called with, after adding the number for the $skip query\r\n     */\r\n    skip(n) {\r\n        this.urlComponents.oDataQueryParams.$skip = n;\r\n        return this;\r\n    }\r\n    /**\r\n     * @public\r\n     * To add token string for skipToken OData Query param. The request URL accepts only one $skipToken Odata Query option and its value is set to the most recently passed token value.\r\n     * @param {string} token - The token value\r\n     * @returns The same GraphRequest instance that is being called with, after adding the token string for $skipToken query option\r\n     */\r\n    skipToken(token) {\r\n        this.urlComponents.oDataQueryParams.$skipToken = token;\r\n        return this;\r\n    }\r\n    /**\r\n     * @public\r\n     * To add boolean for count OData Query param. The URL accepts only one $count Odata Query option and its value is set to the most recently passed boolean value.\r\n     * @param {boolean} isCount - The count boolean\r\n     * @returns The same GraphRequest instance that is being called with, after adding the boolean value for the $count query option\r\n     */\r\n    count(isCount = false) {\r\n        this.urlComponents.oDataQueryParams.$count = isCount.toString();\r\n        return this;\r\n    }\r\n    /**\r\n     * @public\r\n     * Appends query string to the urlComponent\r\n     * @param {string|KeyValuePairObjectStringNumber} queryDictionaryOrString - The query value\r\n     * @returns The same GraphRequest instance that is being called with, after appending the query string to the url component\r\n     */\r\n    /*\r\n     * Accepts .query(\"displayName=xyz\")\r\n     *     and .select({ name: \"value\" })\r\n     */\r\n    query(queryDictionaryOrString) {\r\n        return this.parseQueryParameter(queryDictionaryOrString);\r\n    }\r\n    /**\r\n     * @public\r\n     * @async\r\n     * Makes a http request with GET method\r\n     * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n     * @returns A promise that resolves to the get response\r\n     */\r\n    get(callback) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const url = this.buildFullUrl();\r\n            const options = {\r\n                method: RequestMethod.GET,\r\n            };\r\n            try {\r\n                const response = yield this.send(url, options, callback);\r\n                return response;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @async\r\n     * Makes a http request with POST method\r\n     * @param {any} content - The content that needs to be sent with the request\r\n     * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n     * @returns A promise that resolves to the post response\r\n     */\r\n    post(content, callback) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const url = this.buildFullUrl();\r\n            const options = {\r\n                method: RequestMethod.POST,\r\n                body: serializeContent(content),\r\n            };\r\n            const className = content && content.constructor && content.constructor.name;\r\n            if (className === \"FormData\") {\r\n                // Content-Type headers should not be specified in case the of FormData type content\r\n                options.headers = {};\r\n            }\r\n            else {\r\n                this.setHeaderContentType();\r\n                options.headers = this._headers;\r\n            }\r\n            try {\r\n                const response = yield this.send(url, options, callback);\r\n                return response;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @async\r\n     * Alias for Post request call\r\n     * @param {any} content - The content that needs to be sent with the request\r\n     * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n     * @returns A promise that resolves to the post response\r\n     */\r\n    create(content, callback) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                return yield this.post(content, callback);\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @async\r\n     * Makes http request with PUT method\r\n     * @param {any} content - The content that needs to be sent with the request\r\n     * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n     * @returns A promise that resolves to the put response\r\n     */\r\n    put(content, callback) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const url = this.buildFullUrl();\r\n            this.setHeaderContentType();\r\n            const options = {\r\n                method: RequestMethod.PUT,\r\n                body: serializeContent(content),\r\n            };\r\n            try {\r\n                const response = yield this.send(url, options, callback);\r\n                return response;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @async\r\n     * Makes http request with PATCH method\r\n     * @param {any} content - The content that needs to be sent with the request\r\n     * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n     * @returns A promise that resolves to the patch response\r\n     */\r\n    patch(content, callback) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const url = this.buildFullUrl();\r\n            this.setHeaderContentType();\r\n            const options = {\r\n                method: RequestMethod.PATCH,\r\n                body: serializeContent(content),\r\n            };\r\n            try {\r\n                const response = yield this.send(url, options, callback);\r\n                return response;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @async\r\n     * Alias for PATCH request\r\n     * @param {any} content - The content that needs to be sent with the request\r\n     * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n     * @returns A promise that resolves to the patch response\r\n     */\r\n    update(content, callback) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                return yield this.patch(content, callback);\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @async\r\n     * Makes http request with DELETE method\r\n     * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n     * @returns A promise that resolves to the delete response\r\n     */\r\n    delete(callback) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const url = this.buildFullUrl();\r\n            const options = {\r\n                method: RequestMethod.DELETE,\r\n            };\r\n            try {\r\n                const response = yield this.send(url, options, callback);\r\n                return response;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @async\r\n     * Alias for delete request call\r\n     * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n     * @returns A promise that resolves to the delete response\r\n     */\r\n    del(callback) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                return yield this.delete(callback);\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @async\r\n     * Makes a http request with GET method to read response as a stream.\r\n     * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n     * @returns A promise that resolves to the getStream response\r\n     */\r\n    getStream(callback) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const url = this.buildFullUrl();\r\n            const options = {\r\n                method: RequestMethod.GET,\r\n            };\r\n            this.responseType(ResponseType.STREAM);\r\n            try {\r\n                const stream = yield this.send(url, options, callback);\r\n                return stream;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @async\r\n     * Makes a http request with GET method to read response as a stream.\r\n     * @param {any} stream - The stream instance\r\n     * @param {GraphRequestCallback} [callback] - The callback function to be called in response with async call\r\n     * @returns A promise that resolves to the putStream response\r\n     */\r\n    putStream(stream, callback) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const url = this.buildFullUrl();\r\n            const options = {\r\n                method: RequestMethod.PUT,\r\n                headers: {\r\n                    \"Content-Type\": \"application/octet-stream\",\r\n                },\r\n                body: stream,\r\n            };\r\n            try {\r\n                const response = yield this.send(url, options, callback);\r\n                return response;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=GraphRequest.js.map"]},"metadata":{},"sourceType":"module"}