{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * @module GraphErrorHandler\r\n */\n\nimport { GraphError } from \"./GraphError\";\n/**\r\n * @class\r\n * Class for GraphErrorHandler\r\n */\n\nexport class GraphErrorHandler {\n  /**\r\n   * @private\r\n   * @static\r\n   * Populates the GraphError instance with Error instance values\r\n   * @param {Error} error - The error returned by graph service or some native error\r\n   * @param {number} [statusCode] - The status code of the response\r\n   * @returns The GraphError instance\r\n   */\n  static constructError(error, statusCode) {\n    const gError = new GraphError(statusCode, \"\", error);\n\n    if (error.name !== undefined) {\n      gError.code = error.name;\n    }\n\n    gError.body = error.toString();\n    gError.date = new Date();\n    return gError;\n  }\n  /**\r\n   * @private\r\n   * @static\r\n   * @async\r\n   * Populates the GraphError instance from the Error returned by graph service\r\n   * @param {any} error - The error returned by graph service or some native error\r\n   * @param {number} statusCode - The status code of the response\r\n   * @returns A promise that resolves to GraphError instance\r\n   *\r\n   * Example error for https://graph.microsoft.com/v1.0/me/events?$top=3&$search=foo\r\n   * {\r\n   *      \"error\": {\r\n   *          \"code\": \"SearchEvents\",\r\n   *          \"message\": \"The parameter $search is not currently supported on the Events resource.\",\r\n   *          \"innerError\": {\r\n   *              \"request-id\": \"b31c83fd-944c-4663-aa50-5d9ceb367e19\",\r\n   *              \"date\": \"2016-11-17T18:37:45\"\r\n   *          }\r\n   *      }\r\n   *  }\r\n   */\n\n\n  static constructErrorFromResponse(error, statusCode) {\n    error = error.error;\n    const gError = new GraphError(statusCode, error.message);\n    gError.code = error.code;\n\n    if (error.innerError !== undefined) {\n      gError.requestId = error.innerError[\"request-id\"];\n      gError.date = new Date(error.innerError.date);\n    }\n\n    try {\n      gError.body = JSON.stringify(error);\n    } catch (error) {// tslint:disable-line: no-empty\n    }\n\n    return gError;\n  }\n  /**\r\n   * @public\r\n   * @static\r\n   * @async\r\n   * To get the GraphError object\r\n   * @param {any} [error = null] - The error returned by graph service or some native error\r\n   * @param {number} [statusCode = -1] - The status code of the response\r\n   * @param {GraphRequestCallback} [callback] - The graph request callback function\r\n   * @returns A promise that resolves to GraphError instance\r\n   */\n\n\n  static getError(error = null, statusCode = -1, callback) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      let gError;\n\n      if (error && error.error) {\n        gError = GraphErrorHandler.constructErrorFromResponse(error, statusCode);\n      } else if (typeof Error !== \"undefined\" && error instanceof Error) {\n        gError = GraphErrorHandler.constructError(error, statusCode);\n      } else {\n        gError = new GraphError(statusCode);\n      }\n\n      if (typeof callback === \"function\") {\n        callback(gError, null);\n      } else {\n        return gError;\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["../../src/GraphErrorHandler.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAEH;;AAEG;;AAEH,SAAS,UAAT,QAA2B,cAA3B;AAGA;;;AAGG;;AAEH,OAAM,MAAO,iBAAP,CAAwB;AAC7B;;;;;;;AAOG;AAC0B,SAAd,cAAc,CAAC,KAAD,EAAe,UAAf,EAAkC;AAC9D,UAAM,MAAM,GAAG,IAAI,UAAJ,CAAe,UAAf,EAA2B,EAA3B,EAA+B,KAA/B,CAAf;;AACA,QAAI,KAAK,CAAC,IAAN,KAAe,SAAnB,EAA8B;AAC7B,MAAA,MAAM,CAAC,IAAP,GAAc,KAAK,CAAC,IAApB;AACA;;AACD,IAAA,MAAM,CAAC,IAAP,GAAc,KAAK,CAAC,QAAN,EAAd;AACA,IAAA,MAAM,CAAC,IAAP,GAAc,IAAI,IAAJ,EAAd;AACA,WAAO,MAAP;AACA;AAED;;;;;;;;;;;;;;;;;;;;AAoBG;;;AACsC,SAA1B,0BAA0B,CAAC,KAAD,EAAa,UAAb,EAA+B;AACvE,IAAA,KAAK,GAAG,KAAK,CAAC,KAAd;AACA,UAAM,MAAM,GAAG,IAAI,UAAJ,CAAe,UAAf,EAA2B,KAAK,CAAC,OAAjC,CAAf;AACA,IAAA,MAAM,CAAC,IAAP,GAAc,KAAK,CAAC,IAApB;;AACA,QAAI,KAAK,CAAC,UAAN,KAAqB,SAAzB,EAAoC;AACnC,MAAA,MAAM,CAAC,SAAP,GAAmB,KAAK,CAAC,UAAN,CAAiB,YAAjB,CAAnB;AACA,MAAA,MAAM,CAAC,IAAP,GAAc,IAAI,IAAJ,CAAS,KAAK,CAAC,UAAN,CAAiB,IAA1B,CAAd;AACA;;AACD,QAAI;AACH,MAAA,MAAM,CAAC,IAAP,GAAc,IAAI,CAAC,SAAL,CAAe,KAAf,CAAd;AACA,KAFD,CAEE,OAAO,KAAP,EAAc,CACf;AACA;;AACD,WAAO,MAAP;AACA;AAED;;;;;;;;;AASG;;;AACyB,SAAR,QAAQ,CAAC,KAAA,GAAa,IAAd,EAAoB,UAAA,GAAqB,CAAC,CAA1C,EAA6C,QAA7C,EAA4E;;AACvG,UAAI,MAAJ;;AACA,UAAI,KAAK,IAAI,KAAK,CAAC,KAAnB,EAA0B;AACzB,QAAA,MAAM,GAAG,iBAAiB,CAAC,0BAAlB,CAA6C,KAA7C,EAAoD,UAApD,CAAT;AACA,OAFD,MAEO,IAAI,OAAO,KAAP,KAAiB,WAAjB,IAAgC,KAAK,YAAY,KAArD,EAA4D;AAClE,QAAA,MAAM,GAAG,iBAAiB,CAAC,cAAlB,CAAiC,KAAjC,EAAwC,UAAxC,CAAT;AACA,OAFM,MAEA;AACN,QAAA,MAAM,GAAG,IAAI,UAAJ,CAAe,UAAf,CAAT;AACA;;AACD,UAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AACnC,QAAA,QAAQ,CAAC,MAAD,EAAS,IAAT,CAAR;AACA,OAFD,MAEO;AACN,eAAO,MAAP;AACA;AACD,K;AAAA;;AAhF4B","sourceRoot":"","sourcesContent":["/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * @module GraphErrorHandler\r\n */\r\nimport { GraphError } from \"./GraphError\";\r\n/**\r\n * @class\r\n * Class for GraphErrorHandler\r\n */\r\nexport class GraphErrorHandler {\r\n    /**\r\n     * @private\r\n     * @static\r\n     * Populates the GraphError instance with Error instance values\r\n     * @param {Error} error - The error returned by graph service or some native error\r\n     * @param {number} [statusCode] - The status code of the response\r\n     * @returns The GraphError instance\r\n     */\r\n    static constructError(error, statusCode) {\r\n        const gError = new GraphError(statusCode, \"\", error);\r\n        if (error.name !== undefined) {\r\n            gError.code = error.name;\r\n        }\r\n        gError.body = error.toString();\r\n        gError.date = new Date();\r\n        return gError;\r\n    }\r\n    /**\r\n     * @private\r\n     * @static\r\n     * @async\r\n     * Populates the GraphError instance from the Error returned by graph service\r\n     * @param {any} error - The error returned by graph service or some native error\r\n     * @param {number} statusCode - The status code of the response\r\n     * @returns A promise that resolves to GraphError instance\r\n     *\r\n     * Example error for https://graph.microsoft.com/v1.0/me/events?$top=3&$search=foo\r\n     * {\r\n     *      \"error\": {\r\n     *          \"code\": \"SearchEvents\",\r\n     *          \"message\": \"The parameter $search is not currently supported on the Events resource.\",\r\n     *          \"innerError\": {\r\n     *              \"request-id\": \"b31c83fd-944c-4663-aa50-5d9ceb367e19\",\r\n     *              \"date\": \"2016-11-17T18:37:45\"\r\n     *          }\r\n     *      }\r\n     *  }\r\n     */\r\n    static constructErrorFromResponse(error, statusCode) {\r\n        error = error.error;\r\n        const gError = new GraphError(statusCode, error.message);\r\n        gError.code = error.code;\r\n        if (error.innerError !== undefined) {\r\n            gError.requestId = error.innerError[\"request-id\"];\r\n            gError.date = new Date(error.innerError.date);\r\n        }\r\n        try {\r\n            gError.body = JSON.stringify(error);\r\n        }\r\n        catch (error) {\r\n            // tslint:disable-line: no-empty\r\n        }\r\n        return gError;\r\n    }\r\n    /**\r\n     * @public\r\n     * @static\r\n     * @async\r\n     * To get the GraphError object\r\n     * @param {any} [error = null] - The error returned by graph service or some native error\r\n     * @param {number} [statusCode = -1] - The status code of the response\r\n     * @param {GraphRequestCallback} [callback] - The graph request callback function\r\n     * @returns A promise that resolves to GraphError instance\r\n     */\r\n    static getError(error = null, statusCode = -1, callback) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            let gError;\r\n            if (error && error.error) {\r\n                gError = GraphErrorHandler.constructErrorFromResponse(error, statusCode);\r\n            }\r\n            else if (typeof Error !== \"undefined\" && error instanceof Error) {\r\n                gError = GraphErrorHandler.constructError(error, statusCode);\r\n            }\r\n            else {\r\n                gError = new GraphError(statusCode);\r\n            }\r\n            if (typeof callback === \"function\") {\r\n                callback(gError, null);\r\n            }\r\n            else {\r\n                return gError;\r\n            }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=GraphErrorHandler.js.map"]},"metadata":{},"sourceType":"module"}