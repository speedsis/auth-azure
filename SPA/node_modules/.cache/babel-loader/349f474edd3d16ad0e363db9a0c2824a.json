{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __extends, __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { GrantType } from '../utils/Constants.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\nimport { CcsCredentialType } from '../account/CcsCredential.js';\nimport { BaseClient as BaseClient$1 } from './BaseClient.js';\nimport { RequestParameterBuilder as RequestParameterBuilder$1 } from '../request/RequestParameterBuilder.js';\nimport { TimeUtils as TimeUtils$1 } from '../utils/TimeUtils.js';\nimport { ResponseHandler as ResponseHandler$1 } from '../response/ResponseHandler.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\n\nvar UsernamePasswordClient = function (_super) {\n  __extends(UsernamePasswordClient, _super);\n\n  function UsernamePasswordClient(configuration) {\n    return _super.call(this, configuration) || this;\n  }\n  /**\r\n   * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n   * password_grant\r\n   * @param request\r\n   */\n\n\n  UsernamePasswordClient.prototype.acquireToken = function (request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var reqTimestamp, response, responseHandler, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.logger.info(\"in acquireToken call\");\n            reqTimestamp = TimeUtils$1.nowSeconds();\n            return [4\n            /*yield*/\n            , this.executeTokenRequest(this.authority, request)];\n\n          case 1:\n            response = _a.sent();\n            responseHandler = new ResponseHandler$1(this.config.authOptions.clientId, this.cacheManager, this.cryptoUtils, this.logger, this.config.serializableCache, this.config.persistencePlugin); // Validate response. This function throws a server error if an error is returned by the server.\n\n            responseHandler.validateTokenResponse(response.body);\n            tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Executes POST request to token endpoint\r\n   * @param authority\r\n   * @param request\r\n   */\n\n\n  UsernamePasswordClient.prototype.executeTokenRequest = function (authority, request) {\n    return __awaiter(this, void 0, void 0, function () {\n      var thumbprint, requestBody, headers;\n      return __generator(this, function (_a) {\n        thumbprint = {\n          clientId: this.config.authOptions.clientId,\n          authority: authority.canonicalAuthority,\n          scopes: request.scopes\n        };\n        requestBody = this.createTokenRequestBody(request);\n        headers = this.createTokenRequestHeaders({\n          credential: request.username,\n          type: CcsCredentialType.UPN\n        });\n        return [2\n        /*return*/\n        , this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint)];\n      });\n    });\n  };\n  /**\r\n   * Generates a map for all the params to be sent to the service\r\n   * @param request\r\n   */\n\n\n  UsernamePasswordClient.prototype.createTokenRequestBody = function (request) {\n    var parameterBuilder = new RequestParameterBuilder$1();\n    parameterBuilder.addClientId(this.config.authOptions.clientId);\n    parameterBuilder.addUsername(request.username);\n    parameterBuilder.addPassword(request.password);\n    parameterBuilder.addScopes(request.scopes);\n    parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\n    parameterBuilder.addClientInfo();\n    parameterBuilder.addLibraryInfo(this.config.libraryInfo);\n    parameterBuilder.addThrottling();\n\n    if (this.serverTelemetryManager) {\n      parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\n    }\n\n    var correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\n    parameterBuilder.addCorrelationId(correlationId);\n\n    if (this.config.clientCredentials.clientSecret) {\n      parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\n    }\n\n    if (this.config.clientCredentials.clientAssertion) {\n      var clientAssertion = this.config.clientCredentials.clientAssertion;\n      parameterBuilder.addClientAssertion(clientAssertion.assertion);\n      parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\n    }\n\n    if (!StringUtils$1.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\n      parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\n    }\n\n    if (this.config.systemOptions.preventCorsPreflight && request.username) {\n      parameterBuilder.addCcsUpn(request.username);\n    }\n\n    return parameterBuilder.createQueryString();\n  };\n\n  return UsernamePasswordClient;\n}(BaseClient$1);\n\nexport { UsernamePasswordClient };","map":{"version":3,"sources":["../../src/client/UsernamePasswordClient.ts"],"names":["BaseClient","TimeUtils","ResponseHandler","RequestParameterBuilder","StringUtils"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { BaseClient } from \"./BaseClient\";\r\nimport { ClientConfiguration } from \"../config/ClientConfiguration\";\r\nimport { CommonUsernamePasswordRequest } from \"../request/CommonUsernamePasswordRequest\";\r\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\r\nimport { ResponseHandler } from \"../response/ResponseHandler\";\r\nimport { Authority } from \"../authority/Authority\";\r\nimport { NetworkResponse } from \"../network/NetworkManager\";\r\nimport { ServerAuthorizationTokenResponse } from \"../response/ServerAuthorizationTokenResponse\";\r\nimport { RequestParameterBuilder } from \"../request/RequestParameterBuilder\";\r\nimport { GrantType } from \"../utils/Constants\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { RequestThumbprint } from \"../network/RequestThumbprint\";\r\nimport { TimeUtils } from \"../utils/TimeUtils\";\r\nimport { CcsCredentialType } from \"../account/CcsCredential\";\r\n\r\n/**\r\n * Oauth2.0 Password grant client\r\n * Note: We are only supporting public clients for password grant and for purely testing purposes\r\n */\r\nexport class UsernamePasswordClient extends BaseClient {\r\n\r\n    constructor(configuration: ClientConfiguration) {\r\n        super(configuration);\r\n    }\r\n\r\n    /**\r\n     * API to acquire a token by passing the username and password to the service in exchage of credentials\r\n     * password_grant\r\n     * @param request\r\n     */\r\n    async acquireToken(request: CommonUsernamePasswordRequest): Promise<AuthenticationResult | null> {\r\n        this.logger.info(\"in acquireToken call\");\r\n\r\n        const reqTimestamp = TimeUtils.nowSeconds();\r\n        const response = await this.executeTokenRequest(this.authority, request);\r\n\r\n        const responseHandler = new ResponseHandler(\r\n            this.config.authOptions.clientId,\r\n            this.cacheManager,\r\n            this.cryptoUtils,\r\n            this.logger,\r\n            this.config.serializableCache,\r\n            this.config.persistencePlugin\r\n        );\r\n\r\n        // Validate response. This function throws a server error if an error is returned by the server.\r\n        responseHandler.validateTokenResponse(response.body);\r\n        const tokenResponse = responseHandler.handleServerTokenResponse(response.body, this.authority, reqTimestamp, request);\r\n\r\n        return tokenResponse;\r\n    }\r\n\r\n    /**\r\n     * Executes POST request to token endpoint\r\n     * @param authority\r\n     * @param request\r\n     */\r\n    private async executeTokenRequest(authority: Authority, request: CommonUsernamePasswordRequest): Promise<NetworkResponse<ServerAuthorizationTokenResponse>> {\r\n        const thumbprint: RequestThumbprint = {\r\n            clientId: this.config.authOptions.clientId,\r\n            authority: authority.canonicalAuthority,\r\n            scopes: request.scopes\r\n        };\r\n        const requestBody = this.createTokenRequestBody(request);\r\n        const headers: Record<string, string> = this.createTokenRequestHeaders({\r\n            credential: request.username,\r\n            type: CcsCredentialType.UPN\r\n        });\r\n\r\n        return this.executePostToTokenEndpoint(authority.tokenEndpoint, requestBody, headers, thumbprint);\r\n    }\r\n\r\n    /**\r\n     * Generates a map for all the params to be sent to the service\r\n     * @param request\r\n     */\r\n    private createTokenRequestBody(request: CommonUsernamePasswordRequest): string {\r\n        const parameterBuilder = new RequestParameterBuilder();\r\n\r\n        parameterBuilder.addClientId(this.config.authOptions.clientId);\r\n        parameterBuilder.addUsername(request.username);\r\n        parameterBuilder.addPassword(request.password);\r\n\r\n        parameterBuilder.addScopes(request.scopes);\r\n\r\n        parameterBuilder.addGrantType(GrantType.RESOURCE_OWNER_PASSWORD_GRANT);\r\n        parameterBuilder.addClientInfo();\r\n\r\n        parameterBuilder.addLibraryInfo(this.config.libraryInfo);\r\n\r\n        parameterBuilder.addThrottling();\r\n\r\n        if (this.serverTelemetryManager) {\r\n            parameterBuilder.addServerTelemetry(this.serverTelemetryManager);\r\n        }\r\n\r\n        const correlationId = request.correlationId || this.config.cryptoInterface.createNewGuid();\r\n        parameterBuilder.addCorrelationId(correlationId);\r\n\r\n        if (this.config.clientCredentials.clientSecret) {\r\n            parameterBuilder.addClientSecret(this.config.clientCredentials.clientSecret);\r\n        }\r\n\r\n        if (this.config.clientCredentials.clientAssertion) {\r\n            const clientAssertion = this.config.clientCredentials.clientAssertion;\r\n            parameterBuilder.addClientAssertion(clientAssertion.assertion);\r\n            parameterBuilder.addClientAssertionType(clientAssertion.assertionType);\r\n        }\r\n\r\n        if (!StringUtils.isEmptyObj(request.claims) || this.config.authOptions.clientCapabilities && this.config.authOptions.clientCapabilities.length > 0) {\r\n            parameterBuilder.addClaims(request.claims, this.config.authOptions.clientCapabilities);\r\n        }\r\n\r\n        if (this.config.systemOptions.preventCorsPreflight && request.username) {\r\n            parameterBuilder.addCcsUpn(request.username);\r\n        }\r\n\r\n        return parameterBuilder.createQueryString();\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}