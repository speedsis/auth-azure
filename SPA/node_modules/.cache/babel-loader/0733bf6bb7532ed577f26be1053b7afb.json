{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\n\n/**\r\n * @class\r\n * Class representing MiddlewareControl\r\n */\nexport class MiddlewareControl {\n  /**\r\n   * @public\r\n   * @constructor\r\n   * Creates an instance of MiddlewareControl\r\n   * @param {MiddlewareOptions[]} [middlewareOptions = []] - The array of middlewareOptions\r\n   * @returns The instance of MiddlewareControl\r\n   */\n  constructor(middlewareOptions = []) {\n    // tslint:disable-next-line:ban-types\n    this.middlewareOptions = new Map();\n\n    for (const option of middlewareOptions) {\n      const fn = option.constructor;\n      this.middlewareOptions.set(fn, option);\n    }\n  }\n  /**\r\n   * @public\r\n   * To get the middleware option using the class of the option\r\n   * @param {Function} fn - The class of the strongly typed option class\r\n   * @returns The middleware option\r\n   * @example\r\n   * // if you wanted to return the middleware option associated with this class (MiddlewareControl)\r\n   * // call this function like this:\r\n   * getMiddlewareOptions(MiddlewareControl)\r\n   */\n  // tslint:disable-next-line:ban-types\n\n\n  getMiddlewareOptions(fn) {\n    return this.middlewareOptions.get(fn);\n  }\n  /**\r\n   * @public\r\n   * To set the middleware options using the class of the option\r\n   * @param {Function} fn - The class of the strongly typed option class\r\n   * @param {MiddlewareOptions} option - The strongly typed middleware option\r\n   * @returns nothing\r\n   */\n  // tslint:disable-next-line:ban-types\n\n\n  setMiddlewareOptions(fn, option) {\n    this.middlewareOptions.set(fn, option);\n  }\n\n}","map":{"version":3,"sources":["../../../src/middleware/MiddlewareControl.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAQH;;;AAGG;AACH,OAAM,MAAO,iBAAP,CAAwB;AAQ7B;;;;;;AAMG;AACH,EAAA,WAAA,CAAmB,iBAAA,GAAyC,EAA5D,EAA8D;AAC7D;AACA,SAAK,iBAAL,GAAyB,IAAI,GAAJ,EAAzB;;AACA,SAAK,MAAM,MAAX,IAAqB,iBAArB,EAAwC;AACvC,YAAM,EAAE,GAAG,MAAM,CAAC,WAAlB;AACA,WAAK,iBAAL,CAAuB,GAAvB,CAA2B,EAA3B,EAA+B,MAA/B;AACA;AACD;AAED;;;;;;;;;AASG;AACH;;;AACO,EAAA,oBAAoB,CAAC,EAAD,EAAa;AACvC,WAAO,KAAK,iBAAL,CAAuB,GAAvB,CAA2B,EAA3B,CAAP;AACA;AAED;;;;;;AAMG;AACH;;;AACO,EAAA,oBAAoB,CAAC,EAAD,EAAe,MAAf,EAAwC;AAClE,SAAK,iBAAL,CAAuB,GAAvB,CAA2B,EAA3B,EAA+B,MAA/B;AACA;;AAjD4B","sourceRoot":"","sourcesContent":["/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\r\n/**\r\n * @class\r\n * Class representing MiddlewareControl\r\n */\r\nexport class MiddlewareControl {\r\n    /**\r\n     * @public\r\n     * @constructor\r\n     * Creates an instance of MiddlewareControl\r\n     * @param {MiddlewareOptions[]} [middlewareOptions = []] - The array of middlewareOptions\r\n     * @returns The instance of MiddlewareControl\r\n     */\r\n    constructor(middlewareOptions = []) {\r\n        // tslint:disable-next-line:ban-types\r\n        this.middlewareOptions = new Map();\r\n        for (const option of middlewareOptions) {\r\n            const fn = option.constructor;\r\n            this.middlewareOptions.set(fn, option);\r\n        }\r\n    }\r\n    /**\r\n     * @public\r\n     * To get the middleware option using the class of the option\r\n     * @param {Function} fn - The class of the strongly typed option class\r\n     * @returns The middleware option\r\n     * @example\r\n     * // if you wanted to return the middleware option associated with this class (MiddlewareControl)\r\n     * // call this function like this:\r\n     * getMiddlewareOptions(MiddlewareControl)\r\n     */\r\n    // tslint:disable-next-line:ban-types\r\n    getMiddlewareOptions(fn) {\r\n        return this.middlewareOptions.get(fn);\r\n    }\r\n    /**\r\n     * @public\r\n     * To set the middleware options using the class of the option\r\n     * @param {Function} fn - The class of the strongly typed option class\r\n     * @param {MiddlewareOptions} option - The strongly typed middleware option\r\n     * @returns nothing\r\n     */\r\n    // tslint:disable-next-line:ban-types\r\n    setMiddlewareOptions(fn, option) {\r\n        this.middlewareOptions.set(fn, option);\r\n    }\r\n}\r\n//# sourceMappingURL=MiddlewareControl.js.map"]},"metadata":{},"sourceType":"module"}