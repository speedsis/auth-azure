{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { __awaiter, __generator } from '../_virtual/_tslib.js';\nimport { StringUtils, ClientAuthError, AuthorityFactory } from '@azure/msal-common';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys } from '../utils/BrowserConstants.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\n\nvar InteractionHandler = function () {\n  function InteractionHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) {\n    this.authModule = authCodeModule;\n    this.browserStorage = storageImpl;\n    this.authCodeRequest = authCodeRequest;\n    this.browserRequestLogger = browserRequestLogger;\n  }\n  /**\r\n   * Function to handle response parameters from hash.\r\n   * @param locationHash\r\n   */\n\n\n  InteractionHandler.prototype.handleCodeResponse = function (locationHash, state, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var stateKey, requestState, authCodeResponse, nonceKey, cachedNonce, cachedCcsCred, tokenResponse;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.browserRequestLogger.verbose(\"InteractionHandler.handleCodeResponse called\"); // Check that location hash isn't empty.\n\n            if (StringUtils.isEmpty(locationHash)) {\n              throw BrowserAuthError.createEmptyHashError(locationHash);\n            }\n\n            stateKey = this.browserStorage.generateStateKey(state);\n            requestState = this.browserStorage.getTemporaryCache(stateKey);\n\n            if (!requestState) {\n              throw ClientAuthError.createStateNotFoundError(\"Cached State\");\n            }\n\n            authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\n            nonceKey = this.browserStorage.generateNonceKey(requestState);\n            cachedNonce = this.browserStorage.getTemporaryCache(nonceKey); // Assign code to request\n\n            this.authCodeRequest.code = authCodeResponse.code;\n            if (!authCodeResponse.cloud_instance_host_name) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            authCodeResponse.nonce = cachedNonce || undefined;\n            authCodeResponse.state = requestState; // Add CCS parameters if available\n\n            if (authCodeResponse.client_info) {\n              this.authCodeRequest.clientInfo = authCodeResponse.client_info;\n            } else {\n              cachedCcsCred = this.checkCcsCredentials();\n\n              if (cachedCcsCred) {\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.authModule.acquireToken(this.authCodeRequest, authCodeResponse)];\n\n          case 3:\n            tokenResponse = _a.sent();\n            this.browserStorage.cleanRequestByState(state);\n            return [2\n            /*return*/\n            , tokenResponse];\n        }\n      });\n    });\n  };\n  /**\r\n   * Updates authority based on cloudInstanceHostname\r\n   * @param cloudInstanceHostname\r\n   * @param authority\r\n   * @param networkModule\r\n   */\n\n\n  InteractionHandler.prototype.updateTokenEndpointAuthority = function (cloudInstanceHostname, authority, networkModule) {\n    return __awaiter(this, void 0, void 0, function () {\n      var cloudInstanceAuthorityUri, cloudInstanceAuthority;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            cloudInstanceAuthorityUri = \"https://\" + cloudInstanceHostname + \"/\" + authority.tenant + \"/\";\n            return [4\n            /*yield*/\n            , AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options)];\n\n          case 1:\n            cloudInstanceAuthority = _a.sent();\n            this.authModule.updateAuthority(cloudInstanceAuthority);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\r\n   * Looks up ccs creds in the cache\r\n   */\n\n\n  InteractionHandler.prototype.checkCcsCredentials = function () {\n    // Look up ccs credential in temp cache\n    var cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\n\n    if (cachedCcsCred) {\n      try {\n        return JSON.parse(cachedCcsCred);\n      } catch (e) {\n        this.authModule.logger.error(\"Cache credential could not be parsed\");\n        this.authModule.logger.errorPii(\"Cache credential could not be parsed: \" + cachedCcsCred);\n      }\n    }\n\n    return null;\n  };\n\n  return InteractionHandler;\n}();\n\nexport { InteractionHandler };","map":{"version":3,"sources":["../../src/interaction_handler/InteractionHandler.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { StringUtils, CommonAuthorizationCodeRequest, AuthenticationResult, AuthorizationCodeClient, AuthorityFactory, Authority, INetworkModule, ClientAuthError, CcsCredential, Logger } from \"@azure/msal-common\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { TemporaryCacheKeys } from \"../utils/BrowserConstants\";\r\n\r\nexport type InteractionParams = {};\r\n\r\n/**\r\n * Abstract class which defines operations for a browser interaction handling class.\r\n */\r\nexport abstract class InteractionHandler {\r\n\r\n    protected authModule: AuthorizationCodeClient;\r\n    protected browserStorage: BrowserCacheManager;\r\n    protected authCodeRequest: CommonAuthorizationCodeRequest;\r\n    protected browserRequestLogger: Logger;\r\n\r\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, browserRequestLogger: Logger) {\r\n        this.authModule = authCodeModule;\r\n        this.browserStorage = storageImpl;\r\n        this.authCodeRequest = authCodeRequest;\r\n        this.browserRequestLogger = browserRequestLogger;\r\n    }\r\n\r\n    /**\r\n     * Function to enable user interaction.\r\n     * @param requestUrl\r\n     */\r\n    abstract initiateAuthRequest(requestUrl: string, params: InteractionParams): Window | Promise<HTMLIFrameElement> | Promise<void>;\r\n\r\n    /**\r\n     * Function to handle response parameters from hash.\r\n     * @param locationHash\r\n     */\r\n    async handleCodeResponse(locationHash: string, state: string, authority: Authority, networkModule: INetworkModule): Promise<AuthenticationResult> {\r\n        this.browserRequestLogger.verbose(\"InteractionHandler.handleCodeResponse called\");\r\n        // Check that location hash isn't empty.\r\n        if (StringUtils.isEmpty(locationHash)) {\r\n            throw BrowserAuthError.createEmptyHashError(locationHash);\r\n        }\r\n\r\n        // Handle code response.\r\n        const stateKey = this.browserStorage.generateStateKey(state);\r\n        const requestState = this.browserStorage.getTemporaryCache(stateKey);\r\n        if (!requestState) {\r\n            throw ClientAuthError.createStateNotFoundError(\"Cached State\");\r\n        }\r\n        const authCodeResponse = this.authModule.handleFragmentResponse(locationHash, requestState);\r\n\r\n        // Get cached items\r\n        const nonceKey = this.browserStorage.generateNonceKey(requestState);\r\n        const cachedNonce = this.browserStorage.getTemporaryCache(nonceKey);\r\n\r\n        // Assign code to request\r\n        this.authCodeRequest.code = authCodeResponse.code;\r\n\r\n        // Check for new cloud instance\r\n        if (authCodeResponse.cloud_instance_host_name) {\r\n            await this.updateTokenEndpointAuthority(authCodeResponse.cloud_instance_host_name, authority, networkModule);\r\n        }\r\n\r\n        authCodeResponse.nonce = cachedNonce || undefined;\r\n        authCodeResponse.state = requestState;\r\n\r\n        // Add CCS parameters if available\r\n        if (authCodeResponse.client_info) {\r\n            this.authCodeRequest.clientInfo = authCodeResponse.client_info;\r\n        } else {\r\n            const cachedCcsCred = this.checkCcsCredentials();\r\n            if (cachedCcsCred) {\r\n                this.authCodeRequest.ccsCredential = cachedCcsCred;\r\n            }\r\n        }\r\n\r\n        // Acquire token with retrieved code.\r\n        const tokenResponse = await this.authModule.acquireToken(this.authCodeRequest, authCodeResponse);\r\n        this.browserStorage.cleanRequestByState(state);\r\n        return tokenResponse;\r\n    }\r\n\r\n    /**\r\n     * Updates authority based on cloudInstanceHostname\r\n     * @param cloudInstanceHostname \r\n     * @param authority \r\n     * @param networkModule \r\n     */\r\n    protected async updateTokenEndpointAuthority(cloudInstanceHostname: string, authority: Authority, networkModule: INetworkModule): Promise<void> {\r\n        const cloudInstanceAuthorityUri = `https://${cloudInstanceHostname}/${authority.tenant}/`;\r\n        const cloudInstanceAuthority = await AuthorityFactory.createDiscoveredInstance(cloudInstanceAuthorityUri, networkModule, this.browserStorage, authority.options);\r\n        this.authModule.updateAuthority(cloudInstanceAuthority);\r\n    }\r\n\r\n    /**\r\n     * Looks up ccs creds in the cache\r\n     */\r\n    protected checkCcsCredentials(): CcsCredential | null {\r\n        // Look up ccs credential in temp cache\r\n        const cachedCcsCred = this.browserStorage.getTemporaryCache(TemporaryCacheKeys.CCS_CREDENTIAL, true);\r\n        if (cachedCcsCred) {\r\n            try {\r\n                return JSON.parse(cachedCcsCred) as CcsCredential;\r\n            } catch (e) {\r\n                this.authModule.logger.error(\"Cache credential could not be parsed\");\r\n                this.authModule.logger.errorPii(`Cache credential could not be parsed: ${cachedCcsCred}`);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}