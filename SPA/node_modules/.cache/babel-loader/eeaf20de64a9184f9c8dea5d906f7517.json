{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\n\n/**\r\n * @class\r\n * @implements MiddlewareOptions\r\n * A class representing RedirectHandlerOptions\r\n */\nexport class RedirectHandlerOptions {\n  /**\r\n   * @public\r\n   * @constructor\r\n   * To create an instance of RedirectHandlerOptions\r\n   * @param {number} [maxRedirects = RedirectHandlerOptions.DEFAULT_MAX_REDIRECTS] - The max redirects value\r\n   * @param {ShouldRedirect} [shouldRedirect = RedirectHandlerOptions.DEFAULT_SHOULD_RETRY] - The should redirect callback\r\n   * @returns An instance of RedirectHandlerOptions\r\n   */\n  constructor(maxRedirects = RedirectHandlerOptions.DEFAULT_MAX_REDIRECTS, shouldRedirect = RedirectHandlerOptions.DEFAULT_SHOULD_RETRY) {\n    if (maxRedirects > RedirectHandlerOptions.MAX_MAX_REDIRECTS) {\n      const error = new Error(`MaxRedirects should not be more than ${RedirectHandlerOptions.MAX_MAX_REDIRECTS}`);\n      error.name = \"MaxLimitExceeded\";\n      throw error;\n    }\n\n    if (maxRedirects < 0) {\n      const error = new Error(`MaxRedirects should not be negative`);\n      error.name = \"MinExpectationNotMet\";\n      throw error;\n    }\n\n    this.maxRedirects = maxRedirects;\n    this.shouldRedirect = shouldRedirect;\n  }\n\n}\n/**\r\n * @private\r\n * @static\r\n * A member holding default max redirects value\r\n */\n\nRedirectHandlerOptions.DEFAULT_MAX_REDIRECTS = 5;\n/**\r\n * @private\r\n * @static\r\n * A member holding maximum max redirects value\r\n */\n\nRedirectHandlerOptions.MAX_MAX_REDIRECTS = 20;\n/**\r\n * @private\r\n * A member holding default shouldRedirect callback\r\n */\n\nRedirectHandlerOptions.DEFAULT_SHOULD_RETRY = () => true;","map":{"version":3,"sources":["../../../../src/middleware/options/RedirectHandlerOptions.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAcH;;;;AAIG;AACH,OAAM,MAAO,sBAAP,CAA6B;AAiClC;;;;;;;AAOG;AACH,EAAA,WAAA,CAAmB,YAAA,GAAuB,sBAAsB,CAAC,qBAAjE,EAAwF,cAAA,GAAiC,sBAAsB,CAAC,oBAAhJ,EAAoK;AACnK,QAAI,YAAY,GAAG,sBAAsB,CAAC,iBAA1C,EAA6D;AAC5D,YAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,wCAAwC,sBAAsB,CAAC,iBAAiB,EAA1F,CAAd;AACA,MAAA,KAAK,CAAC,IAAN,GAAa,kBAAb;AACA,YAAM,KAAN;AACA;;AACD,QAAI,YAAY,GAAG,CAAnB,EAAsB;AACrB,YAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,qCAAV,CAAd;AACA,MAAA,KAAK,CAAC,IAAN,GAAa,sBAAb;AACA,YAAM,KAAN;AACA;;AACD,SAAK,YAAL,GAAoB,YAApB;AACA,SAAK,cAAL,GAAsB,cAAtB;AACA;;AAtDiC;AAClC;;;;AAIG;;AACY,sBAAA,CAAA,qBAAA,GAAgC,CAAhC;AAEf;;;;AAIG;;AACY,sBAAA,CAAA,iBAAA,GAA4B,EAA5B;AAcf;;;AAGG;;AACY,sBAAA,CAAA,oBAAA,GAAuC,MAAM,IAA7C","sourceRoot":"","sourcesContent":["/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\r\n/**\r\n * @class\r\n * @implements MiddlewareOptions\r\n * A class representing RedirectHandlerOptions\r\n */\r\nexport class RedirectHandlerOptions {\r\n    /**\r\n     * @public\r\n     * @constructor\r\n     * To create an instance of RedirectHandlerOptions\r\n     * @param {number} [maxRedirects = RedirectHandlerOptions.DEFAULT_MAX_REDIRECTS] - The max redirects value\r\n     * @param {ShouldRedirect} [shouldRedirect = RedirectHandlerOptions.DEFAULT_SHOULD_RETRY] - The should redirect callback\r\n     * @returns An instance of RedirectHandlerOptions\r\n     */\r\n    constructor(maxRedirects = RedirectHandlerOptions.DEFAULT_MAX_REDIRECTS, shouldRedirect = RedirectHandlerOptions.DEFAULT_SHOULD_RETRY) {\r\n        if (maxRedirects > RedirectHandlerOptions.MAX_MAX_REDIRECTS) {\r\n            const error = new Error(`MaxRedirects should not be more than ${RedirectHandlerOptions.MAX_MAX_REDIRECTS}`);\r\n            error.name = \"MaxLimitExceeded\";\r\n            throw error;\r\n        }\r\n        if (maxRedirects < 0) {\r\n            const error = new Error(`MaxRedirects should not be negative`);\r\n            error.name = \"MinExpectationNotMet\";\r\n            throw error;\r\n        }\r\n        this.maxRedirects = maxRedirects;\r\n        this.shouldRedirect = shouldRedirect;\r\n    }\r\n}\r\n/**\r\n * @private\r\n * @static\r\n * A member holding default max redirects value\r\n */\r\nRedirectHandlerOptions.DEFAULT_MAX_REDIRECTS = 5;\r\n/**\r\n * @private\r\n * @static\r\n * A member holding maximum max redirects value\r\n */\r\nRedirectHandlerOptions.MAX_MAX_REDIRECTS = 20;\r\n/**\r\n * @private\r\n * A member holding default shouldRedirect callback\r\n */\r\nRedirectHandlerOptions.DEFAULT_SHOULD_RETRY = () => true;\r\n//# sourceMappingURL=RedirectHandlerOptions.js.map"]},"metadata":{},"sourceType":"module"}