{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nimport { AuthenticationHandler } from \"./AuthenticationHandler\";\nimport { HTTPMessageHandler } from \"./HTTPMessageHandler\";\nimport { RedirectHandlerOptions } from \"./options/RedirectHandlerOptions\";\nimport { RetryHandlerOptions } from \"./options/RetryHandlerOptions\";\nimport { RedirectHandler } from \"./RedirectHandler\";\nimport { RetryHandler } from \"./RetryHandler\";\nimport { TelemetryHandler } from \"./TelemetryHandler\";\n/**\r\n * @private\r\n * To check whether the environment is node or not\r\n * @returns A boolean representing the environment is node or not\r\n */\n\nconst isNodeEnvironment = () => {\n  return typeof process === \"object\" && typeof require === \"function\";\n};\n/**\r\n * @class\r\n * Class containing function(s) related to the middleware pipelines.\r\n */\n\n\nexport class MiddlewareFactory {\n  /**\r\n   * @public\r\n   * @static\r\n   * Returns the default middleware chain an array with the  middleware handlers\r\n   * @param {AuthenticationProvider} authProvider - The authentication provider instance\r\n   * @returns an array of the middleware handlers of the default middleware chain\r\n   */\n  static getDefaultMiddlewareChain(authProvider) {\n    const middleware = [];\n    const authenticationHandler = new AuthenticationHandler(authProvider);\n    const retryHandler = new RetryHandler(new RetryHandlerOptions());\n    const telemetryHandler = new TelemetryHandler();\n    const httpMessageHandler = new HTTPMessageHandler();\n    middleware.push(authenticationHandler);\n    middleware.push(retryHandler);\n\n    if (isNodeEnvironment()) {\n      const redirectHandler = new RedirectHandler(new RedirectHandlerOptions());\n      middleware.push(redirectHandler);\n    }\n\n    middleware.push(telemetryHandler);\n    middleware.push(httpMessageHandler);\n    return middleware;\n  }\n\n}","map":{"version":3,"sources":["../../../src/middleware/MiddlewareFactory.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;AAQH,SAAS,qBAAT,QAAsC,yBAAtC;AACA,SAAS,kBAAT,QAAmC,sBAAnC;AAEA,SAAS,sBAAT,QAAuC,kCAAvC;AACA,SAAS,mBAAT,QAAoC,+BAApC;AACA,SAAS,eAAT,QAAgC,mBAAhC;AACA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAS,gBAAT,QAAiC,oBAAjC;AAEA;;;;AAIG;;AACH,MAAM,iBAAiB,GAAG,MAAc;AACvC,SAAO,OAAO,OAAP,KAAmB,QAAnB,IAA+B,OAAO,OAAP,KAAmB,UAAzD;AACA,CAFD;AAIA;;;AAGG;;;AACH,OAAM,MAAO,iBAAP,CAAwB;AAC7B;;;;;;AAMG;AACoC,SAAzB,yBAAyB,CAAC,YAAD,EAAqC;AAC3E,UAAM,UAAU,GAAiB,EAAjC;AACA,UAAM,qBAAqB,GAAG,IAAI,qBAAJ,CAA0B,YAA1B,CAA9B;AACA,UAAM,YAAY,GAAG,IAAI,YAAJ,CAAiB,IAAI,mBAAJ,EAAjB,CAArB;AACA,UAAM,gBAAgB,GAAG,IAAI,gBAAJ,EAAzB;AACA,UAAM,kBAAkB,GAAG,IAAI,kBAAJ,EAA3B;AAEA,IAAA,UAAU,CAAC,IAAX,CAAgB,qBAAhB;AACA,IAAA,UAAU,CAAC,IAAX,CAAgB,YAAhB;;AACA,QAAI,iBAAiB,EAArB,EAAyB;AACxB,YAAM,eAAe,GAAG,IAAI,eAAJ,CAAoB,IAAI,sBAAJ,EAApB,CAAxB;AACA,MAAA,UAAU,CAAC,IAAX,CAAgB,eAAhB;AACA;;AACD,IAAA,UAAU,CAAC,IAAX,CAAgB,gBAAhB;AACA,IAAA,UAAU,CAAC,IAAX,CAAgB,kBAAhB;AAEA,WAAO,UAAP;AACA;;AAzB4B","sourceRoot":"","sourcesContent":["/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\r\nimport { AuthenticationHandler } from \"./AuthenticationHandler\";\r\nimport { HTTPMessageHandler } from \"./HTTPMessageHandler\";\r\nimport { RedirectHandlerOptions } from \"./options/RedirectHandlerOptions\";\r\nimport { RetryHandlerOptions } from \"./options/RetryHandlerOptions\";\r\nimport { RedirectHandler } from \"./RedirectHandler\";\r\nimport { RetryHandler } from \"./RetryHandler\";\r\nimport { TelemetryHandler } from \"./TelemetryHandler\";\r\n/**\r\n * @private\r\n * To check whether the environment is node or not\r\n * @returns A boolean representing the environment is node or not\r\n */\r\nconst isNodeEnvironment = () => {\r\n    return typeof process === \"object\" && typeof require === \"function\";\r\n};\r\n/**\r\n * @class\r\n * Class containing function(s) related to the middleware pipelines.\r\n */\r\nexport class MiddlewareFactory {\r\n    /**\r\n     * @public\r\n     * @static\r\n     * Returns the default middleware chain an array with the  middleware handlers\r\n     * @param {AuthenticationProvider} authProvider - The authentication provider instance\r\n     * @returns an array of the middleware handlers of the default middleware chain\r\n     */\r\n    static getDefaultMiddlewareChain(authProvider) {\r\n        const middleware = [];\r\n        const authenticationHandler = new AuthenticationHandler(authProvider);\r\n        const retryHandler = new RetryHandler(new RetryHandlerOptions());\r\n        const telemetryHandler = new TelemetryHandler();\r\n        const httpMessageHandler = new HTTPMessageHandler();\r\n        middleware.push(authenticationHandler);\r\n        middleware.push(retryHandler);\r\n        if (isNodeEnvironment()) {\r\n            const redirectHandler = new RedirectHandler(new RedirectHandlerOptions());\r\n            middleware.push(redirectHandler);\r\n        }\r\n        middleware.push(telemetryHandler);\r\n        middleware.push(httpMessageHandler);\r\n        return middleware;\r\n    }\r\n}\r\n//# sourceMappingURL=MiddlewareFactory.js.map"]},"metadata":{},"sourceType":"module"}