{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { MathUtils } from '../utils/MathUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar GuidGenerator = function () {\n  function GuidGenerator(cryptoObj) {\n    this.cryptoObj = cryptoObj;\n  }\n  /*\r\n   * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or\r\n   * pseudo-random numbers.\r\n   * The algorithm is as follows:\r\n   *     Set the two most significant bits (bits 6 and 7) of the\r\n   *        clock_seq_hi_and_reserved to zero and one, respectively.\r\n   *     Set the four most significant bits (bits 12 through 15) of the\r\n   *        time_hi_and_version field to the 4-bit version number from\r\n   *        Section 4.1.3. Version4\r\n   *     Set all the other bits to randomly (or pseudo-randomly) chosen\r\n   *     values.\r\n   * UUID                   = time-low \"-\" time-mid \"-\"time-high-and-version \"-\"clock-seq-reserved and low(2hexOctet)\"-\" node\r\n   * time-low               = 4hexOctet\r\n   * time-mid               = 2hexOctet\r\n   * time-high-and-version  = 2hexOctet\r\n   * clock-seq-and-reserved = hexOctet:\r\n   * clock-seq-low          = hexOctet\r\n   * node                   = 6hexOctet\r\n   * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\r\n   * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10\r\n   * y values are 8, 9, A, B\r\n   */\n\n\n  GuidGenerator.prototype.generateGuid = function () {\n    try {\n      var buffer = new Uint8Array(16);\n      this.cryptoObj.getRandomValues(buffer); // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).\n\n      buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.\n\n      buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = \"4\".\n      // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.\n\n      buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.\n\n      buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.\n\n      return MathUtils.decimalToHex(buffer[0]) + MathUtils.decimalToHex(buffer[1]) + MathUtils.decimalToHex(buffer[2]) + MathUtils.decimalToHex(buffer[3]) + \"-\" + MathUtils.decimalToHex(buffer[4]) + MathUtils.decimalToHex(buffer[5]) + \"-\" + MathUtils.decimalToHex(buffer[6]) + MathUtils.decimalToHex(buffer[7]) + \"-\" + MathUtils.decimalToHex(buffer[8]) + MathUtils.decimalToHex(buffer[9]) + \"-\" + MathUtils.decimalToHex(buffer[10]) + MathUtils.decimalToHex(buffer[11]) + MathUtils.decimalToHex(buffer[12]) + MathUtils.decimalToHex(buffer[13]) + MathUtils.decimalToHex(buffer[14]) + MathUtils.decimalToHex(buffer[15]);\n    } catch (err) {\n      var guidHolder = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\";\n      var hex = \"0123456789abcdef\";\n      var r = 0;\n      var guidResponse = \"\";\n\n      for (var i = 0; i < 36; i++) {\n        if (guidHolder[i] !== \"-\" && guidHolder[i] !== \"4\") {\n          // each x and y needs to be random\n          r = Math.random() * 16 | 0;\n        }\n\n        if (guidHolder[i] === \"x\") {\n          guidResponse += hex[r];\n        } else if (guidHolder[i] === \"y\") {\n          // clock-seq-and-reserved first hex is filtered and remaining hex values are random\n          r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??\n\n          r |= 0x8; // set pos 3 to 1 as 1???\n\n          guidResponse += hex[r];\n        } else {\n          guidResponse += guidHolder[i];\n        }\n      }\n\n      return guidResponse;\n    }\n  };\n  /**\r\n   * verifies if a string is  GUID\r\n   * @param guid\r\n   */\n\n\n  GuidGenerator.isGuid = function (guid) {\n    var regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\n    return regexGuid.test(guid);\n  };\n\n  return GuidGenerator;\n}();\n\nexport { GuidGenerator };","map":{"version":3,"sources":["../../src/crypto/GuidGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { MathUtils } from \"../utils/MathUtils\";\r\nimport { BrowserCrypto } from \"./BrowserCrypto\";\r\n\r\nexport class GuidGenerator {\r\n\r\n    // browser crypto object used to generate random values\r\n    private cryptoObj: BrowserCrypto;\r\n\r\n    constructor(cryptoObj: BrowserCrypto) {\r\n        this.cryptoObj = cryptoObj;\r\n    }\r\n\r\n    /*\r\n     * RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or\r\n     * pseudo-random numbers.\r\n     * The algorithm is as follows:\r\n     *     Set the two most significant bits (bits 6 and 7) of the\r\n     *        clock_seq_hi_and_reserved to zero and one, respectively.\r\n     *     Set the four most significant bits (bits 12 through 15) of the\r\n     *        time_hi_and_version field to the 4-bit version number from\r\n     *        Section 4.1.3. Version4\r\n     *     Set all the other bits to randomly (or pseudo-randomly) chosen\r\n     *     values.\r\n     * UUID                   = time-low \"-\" time-mid \"-\"time-high-and-version \"-\"clock-seq-reserved and low(2hexOctet)\"-\" node\r\n     * time-low               = 4hexOctet\r\n     * time-mid               = 2hexOctet\r\n     * time-high-and-version  = 2hexOctet\r\n     * clock-seq-and-reserved = hexOctet:\r\n     * clock-seq-low          = hexOctet\r\n     * node                   = 6hexOctet\r\n     * Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\r\n     * y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10\r\n     * y values are 8, 9, A, B\r\n     */\r\n    generateGuid(): string {\r\n        try {\r\n            const buffer: Uint8Array = new Uint8Array(16);\r\n            this.cryptoObj.getRandomValues(buffer);\r\n\r\n            // buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).\r\n            buffer[6] |= 0x40; // buffer[6] | 01000000 will set the 6 bit to 1.\r\n            buffer[6] &= 0x4f; // buffer[6] & 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = \"4\".\r\n\r\n            // buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.\r\n            buffer[8] |= 0x80; // buffer[8] | 10000000 will set the 7 bit to 1.\r\n            buffer[8] &= 0xbf; // buffer[8] & 10111111 will set the 6 bit to 0.\r\n\r\n            return MathUtils.decimalToHex(buffer[0]) + MathUtils.decimalToHex(buffer[1])\r\n                + MathUtils.decimalToHex(buffer[2]) + MathUtils.decimalToHex(buffer[3])\r\n                + \"-\" + MathUtils.decimalToHex(buffer[4]) + MathUtils.decimalToHex(buffer[5])\r\n                + \"-\" + MathUtils.decimalToHex(buffer[6]) + MathUtils.decimalToHex(buffer[7])\r\n                + \"-\" + MathUtils.decimalToHex(buffer[8]) + MathUtils.decimalToHex(buffer[9])\r\n                + \"-\" + MathUtils.decimalToHex(buffer[10]) + MathUtils.decimalToHex(buffer[11])\r\n                + MathUtils.decimalToHex(buffer[12]) + MathUtils.decimalToHex(buffer[13])\r\n                + MathUtils.decimalToHex(buffer[14]) + MathUtils.decimalToHex(buffer[15]);\r\n        }\r\n        catch (err) {\r\n            const guidHolder: string = \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\";\r\n            const hex: string = \"0123456789abcdef\";\r\n            let r: number = 0;\r\n            let guidResponse: string = \"\";\r\n            for (let i: number = 0; i < 36; i++) {\r\n                if (guidHolder[i] !== \"-\" && guidHolder[i] !== \"4\") {\r\n                    // each x and y needs to be random\r\n                    r = Math.random() * 16 | 0;\r\n                }\r\n                if (guidHolder[i] === \"x\") {\r\n                    guidResponse += hex[r];\r\n                } else if (guidHolder[i] === \"y\") {\r\n                    // clock-seq-and-reserved first hex is filtered and remaining hex values are random\r\n                    r &= 0x3; // bit and with 0011 to set pos 2 to zero ?0??\r\n                    r |= 0x8; // set pos 3 to 1 as 1???\r\n                    guidResponse += hex[r];\r\n                } else {\r\n                    guidResponse += guidHolder[i];\r\n                }\r\n            }\r\n            return guidResponse;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * verifies if a string is  GUID\r\n     * @param guid\r\n     */\r\n    static isGuid(guid: string): boolean {\r\n        const regexGuid = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\r\n        return regexGuid.test(guid);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}