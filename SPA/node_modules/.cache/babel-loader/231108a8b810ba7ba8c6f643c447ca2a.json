{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nimport * as tslib_1 from \"tslib\";\nimport { LargeFileUploadTask } from \"./LargeFileUploadTask\";\nimport { getValidRangeSize } from \"./OneDriveLargeFileUploadTaskUtil\";\n/**\r\n * @class\r\n * Class representing OneDriveLargeFileUploadTask\r\n */\n\nexport class OneDriveLargeFileUploadTask extends LargeFileUploadTask {\n  /**\r\n   * @public\r\n   * @constructor\r\n   * Constructs a OneDriveLargeFileUploadTask\r\n   * @param {Client} client - The GraphClient instance\r\n   * @param {FileObject} file - The FileObject holding details of a file that needs to be uploaded\r\n   * @param {LargeFileUploadSession} uploadSession - The upload session to which the upload has to be done\r\n   * @param {LargeFileUploadTaskOptions} options - The upload task options\r\n   * @returns An instance of OneDriveLargeFileUploadTask\r\n   */\n  constructor(client, file, uploadSession, options) {\n    super(client, file, uploadSession, options);\n  }\n  /**\r\n   * @private\r\n   * @static\r\n   * Constructs the create session url for Onedrive\r\n   * @param {string} fileName - The name of the file\r\n   * @param {path} [path = OneDriveLargeFileUploadTask.DEFAULT_UPLOAD_PATH] - The path for the upload\r\n   * @returns The constructed create session url\r\n   */\n\n\n  static constructCreateSessionUrl(fileName, path = OneDriveLargeFileUploadTask.DEFAULT_UPLOAD_PATH) {\n    fileName = fileName.trim();\n    path = path.trim();\n\n    if (path === \"\") {\n      path = \"/\";\n    }\n\n    if (path[0] !== \"/\") {\n      path = `/${path}`;\n    }\n\n    if (path[path.length - 1] !== \"/\") {\n      path = `${path}/`;\n    } // we choose to encode each component of the file path separately because when encoding full URI\n    // with encodeURI, special characters like # or % in the file name doesn't get encoded as desired\n\n\n    return `/me/drive/root:${path.split(\"/\").map(p => encodeURIComponent(p)).join(\"/\")}${encodeURIComponent(fileName)}:/createUploadSession`;\n  }\n  /**\r\n   * @public\r\n   * @static\r\n   * @async\r\n   * Creates a OneDriveLargeFileUploadTask\r\n   * @param {Client} client - The GraphClient instance\r\n   * @param {Blob | Buffer | File} file - File represented as Blob, Buffer or File\r\n   * @param {OneDriveLargeFileUploadOptions} options - The options for upload task\r\n   * @returns The promise that will be resolves to OneDriveLargeFileUploadTask instance\r\n   */\n\n\n  static create(client, file, options) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const name = options.fileName;\n      let content;\n      let size;\n\n      if (typeof Blob !== \"undefined\" && file instanceof Blob) {\n        content = new File([file], name);\n        size = content.size;\n      } else if (typeof File !== \"undefined\" && file instanceof File) {\n        content = file;\n        size = content.size;\n      } else if (typeof Buffer !== \"undefined\" && file instanceof Buffer) {\n        const b = file;\n        size = b.byteLength - b.byteOffset;\n        content = b.buffer.slice(b.byteOffset, b.byteOffset + b.byteLength);\n      }\n\n      try {\n        const requestUrl = OneDriveLargeFileUploadTask.constructCreateSessionUrl(options.fileName, options.path);\n        const session = yield OneDriveLargeFileUploadTask.createUploadSession(client, requestUrl, options.fileName);\n        const rangeSize = getValidRangeSize(options.rangeSize);\n        const fileObj = {\n          name,\n          content,\n          size\n        };\n        return new OneDriveLargeFileUploadTask(client, fileObj, session, {\n          rangeSize\n        });\n      } catch (err) {\n        throw err;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * @static\r\n   * @async\r\n   * Makes request to the server to create an upload session\r\n   * @param {Client} client - The GraphClient instance\r\n   * @param {string} requestUrl - The URL to create the upload session\r\n   * @param {string} fileName - The name of a file to upload, (with extension)\r\n   * @returns The promise that resolves to LargeFileUploadSession\r\n   */\n\n\n  static createUploadSession(client, requestUrl, fileName) {\n    const _super = Object.create(null, {\n      createUploadSession: {\n        get: () => super.createUploadSession\n      }\n    });\n\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      const payload = {\n        item: {\n          \"@microsoft.graph.conflictBehavior\": \"rename\",\n          name: fileName\n        }\n      };\n\n      try {\n        return _super.createUploadSession.call(this, client, requestUrl, payload);\n      } catch (err) {\n        throw err;\n      }\n    });\n  }\n  /**\r\n   * @public\r\n   * Commits upload session to end uploading\r\n   * @param {string} requestUrl - The URL to commit the upload session\r\n   * @returns The promise resolves to committed response\r\n   */\n\n\n  commit(requestUrl) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      try {\n        const payload = {\n          name: this.file.name,\n          \"@microsoft.graph.conflictBehavior\": \"rename\",\n          \"@microsoft.graph.sourceUrl\": this.uploadSession.url\n        };\n        return yield this.client.api(requestUrl).put(payload);\n      } catch (err) {\n        throw err;\n      }\n    });\n  }\n\n}\n/**\r\n * @private\r\n * @static\r\n * Default path for the file being uploaded\r\n */\n\nOneDriveLargeFileUploadTask.DEFAULT_UPLOAD_PATH = \"/\";","map":{"version":3,"sources":["../../../src/tasks/OneDriveLargeFileUploadTask.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AAQH,SAA6C,mBAA7C,QAAoG,uBAApG;AACA,SAAS,iBAAT,QAAkC,mCAAlC;AAeA;;;AAGG;;AACH,OAAM,MAAO,2BAAP,SAA2C,mBAA3C,CAA8D;AAuGnE;;;;;;;;;AASG;AACH,EAAA,WAAA,CAAmB,MAAnB,EAAmC,IAAnC,EAAqD,aAArD,EAA4F,OAA5F,EAA+H;AAC9H,UAAM,MAAN,EAAc,IAAd,EAAoB,aAApB,EAAmC,OAAnC;AACA;AA3GD;;;;;;;AAOG;;;AACqC,SAAzB,yBAAyB,CAAC,QAAD,EAAmB,IAAA,GAAe,2BAA2B,CAAC,mBAA9D,EAAiF;AACxH,IAAA,QAAQ,GAAG,QAAQ,CAAC,IAAT,EAAX;AACA,IAAA,IAAI,GAAG,IAAI,CAAC,IAAL,EAAP;;AACA,QAAI,IAAI,KAAK,EAAb,EAAiB;AAChB,MAAA,IAAI,GAAG,GAAP;AACA;;AACD,QAAI,IAAI,CAAC,CAAD,CAAJ,KAAY,GAAhB,EAAqB;AACpB,MAAA,IAAI,GAAG,IAAI,IAAI,EAAf;AACA;;AACD,QAAI,IAAI,CAAC,IAAI,CAAC,MAAL,GAAc,CAAf,CAAJ,KAA0B,GAA9B,EAAmC;AAClC,MAAA,IAAI,GAAG,GAAG,IAAI,GAAd;AACA,KAXuH,CAYxH;AACA;;;AACA,WAAO,kBAAkB,IAAI,CAC3B,KADuB,CACjB,GADiB,EAEvB,GAFuB,CAElB,CAAD,IAAO,kBAAkB,CAAC,CAAD,CAFN,EAGvB,IAHuB,CAGlB,GAHkB,CAGd,GAAG,kBAAkB,CAAC,QAAD,CAAU,uBAH1C;AAIA;AAED;;;;;;;;;AASG;;;AACuB,SAAN,MAAM,CAAC,MAAD,EAAiB,IAAjB,EAA6C,OAA7C,EAAoF;;AAC7G,YAAM,IAAI,GAAW,OAAO,CAAC,QAA7B;AACA,UAAI,OAAJ;AACA,UAAI,IAAJ;;AACA,UAAI,OAAO,IAAP,KAAgB,WAAhB,IAA+B,IAAI,YAAY,IAAnD,EAAyD;AACxD,QAAA,OAAO,GAAG,IAAI,IAAJ,CAAS,CAAC,IAAD,CAAT,EAAyB,IAAzB,CAAV;AACA,QAAA,IAAI,GAAG,OAAO,CAAC,IAAf;AACA,OAHD,MAGO,IAAI,OAAO,IAAP,KAAgB,WAAhB,IAA+B,IAAI,YAAY,IAAnD,EAAyD;AAC/D,QAAA,OAAO,GAAG,IAAV;AACA,QAAA,IAAI,GAAG,OAAO,CAAC,IAAf;AACA,OAHM,MAGA,IAAI,OAAO,MAAP,KAAkB,WAAlB,IAAiC,IAAI,YAAY,MAArD,EAA6D;AACnE,cAAM,CAAC,GAAG,IAAV;AACA,QAAA,IAAI,GAAG,CAAC,CAAC,UAAF,GAAe,CAAC,CAAC,UAAxB;AACA,QAAA,OAAO,GAAG,CAAC,CAAC,MAAF,CAAS,KAAT,CAAe,CAAC,CAAC,UAAjB,EAA6B,CAAC,CAAC,UAAF,GAAe,CAAC,CAAC,UAA9C,CAAV;AACA;;AAED,UAAI;AACH,cAAM,UAAU,GAAG,2BAA2B,CAAC,yBAA5B,CAAsD,OAAO,CAAC,QAA9D,EAAwE,OAAO,CAAC,IAAhF,CAAnB;AACA,cAAM,OAAO,GAAG,MAAM,2BAA2B,CAAC,mBAA5B,CAAgD,MAAhD,EAAwD,UAAxD,EAAoE,OAAO,CAAC,QAA5E,CAAtB;AACA,cAAM,SAAS,GAAG,iBAAiB,CAAC,OAAO,CAAC,SAAT,CAAnC;AACA,cAAM,OAAO,GAAe;AAC3B,UAAA,IAD2B;AAE3B,UAAA,OAF2B;AAG3B,UAAA;AAH2B,SAA5B;AAKA,eAAO,IAAI,2BAAJ,CAAgC,MAAhC,EAAwC,OAAxC,EAAiD,OAAjD,EAA0D;AAChE,UAAA;AADgE,SAA1D,CAAP;AAGA,OAZD,CAYE,OAAO,GAAP,EAAY;AACb,cAAM,GAAN;AACA;AACD,K;AAAA;AAED;;;;;;;;;AASG;;;AACoC,SAAnB,mBAAmB,CAAC,MAAD,EAAiB,UAAjB,EAAqC,QAArC,EAAqD;;;;;;;;AAC3F,YAAM,OAAO,GAAG;AACf,QAAA,IAAI,EAAE;AACL,+CAAqC,QADhC;AAEL,UAAA,IAAI,EAAE;AAFD;AADS,OAAhB;;AAMA,UAAI;AACH,eAAO,MAAA,CAAM,mBAAN,CAAyB,IAAzB,CAAyB,IAAzB,EAA0B,MAA1B,EAAkC,UAAlC,EAA8C,OAA9C,CAAP;AACA,OAFD,CAEE,OAAO,GAAP,EAAY;AACb,cAAM,GAAN;AACA;AACD,K;AAAA;AAgBD;;;;;AAKG;;;AACU,EAAA,MAAM,CAAC,UAAD,EAAmB;;AACrC,UAAI;AACH,cAAM,OAAO,GAAG;AACf,UAAA,IAAI,EAAE,KAAK,IAAL,CAAU,IADD;AAEf,+CAAqC,QAFtB;AAGf,wCAA8B,KAAK,aAAL,CAAmB;AAHlC,SAAhB;AAKA,eAAO,MAAM,KAAK,MAAL,CAAY,GAAZ,CAAgB,UAAhB,EAA4B,GAA5B,CAAgC,OAAhC,CAAb;AACA,OAPD,CAOE,OAAO,GAAP,EAAY;AACb,cAAM,GAAN;AACA;AACD,K;AAAA;;AAtIkE;AACnE;;;;AAIG;;AACY,2BAAA,CAAA,mBAAA,GAA8B,GAA9B","sourceRoot":"","sourcesContent":["/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\nimport { LargeFileUploadTask } from \"./LargeFileUploadTask\";\r\nimport { getValidRangeSize } from \"./OneDriveLargeFileUploadTaskUtil\";\r\n/**\r\n * @class\r\n * Class representing OneDriveLargeFileUploadTask\r\n */\r\nexport class OneDriveLargeFileUploadTask extends LargeFileUploadTask {\r\n    /**\r\n     * @public\r\n     * @constructor\r\n     * Constructs a OneDriveLargeFileUploadTask\r\n     * @param {Client} client - The GraphClient instance\r\n     * @param {FileObject} file - The FileObject holding details of a file that needs to be uploaded\r\n     * @param {LargeFileUploadSession} uploadSession - The upload session to which the upload has to be done\r\n     * @param {LargeFileUploadTaskOptions} options - The upload task options\r\n     * @returns An instance of OneDriveLargeFileUploadTask\r\n     */\r\n    constructor(client, file, uploadSession, options) {\r\n        super(client, file, uploadSession, options);\r\n    }\r\n    /**\r\n     * @private\r\n     * @static\r\n     * Constructs the create session url for Onedrive\r\n     * @param {string} fileName - The name of the file\r\n     * @param {path} [path = OneDriveLargeFileUploadTask.DEFAULT_UPLOAD_PATH] - The path for the upload\r\n     * @returns The constructed create session url\r\n     */\r\n    static constructCreateSessionUrl(fileName, path = OneDriveLargeFileUploadTask.DEFAULT_UPLOAD_PATH) {\r\n        fileName = fileName.trim();\r\n        path = path.trim();\r\n        if (path === \"\") {\r\n            path = \"/\";\r\n        }\r\n        if (path[0] !== \"/\") {\r\n            path = `/${path}`;\r\n        }\r\n        if (path[path.length - 1] !== \"/\") {\r\n            path = `${path}/`;\r\n        }\r\n        // we choose to encode each component of the file path separately because when encoding full URI\r\n        // with encodeURI, special characters like # or % in the file name doesn't get encoded as desired\r\n        return `/me/drive/root:${path\r\n            .split(\"/\")\r\n            .map((p) => encodeURIComponent(p))\r\n            .join(\"/\")}${encodeURIComponent(fileName)}:/createUploadSession`;\r\n    }\r\n    /**\r\n     * @public\r\n     * @static\r\n     * @async\r\n     * Creates a OneDriveLargeFileUploadTask\r\n     * @param {Client} client - The GraphClient instance\r\n     * @param {Blob | Buffer | File} file - File represented as Blob, Buffer or File\r\n     * @param {OneDriveLargeFileUploadOptions} options - The options for upload task\r\n     * @returns The promise that will be resolves to OneDriveLargeFileUploadTask instance\r\n     */\r\n    static create(client, file, options) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const name = options.fileName;\r\n            let content;\r\n            let size;\r\n            if (typeof Blob !== \"undefined\" && file instanceof Blob) {\r\n                content = new File([file], name);\r\n                size = content.size;\r\n            }\r\n            else if (typeof File !== \"undefined\" && file instanceof File) {\r\n                content = file;\r\n                size = content.size;\r\n            }\r\n            else if (typeof Buffer !== \"undefined\" && file instanceof Buffer) {\r\n                const b = file;\r\n                size = b.byteLength - b.byteOffset;\r\n                content = b.buffer.slice(b.byteOffset, b.byteOffset + b.byteLength);\r\n            }\r\n            try {\r\n                const requestUrl = OneDriveLargeFileUploadTask.constructCreateSessionUrl(options.fileName, options.path);\r\n                const session = yield OneDriveLargeFileUploadTask.createUploadSession(client, requestUrl, options.fileName);\r\n                const rangeSize = getValidRangeSize(options.rangeSize);\r\n                const fileObj = {\r\n                    name,\r\n                    content,\r\n                    size,\r\n                };\r\n                return new OneDriveLargeFileUploadTask(client, fileObj, session, {\r\n                    rangeSize,\r\n                });\r\n            }\r\n            catch (err) {\r\n                throw err;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * @static\r\n     * @async\r\n     * Makes request to the server to create an upload session\r\n     * @param {Client} client - The GraphClient instance\r\n     * @param {string} requestUrl - The URL to create the upload session\r\n     * @param {string} fileName - The name of a file to upload, (with extension)\r\n     * @returns The promise that resolves to LargeFileUploadSession\r\n     */\r\n    static createUploadSession(client, requestUrl, fileName) {\r\n        const _super = Object.create(null, {\r\n            createUploadSession: { get: () => super.createUploadSession }\r\n        });\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            const payload = {\r\n                item: {\r\n                    \"@microsoft.graph.conflictBehavior\": \"rename\",\r\n                    name: fileName,\r\n                },\r\n            };\r\n            try {\r\n                return _super.createUploadSession.call(this, client, requestUrl, payload);\r\n            }\r\n            catch (err) {\r\n                throw err;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @public\r\n     * Commits upload session to end uploading\r\n     * @param {string} requestUrl - The URL to commit the upload session\r\n     * @returns The promise resolves to committed response\r\n     */\r\n    commit(requestUrl) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const payload = {\r\n                    name: this.file.name,\r\n                    \"@microsoft.graph.conflictBehavior\": \"rename\",\r\n                    \"@microsoft.graph.sourceUrl\": this.uploadSession.url,\r\n                };\r\n                return yield this.client.api(requestUrl).put(payload);\r\n            }\r\n            catch (err) {\r\n                throw err;\r\n            }\r\n        });\r\n    }\r\n}\r\n/**\r\n * @private\r\n * @static\r\n * Default path for the file being uploaded\r\n */\r\nOneDriveLargeFileUploadTask.DEFAULT_UPLOAD_PATH = \"/\";\r\n//# sourceMappingURL=OneDriveLargeFileUploadTask.js.map"]},"metadata":{},"sourceType":"module"}