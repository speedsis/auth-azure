{"ast":null,"code":"/*! @azure/msal-browser v2.16.0 2021-07-22 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { StringUtils, UrlString } from '@azure/msal-common';\nimport { InteractionHandler } from './InteractionHandler.js';\nimport { BrowserAuthError } from '../error/BrowserAuthError.js';\nimport { TemporaryCacheKeys, BrowserConstants } from '../utils/BrowserConstants.js';\nimport { PopupUtils } from '../utils/PopupUtils.js';\nimport { BrowserUtils } from '../utils/BrowserUtils.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * This class implements the interaction handler base class for browsers. It is written specifically for handling\r\n * popup window scenarios. It includes functions for monitoring the popup window for a hash.\r\n */\n\nvar PopupHandler = function (_super) {\n  __extends(PopupHandler, _super);\n\n  function PopupHandler(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) {\n    var _this = _super.call(this, authCodeModule, storageImpl, authCodeRequest, browserRequestLogger) || this; // Properly sets this reference for the unload event.\n\n\n    _this.popupUtils = new PopupUtils(storageImpl, browserRequestLogger);\n    return _this;\n  }\n  /**\r\n   * Opens a popup window with given request Url.\r\n   * @param requestUrl\r\n   */\n\n\n  PopupHandler.prototype.initiateAuthRequest = function (requestUrl, params) {\n    // Check that request url is not empty.\n    if (!StringUtils.isEmpty(requestUrl)) {\n      // Set interaction status in the library.\n      this.browserStorage.setTemporaryCache(TemporaryCacheKeys.INTERACTION_STATUS_KEY, BrowserConstants.INTERACTION_IN_PROGRESS_VALUE, true);\n      this.browserRequestLogger.infoPii(\"Navigate to: \" + requestUrl); // Open the popup window to requestUrl.\n\n      return this.popupUtils.openPopup(requestUrl, params.popupName, params.popup);\n    } else {\n      // Throw error if request URL is empty.\n      this.browserRequestLogger.error(\"Navigate url is empty\");\n      throw BrowserAuthError.createEmptyNavigationUriError();\n    }\n  };\n  /**\r\n   * Monitors a window until it loads a url with a known hash, or hits a specified timeout.\r\n   * @param popupWindow - window that is being monitored\r\n   * @param timeout - milliseconds until timeout\r\n   */\n\n\n  PopupHandler.prototype.monitorPopupForHash = function (popupWindow) {\n    var _this = this;\n\n    return this.popupUtils.monitorPopupForSameOrigin(popupWindow).then(function () {\n      var contentHash = popupWindow.location.hash;\n      BrowserUtils.clearHash(popupWindow);\n\n      _this.popupUtils.cleanPopup(popupWindow);\n\n      if (!contentHash) {\n        throw BrowserAuthError.createEmptyHashError(popupWindow.location.href);\n      }\n\n      if (UrlString.hashContainsKnownProperties(contentHash)) {\n        return contentHash;\n      } else {\n        throw BrowserAuthError.createHashDoesNotContainKnownPropertiesError();\n      }\n    });\n  };\n\n  return PopupHandler;\n}(InteractionHandler);\n\nexport { PopupHandler };","map":{"version":3,"sources":["../../src/interaction_handler/PopupHandler.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;;;;;AAkBA;;;;;;AAIkC,EAAA,SAAA,CAAA,YAAA,EAAA,MAAA,CAAA;;AAG9B,WAAA,YAAA,CAAY,cAAZ,EAAqD,WAArD,EAAuF,eAAvF,EAAwI,oBAAxI,EAAoK;AAApK,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,cAAN,EAAsB,WAAtB,EAAmC,eAAnC,EAAoD,oBAApD,KAAyE,IAD7E,CAAoK,C;;;AAIhK,IAAA,KAAI,CAAC,UAAL,GAAkB,IAAI,UAAJ,CAAe,WAAf,EAA4B,oBAA5B,CAAlB;;AACH;;;;;;;AAMD,EAAA,YAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,UAAoB,UAApB,EAAwC,MAAxC,EAA2D;;AAEvD,QAAI,CAAC,WAAW,CAAC,OAAZ,CAAoB,UAApB,CAAL,EAAsC;;AAElC,WAAK,cAAL,CAAoB,iBAApB,CAAsC,kBAAkB,CAAC,sBAAzD,EAAiF,gBAAgB,CAAC,6BAAlG,EAAiI,IAAjI;AACA,WAAK,oBAAL,CAA0B,OAA1B,CAAkC,kBAAgB,UAAlD,EAHkC,C;;AAKlC,aAAO,KAAK,UAAL,CAAgB,SAAhB,CAA0B,UAA1B,EAAsC,MAAM,CAAC,SAA7C,EAAwD,MAAM,CAAC,KAA/D,CAAP;AACH,KAND,MAMO;;AAEH,WAAK,oBAAL,CAA0B,KAA1B,CAAgC,uBAAhC;AACA,YAAM,gBAAgB,CAAC,6BAAjB,EAAN;AACH;AACJ,GAbD;;;;;;;;AAoBA,EAAA,YAAA,CAAA,SAAA,CAAA,mBAAA,GAAA,UAAoB,WAApB,EAAuC;AAAvC,QAAA,KAAA,GAAA,IAAA;;AACI,WAAO,KAAK,UAAL,CAAgB,yBAAhB,CAA0C,WAA1C,EAAuD,IAAvD,CAA4D,YAAA;AAC/D,UAAM,WAAW,GAAG,WAAW,CAAC,QAAZ,CAAqB,IAAzC;AACA,MAAA,YAAY,CAAC,SAAb,CAAuB,WAAvB;;AACA,MAAA,KAAI,CAAC,UAAL,CAAgB,UAAhB,CAA2B,WAA3B;;AAEA,UAAI,CAAC,WAAL,EAAkB;AACd,cAAM,gBAAgB,CAAC,oBAAjB,CAAsC,WAAW,CAAC,QAAZ,CAAqB,IAA3D,CAAN;AACH;;AAED,UAAI,SAAS,CAAC,2BAAV,CAAsC,WAAtC,CAAJ,EAAwD;AACpD,eAAO,WAAP;AACH,OAFD,MAEO;AACH,cAAM,gBAAgB,CAAC,4CAAjB,EAAN;AACH;AACJ,KAdM,CAAP;AAgBH,GAjBD;;AAkBJ,SAAA,YAAA;AApDA,C,CAAkC,kB","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { UrlString, StringUtils, CommonAuthorizationCodeRequest, AuthorizationCodeClient, Logger } from \"@azure/msal-common\";\r\nimport { InteractionHandler, InteractionParams } from \"./InteractionHandler\";\r\nimport { BrowserAuthError } from \"../error/BrowserAuthError\";\r\nimport { BrowserConstants, TemporaryCacheKeys } from \"../utils/BrowserConstants\";\r\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\r\nimport { PopupUtils } from \"../utils/PopupUtils\";\r\nimport { BrowserUtils } from \"../utils/BrowserUtils\";\r\n\r\nexport type PopupParams = InteractionParams & {\r\n    popup?: Window|null;\r\n    popupName: string\r\n};\r\n\r\n/**\r\n * This class implements the interaction handler base class for browsers. It is written specifically for handling\r\n * popup window scenarios. It includes functions for monitoring the popup window for a hash.\r\n */\r\nexport class PopupHandler extends InteractionHandler {\r\n    private popupUtils: PopupUtils;\r\n\r\n    constructor(authCodeModule: AuthorizationCodeClient, storageImpl: BrowserCacheManager, authCodeRequest: CommonAuthorizationCodeRequest, browserRequestLogger: Logger) {\r\n        super(authCodeModule, storageImpl, authCodeRequest, browserRequestLogger);\r\n\r\n        // Properly sets this reference for the unload event.\r\n        this.popupUtils = new PopupUtils(storageImpl, browserRequestLogger);\r\n    }\r\n\r\n    /**\r\n     * Opens a popup window with given request Url.\r\n     * @param requestUrl\r\n     */\r\n    initiateAuthRequest(requestUrl: string, params: PopupParams): Window {\r\n        // Check that request url is not empty.\r\n        if (!StringUtils.isEmpty(requestUrl)) {\r\n            // Set interaction status in the library.\r\n            this.browserStorage.setTemporaryCache(TemporaryCacheKeys.INTERACTION_STATUS_KEY, BrowserConstants.INTERACTION_IN_PROGRESS_VALUE, true);\r\n            this.browserRequestLogger.infoPii(`Navigate to: ${requestUrl}`);\r\n            // Open the popup window to requestUrl.\r\n            return this.popupUtils.openPopup(requestUrl, params.popupName, params.popup);\r\n        } else {\r\n            // Throw error if request URL is empty.\r\n            this.browserRequestLogger.error(\"Navigate url is empty\");\r\n            throw BrowserAuthError.createEmptyNavigationUriError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Monitors a window until it loads a url with a known hash, or hits a specified timeout.\r\n     * @param popupWindow - window that is being monitored\r\n     * @param timeout - milliseconds until timeout\r\n     */\r\n    monitorPopupForHash(popupWindow: Window): Promise<string> {\r\n        return this.popupUtils.monitorPopupForSameOrigin(popupWindow).then(() => {\r\n            const contentHash = popupWindow.location.hash;\r\n            BrowserUtils.clearHash(popupWindow);\r\n            this.popupUtils.cleanPopup(popupWindow);\r\n\r\n            if (!contentHash) {\r\n                throw BrowserAuthError.createEmptyHashError(popupWindow.location.href);\r\n            }\r\n\r\n            if (UrlString.hashContainsKnownProperties(contentHash)) {\r\n                return contentHash;\r\n            } else {\r\n                throw BrowserAuthError.createHashDoesNotContainKnownPropertiesError();\r\n            }\r\n        }\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}