{"ast":null,"code":"/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\nimport * as tslib_1 from \"tslib\";\n/**\r\n * @class\r\n * Class representing HTTPClient\r\n */\n\nexport class HTTPClient {\n  /**\r\n   * @public\r\n   * @constructor\r\n   * Creates an instance of a HTTPClient\r\n   * @param {...Middleware} middleware - The first middleware of the middleware chain or a sequence of all the Middleware handlers\r\n   */\n  constructor(...middleware) {\n    if (!middleware || !middleware.length) {\n      const error = new Error();\n      error.name = \"InvalidMiddlewareChain\";\n      error.message = \"Please provide a default middleware chain or custom middleware chain\";\n      throw error;\n    }\n\n    this.setMiddleware(...middleware);\n  }\n  /**\r\n   * @private\r\n   * Processes the middleware parameter passed to set this.middleware property\r\n   * The calling function should validate if middleware is not undefined or not empty.\r\n   * @param {...Middleware} middleware - The middleware passed\r\n   * @returns Nothing\r\n   */\n\n\n  setMiddleware(...middleware) {\n    if (middleware.length > 1) {\n      this.parseMiddleWareArray(middleware);\n    } else {\n      this.middleware = middleware[0];\n    }\n  }\n  /**\r\n   * @private\r\n   * Processes the middleware array to construct the chain\r\n   * and sets this.middleware property to the first middlware handler of the array\r\n   * The calling function should validate if middleware is not undefined or not empty\r\n   * @param {Middleware[]} middlewareArray - The array of middleware handlers\r\n   * @returns Nothing\r\n   */\n\n\n  parseMiddleWareArray(middlewareArray) {\n    middlewareArray.forEach((element, index) => {\n      if (index < middlewareArray.length - 1) {\n        element.setNext(middlewareArray[index + 1]);\n      }\n    });\n    this.middleware = middlewareArray[0];\n  }\n  /**\r\n   * @public\r\n   * @async\r\n   * To send the request through the middleware chain\r\n   * @param {Context} context - The context of a request\r\n   * @returns A promise that resolves to the Context\r\n   */\n\n\n  sendRequest(context) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n      try {\n        if (typeof context.request === \"string\" && context.options === undefined) {\n          const error = new Error();\n          error.name = \"InvalidRequestOptions\";\n          error.message = \"Unable to execute the middleware, Please provide valid options for a request\";\n          throw error;\n        }\n\n        yield this.middleware.execute(context);\n        return context;\n      } catch (error) {\n        throw error;\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["../../src/HTTPClient.ts"],"names":[],"mappings":"AAAA;;;;;AAKG;;AASH;;;AAGG;;AACH,OAAM,MAAO,UAAP,CAAiB;AAOtB;;;;;AAKG;AACH,EAAA,WAAA,CAAmB,GAAG,UAAtB,EAA8C;AAC7C,QAAI,CAAC,UAAD,IAAe,CAAC,UAAU,CAAC,MAA/B,EAAuC;AACtC,YAAM,KAAK,GAAG,IAAI,KAAJ,EAAd;AACA,MAAA,KAAK,CAAC,IAAN,GAAa,wBAAb;AACA,MAAA,KAAK,CAAC,OAAN,GAAgB,sEAAhB;AACA,YAAM,KAAN;AACA;;AACD,SAAK,aAAL,CAAmB,GAAG,UAAtB;AACA;AAED;;;;;;AAMG;;;AACK,EAAA,aAAa,CAAC,GAAG,UAAJ,EAA4B;AAChD,QAAI,UAAU,CAAC,MAAX,GAAoB,CAAxB,EAA2B;AAC1B,WAAK,oBAAL,CAA0B,UAA1B;AACA,KAFD,MAEO;AACN,WAAK,UAAL,GAAkB,UAAU,CAAC,CAAD,CAA5B;AACA;AACD;AAED;;;;;;;AAOG;;;AACK,EAAA,oBAAoB,CAAC,eAAD,EAA8B;AACzD,IAAA,eAAe,CAAC,OAAhB,CAAwB,CAAC,OAAD,EAAU,KAAV,KAAmB;AAC1C,UAAI,KAAK,GAAG,eAAe,CAAC,MAAhB,GAAyB,CAArC,EAAwC;AACvC,QAAA,OAAO,CAAC,OAAR,CAAgB,eAAe,CAAC,KAAK,GAAG,CAAT,CAA/B;AACA;AACD,KAJD;AAKA,SAAK,UAAL,GAAkB,eAAe,CAAC,CAAD,CAAjC;AACA;AAED;;;;;;AAMG;;;AACU,EAAA,WAAW,CAAC,OAAD,EAAiB;;AACxC,UAAI;AACH,YAAI,OAAO,OAAO,CAAC,OAAf,KAA2B,QAA3B,IAAuC,OAAO,CAAC,OAAR,KAAoB,SAA/D,EAA0E;AACzE,gBAAM,KAAK,GAAG,IAAI,KAAJ,EAAd;AACA,UAAA,KAAK,CAAC,IAAN,GAAa,uBAAb;AACA,UAAA,KAAK,CAAC,OAAN,GAAgB,8EAAhB;AACA,gBAAM,KAAN;AACA;;AACD,cAAM,KAAK,UAAL,CAAgB,OAAhB,CAAwB,OAAxB,CAAN;AACA,eAAO,OAAP;AACA,OATD,CASE,OAAO,KAAP,EAAc;AACf,cAAM,KAAN;AACA;AACD,K;AAAA;;AA3EqB","sourceRoot":"","sourcesContent":["/**\r\n * -------------------------------------------------------------------------------------------\r\n * Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.\r\n * See License in the project root for license information.\r\n * -------------------------------------------------------------------------------------------\r\n */\r\nimport * as tslib_1 from \"tslib\";\r\n/**\r\n * @class\r\n * Class representing HTTPClient\r\n */\r\nexport class HTTPClient {\r\n    /**\r\n     * @public\r\n     * @constructor\r\n     * Creates an instance of a HTTPClient\r\n     * @param {...Middleware} middleware - The first middleware of the middleware chain or a sequence of all the Middleware handlers\r\n     */\r\n    constructor(...middleware) {\r\n        if (!middleware || !middleware.length) {\r\n            const error = new Error();\r\n            error.name = \"InvalidMiddlewareChain\";\r\n            error.message = \"Please provide a default middleware chain or custom middleware chain\";\r\n            throw error;\r\n        }\r\n        this.setMiddleware(...middleware);\r\n    }\r\n    /**\r\n     * @private\r\n     * Processes the middleware parameter passed to set this.middleware property\r\n     * The calling function should validate if middleware is not undefined or not empty.\r\n     * @param {...Middleware} middleware - The middleware passed\r\n     * @returns Nothing\r\n     */\r\n    setMiddleware(...middleware) {\r\n        if (middleware.length > 1) {\r\n            this.parseMiddleWareArray(middleware);\r\n        }\r\n        else {\r\n            this.middleware = middleware[0];\r\n        }\r\n    }\r\n    /**\r\n     * @private\r\n     * Processes the middleware array to construct the chain\r\n     * and sets this.middleware property to the first middlware handler of the array\r\n     * The calling function should validate if middleware is not undefined or not empty\r\n     * @param {Middleware[]} middlewareArray - The array of middleware handlers\r\n     * @returns Nothing\r\n     */\r\n    parseMiddleWareArray(middlewareArray) {\r\n        middlewareArray.forEach((element, index) => {\r\n            if (index < middlewareArray.length - 1) {\r\n                element.setNext(middlewareArray[index + 1]);\r\n            }\r\n        });\r\n        this.middleware = middlewareArray[0];\r\n    }\r\n    /**\r\n     * @public\r\n     * @async\r\n     * To send the request through the middleware chain\r\n     * @param {Context} context - The context of a request\r\n     * @returns A promise that resolves to the Context\r\n     */\r\n    sendRequest(context) {\r\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                if (typeof context.request === \"string\" && context.options === undefined) {\r\n                    const error = new Error();\r\n                    error.name = \"InvalidRequestOptions\";\r\n                    error.message = \"Unable to execute the middleware, Please provide valid options for a request\";\r\n                    throw error;\r\n                }\r\n                yield this.middleware.execute(context);\r\n                return context;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=HTTPClient.js.map"]},"metadata":{},"sourceType":"module"}