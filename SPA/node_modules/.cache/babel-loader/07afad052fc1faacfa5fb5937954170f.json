{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __extends } from '../_virtual/_tslib.js';\nimport { AuthError as AuthError$1 } from './AuthError.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\n/**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\n\nvar ClientAuthErrorMessage = {\n  clientInfoDecodingError: {\n    code: \"client_info_decoding_error\",\n    desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\"\n  },\n  clientInfoEmptyError: {\n    code: \"client_info_empty_error\",\n    desc: \"The client info was empty. Please review the trace to determine the root cause.\"\n  },\n  tokenParsingError: {\n    code: \"token_parsing_error\",\n    desc: \"Token cannot be parsed. Please review stack trace to determine root cause.\"\n  },\n  nullOrEmptyToken: {\n    code: \"null_or_empty_token\",\n    desc: \"The token is null or empty. Please review the trace to determine the root cause.\"\n  },\n  endpointResolutionError: {\n    code: \"endpoints_resolution_error\",\n    desc: \"Error: could not resolve endpoints. Please check network and try again.\"\n  },\n  networkError: {\n    code: \"network_error\",\n    desc: \"Network request failed. Please check network trace to determine root cause.\"\n  },\n  unableToGetOpenidConfigError: {\n    code: \"openid_config_error\",\n    desc: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\"\n  },\n  hashNotDeserialized: {\n    code: \"hash_not_deserialized\",\n    desc: \"The hash parameters could not be deserialized. Please review the trace to determine the root cause.\"\n  },\n  blankGuidGenerated: {\n    code: \"blank_guid_generated\",\n    desc: \"The guid generated was blank. Please review the trace to determine the root cause.\"\n  },\n  invalidStateError: {\n    code: \"invalid_state\",\n    desc: \"State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState().\"\n  },\n  stateMismatchError: {\n    code: \"state_mismatch\",\n    desc: \"State mismatch error. Please check your network. Continued requests may cause cache overflow.\"\n  },\n  stateNotFoundError: {\n    code: \"state_not_found\",\n    desc: \"State not found\"\n  },\n  nonceMismatchError: {\n    code: \"nonce_mismatch\",\n    desc: \"Nonce mismatch error. This may be caused by a race condition in concurrent requests.\"\n  },\n  nonceNotFoundError: {\n    code: \"nonce_not_found\",\n    desc: \"nonce not found\"\n  },\n  noTokensFoundError: {\n    code: \"no_tokens_found\",\n    desc: \"No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken().\"\n  },\n  multipleMatchingTokens: {\n    code: \"multiple_matching_tokens\",\n    desc: \"The cache contains multiple tokens satisfying the requirements. \" + \"Call AcquireToken again providing more requirements such as authority or account.\"\n  },\n  multipleMatchingAccounts: {\n    code: \"multiple_matching_accounts\",\n    desc: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\"\n  },\n  multipleMatchingAppMetadata: {\n    code: \"multiple_matching_appMetadata\",\n    desc: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\"\n  },\n  tokenRequestCannotBeMade: {\n    code: \"request_cannot_be_made\",\n    desc: \"Token request cannot be made without authorization code or refresh token.\"\n  },\n  appendEmptyScopeError: {\n    code: \"cannot_append_empty_scope\",\n    desc: \"Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info.\"\n  },\n  removeEmptyScopeError: {\n    code: \"cannot_remove_empty_scope\",\n    desc: \"Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info.\"\n  },\n  appendScopeSetError: {\n    code: \"cannot_append_scopeset\",\n    desc: \"Cannot append ScopeSet due to error.\"\n  },\n  emptyInputScopeSetError: {\n    code: \"empty_input_scopeset\",\n    desc: \"Empty input ScopeSet cannot be processed.\"\n  },\n  DeviceCodePollingCancelled: {\n    code: \"device_code_polling_cancelled\",\n    desc: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\"\n  },\n  DeviceCodeExpired: {\n    code: \"device_code_expired\",\n    desc: \"Device code is expired.\"\n  },\n  DeviceCodeUnknownError: {\n    code: \"device_code_unknown_error\",\n    desc: \"Device code stopped polling for unknown reasons.\"\n  },\n  NoAccountInSilentRequest: {\n    code: \"no_account_in_silent_request\",\n    desc: \"Please pass an account object, silent flow is not supported without account information\"\n  },\n  invalidCacheRecord: {\n    code: \"invalid_cache_record\",\n    desc: \"Cache record object was null or undefined.\"\n  },\n  invalidCacheEnvironment: {\n    code: \"invalid_cache_environment\",\n    desc: \"Invalid environment when attempting to create cache entry\"\n  },\n  noAccountFound: {\n    code: \"no_account_found\",\n    desc: \"No account found in cache for given key.\"\n  },\n  CachePluginError: {\n    code: \"no cache plugin set on CacheManager\",\n    desc: \"ICachePlugin needs to be set before using readFromStorage or writeFromStorage\"\n  },\n  noCryptoObj: {\n    code: \"no_crypto_object\",\n    desc: \"No crypto object detected. This is required for the following operation: \"\n  },\n  invalidCacheType: {\n    code: \"invalid_cache_type\",\n    desc: \"Invalid cache type\"\n  },\n  unexpectedAccountType: {\n    code: \"unexpected_account_type\",\n    desc: \"Unexpected account type.\"\n  },\n  unexpectedCredentialType: {\n    code: \"unexpected_credential_type\",\n    desc: \"Unexpected credential type.\"\n  },\n  invalidAssertion: {\n    code: \"invalid_assertion\",\n    desc: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\"\n  },\n  invalidClientCredential: {\n    code: \"invalid_client_credential\",\n    desc: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\"\n  },\n  tokenRefreshRequired: {\n    code: \"token_refresh_required\",\n    desc: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\"\n  },\n  userTimeoutReached: {\n    code: \"user_timeout_reached\",\n    desc: \"User defined timeout for device code polling reached\"\n  },\n  tokenClaimsRequired: {\n    code: \"token_claims_cnf_required_for_signedjwt\",\n    desc: \"Cannot generate a POP jwt if the token_claims are not populated\"\n  },\n  noAuthorizationCodeFromServer: {\n    code: \"authorization_code_missing_from_server_response\",\n    desc: \"Server response does not contain an authorization code to proceed\"\n  },\n  noAzureRegionDetected: {\n    code: \"no_azure_region_detected\",\n    desc: \"No azure region was detected and no fallback was made available\"\n  },\n  accessTokenEntityNullError: {\n    code: \"access_token_entity_null\",\n    desc: \"Access token entity is null, please check logs and cache to ensure a valid access token is present.\"\n  }\n};\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\n\nvar ClientAuthError = function (_super) {\n  __extends(ClientAuthError, _super);\n\n  function ClientAuthError(errorCode, errorMessage) {\n    var _this = _super.call(this, errorCode, errorMessage) || this;\n\n    _this.name = \"ClientAuthError\";\n    Object.setPrototypeOf(_this, ClientAuthError.prototype);\n    return _this;\n  }\n  /**\r\n   * Creates an error thrown when client info object doesn't decode correctly.\r\n   * @param caughtError\r\n   */\n\n\n  ClientAuthError.createClientInfoDecodingError = function (caughtError) {\n    return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code, ClientAuthErrorMessage.clientInfoDecodingError.desc + \" Failed with error: \" + caughtError);\n  };\n  /**\r\n   * Creates an error thrown if the client info is empty.\r\n   * @param rawClientInfo\r\n   */\n\n\n  ClientAuthError.createClientInfoEmptyError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code, \"\" + ClientAuthErrorMessage.clientInfoEmptyError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the id token extraction errors out.\r\n   * @param err\r\n   */\n\n\n  ClientAuthError.createTokenParsingError = function (caughtExtractionError) {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code, ClientAuthErrorMessage.tokenParsingError.desc + \" Failed with error: \" + caughtExtractionError);\n  };\n  /**\r\n   * Creates an error thrown when the id token string is null or empty.\r\n   * @param invalidRawTokenString\r\n   */\n\n\n  ClientAuthError.createTokenNullOrEmptyError = function (invalidRawTokenString) {\n    return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code, ClientAuthErrorMessage.nullOrEmptyToken.desc + \" Raw Token Value: \" + invalidRawTokenString);\n  };\n  /**\r\n   * Creates an error thrown when the endpoint discovery doesn't complete correctly.\r\n   */\n\n\n  ClientAuthError.createEndpointDiscoveryIncompleteError = function (errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code, ClientAuthErrorMessage.endpointResolutionError.desc + \" Detail: \" + errDetail);\n  };\n  /**\r\n   * Creates an error thrown when the fetch client throws\r\n   */\n\n\n  ClientAuthError.createNetworkError = function (endpoint, errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.networkError.code, ClientAuthErrorMessage.networkError.desc + \" | Fetch client threw: \" + errDetail + \" | Attempted to reach: \" + endpoint.split(\"?\")[0]);\n  };\n  /**\r\n   * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data\r\n   */\n\n\n  ClientAuthError.createUnableToGetOpenidConfigError = function (errDetail) {\n    return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code, ClientAuthErrorMessage.unableToGetOpenidConfigError.desc + \" Attempted to retrieve endpoints from: \" + errDetail);\n  };\n  /**\r\n   * Creates an error thrown when the hash cannot be deserialized.\r\n   * @param hashParamObj\r\n   */\n\n\n  ClientAuthError.createHashNotDeserializedError = function (hashParamObj) {\n    return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code, ClientAuthErrorMessage.hashNotDeserialized.desc + \" Given Object: \" + hashParamObj);\n  };\n  /**\r\n   * Creates an error thrown when the state cannot be parsed.\r\n   * @param invalidState\r\n   */\n\n\n  ClientAuthError.createInvalidStateError = function (invalidState, errorString) {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code, ClientAuthErrorMessage.invalidStateError.desc + \" Invalid State: \" + invalidState + \", Root Err: \" + errorString);\n  };\n  /**\r\n   * Creates an error thrown when two states do not match.\r\n   */\n\n\n  ClientAuthError.createStateMismatchError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code, ClientAuthErrorMessage.stateMismatchError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the state is not present\r\n   * @param missingState\r\n   */\n\n\n  ClientAuthError.createStateNotFoundError = function (missingState) {\n    return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code, ClientAuthErrorMessage.stateNotFoundError.desc + \":  \" + missingState);\n  };\n  /**\r\n   * Creates an error thrown when the nonce does not match.\r\n   */\n\n\n  ClientAuthError.createNonceMismatchError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code, ClientAuthErrorMessage.nonceMismatchError.desc);\n  };\n  /**\r\n   * Creates an error thrown when the mnonce is not present\r\n   * @param missingNonce\r\n   */\n\n\n  ClientAuthError.createNonceNotFoundError = function (missingNonce) {\n    return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code, ClientAuthErrorMessage.nonceNotFoundError.desc + \":  \" + missingNonce);\n  };\n  /**\r\n   * Creates an error thrown when the authorization code required for a token request is null or empty.\r\n   */\n\n\n  ClientAuthError.createNoTokensFoundError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.noTokensFoundError.code, ClientAuthErrorMessage.noTokensFoundError.desc);\n  };\n  /**\r\n   * Throws error when multiple tokens are in cache.\r\n   */\n\n\n  ClientAuthError.createMultipleMatchingTokensInCacheError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code, ClientAuthErrorMessage.multipleMatchingTokens.desc + \".\");\n  };\n  /**\r\n   * Throws error when multiple accounts are in cache for the given params\r\n   */\n\n\n  ClientAuthError.createMultipleMatchingAccountsInCacheError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code, ClientAuthErrorMessage.multipleMatchingAccounts.desc);\n  };\n  /**\r\n   * Throws error when multiple appMetada are in cache for the given clientId.\r\n   */\n\n\n  ClientAuthError.createMultipleMatchingAppMetadataInCacheError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code, ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);\n  };\n  /**\r\n   * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.\r\n   */\n\n\n  ClientAuthError.createTokenRequestCannotBeMadeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);\n  };\n  /**\r\n   * Throws error when attempting to append a null, undefined or empty scope to a set\r\n   * @param givenScope\r\n   */\n\n\n  ClientAuthError.createAppendEmptyScopeToSetError = function (givenScope) {\n    return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, ClientAuthErrorMessage.appendEmptyScopeError.desc + \" Given Scope: \" + givenScope);\n  };\n  /**\r\n   * Throws error when attempting to append a null, undefined or empty scope to a set\r\n   * @param givenScope\r\n   */\n\n\n  ClientAuthError.createRemoveEmptyScopeFromSetError = function (givenScope) {\n    return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, ClientAuthErrorMessage.removeEmptyScopeError.desc + \" Given Scope: \" + givenScope);\n  };\n  /**\r\n   * Throws error when attempting to append null or empty ScopeSet.\r\n   * @param appendError\r\n   */\n\n\n  ClientAuthError.createAppendScopeSetError = function (appendError) {\n    return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, ClientAuthErrorMessage.appendScopeSetError.desc + \" Detail Error: \" + appendError);\n  };\n  /**\r\n   * Throws error if ScopeSet is null or undefined.\r\n   * @param givenScopeSet\r\n   */\n\n\n  ClientAuthError.createEmptyInputScopeSetError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, \"\" + ClientAuthErrorMessage.emptyInputScopeSetError.desc);\n  };\n  /**\r\n   * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow\r\n   */\n\n\n  ClientAuthError.createDeviceCodeCancelledError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, \"\" + ClientAuthErrorMessage.DeviceCodePollingCancelled.desc);\n  };\n  /**\r\n   * Throws error if device code is expired\r\n   */\n\n\n  ClientAuthError.createDeviceCodeExpiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, \"\" + ClientAuthErrorMessage.DeviceCodeExpired.desc);\n  };\n  /**\r\n   * Throws error if device code is expired\r\n   */\n\n\n  ClientAuthError.createDeviceCodeUnknownError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeUnknownError.code, \"\" + ClientAuthErrorMessage.DeviceCodeUnknownError.desc);\n  };\n  /**\r\n   * Throws error when silent requests are made without an account object\r\n   */\n\n\n  ClientAuthError.createNoAccountInSilentRequestError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, \"\" + ClientAuthErrorMessage.NoAccountInSilentRequest.desc);\n  };\n  /**\r\n   * Throws error when cache record is null or undefined.\r\n   */\n\n\n  ClientAuthError.createNullOrUndefinedCacheRecord = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);\n  };\n  /**\r\n   * Throws error when provided environment is not part of the CloudDiscoveryMetadata object\r\n   */\n\n\n  ClientAuthError.createInvalidCacheEnvironmentError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);\n  };\n  /**\r\n   * Throws error when account is not found in cache.\r\n   */\n\n\n  ClientAuthError.createNoAccountFoundError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);\n  };\n  /**\r\n   * Throws error if ICachePlugin not set on CacheManager.\r\n   */\n\n\n  ClientAuthError.createCachePluginError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, \"\" + ClientAuthErrorMessage.CachePluginError.desc);\n  };\n  /**\r\n   * Throws error if crypto object not found.\r\n   * @param operationName\r\n   */\n\n\n  ClientAuthError.createNoCryptoObjectError = function (operationName) {\n    return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, \"\" + ClientAuthErrorMessage.noCryptoObj.desc + operationName);\n  };\n  /**\r\n   * Throws error if cache type is invalid.\r\n   */\n\n\n  ClientAuthError.createInvalidCacheTypeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, \"\" + ClientAuthErrorMessage.invalidCacheType.desc);\n  };\n  /**\r\n   * Throws error if unexpected account type.\r\n   */\n\n\n  ClientAuthError.createUnexpectedAccountTypeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, \"\" + ClientAuthErrorMessage.unexpectedAccountType.desc);\n  };\n  /**\r\n   * Throws error if unexpected credential type.\r\n   */\n\n\n  ClientAuthError.createUnexpectedCredentialTypeError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, \"\" + ClientAuthErrorMessage.unexpectedCredentialType.desc);\n  };\n  /**\r\n   * Throws error if client assertion is not valid.\r\n   */\n\n\n  ClientAuthError.createInvalidAssertionError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, \"\" + ClientAuthErrorMessage.invalidAssertion.desc);\n  };\n  /**\r\n   * Throws error if client assertion is not valid.\r\n   */\n\n\n  ClientAuthError.createInvalidCredentialError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, \"\" + ClientAuthErrorMessage.invalidClientCredential.desc);\n  };\n  /**\r\n   * Throws error if token cannot be retrieved from cache due to refresh being required.\r\n   */\n\n\n  ClientAuthError.createRefreshRequiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);\n  };\n  /**\r\n   * Throws error if the user defined timeout is reached.\r\n   */\n\n\n  ClientAuthError.createUserTimeoutReachedError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);\n  };\n  /*\r\n   * Throws error if token claims are not populated for a signed jwt generation\r\n   */\n\n\n  ClientAuthError.createTokenClaimsRequiredError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);\n  };\n  /**\r\n   * Throws error when the authorization code is missing from the server response\r\n   */\n\n\n  ClientAuthError.createNoAuthCodeInServerResponseError = function () {\n    return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);\n  };\n\n  return ClientAuthError;\n}(AuthError$1);\n\nexport { ClientAuthError, ClientAuthErrorMessage };","map":{"version":3,"sources":["../../src/error/ClientAuthError.ts"],"names":["AuthError"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AuthError } from \"./AuthError\";\r\n\r\n/**\r\n * ClientAuthErrorMessage class containing string constants used by error codes and messages.\r\n */\r\nexport const ClientAuthErrorMessage = {\r\n    clientInfoDecodingError: {\r\n        code: \"client_info_decoding_error\",\r\n        desc: \"The client info could not be parsed/decoded correctly. Please review the trace to determine the root cause.\"\r\n    },\r\n    clientInfoEmptyError: {\r\n        code: \"client_info_empty_error\",\r\n        desc: \"The client info was empty. Please review the trace to determine the root cause.\"\r\n    },\r\n    tokenParsingError: {\r\n        code: \"token_parsing_error\",\r\n        desc: \"Token cannot be parsed. Please review stack trace to determine root cause.\"\r\n    },\r\n    nullOrEmptyToken: {\r\n        code: \"null_or_empty_token\",\r\n        desc: \"The token is null or empty. Please review the trace to determine the root cause.\"\r\n    },\r\n    endpointResolutionError: {\r\n        code: \"endpoints_resolution_error\",\r\n        desc: \"Error: could not resolve endpoints. Please check network and try again.\"\r\n    },\r\n    networkError: {\r\n        code: \"network_error\",\r\n        desc: \"Network request failed. Please check network trace to determine root cause.\"\r\n    },\r\n    unableToGetOpenidConfigError: {\r\n        code: \"openid_config_error\",\r\n        desc: \"Could not retrieve endpoints. Check your authority and verify the .well-known/openid-configuration endpoint returns the required endpoints.\"\r\n    },\r\n    hashNotDeserialized: {\r\n        code: \"hash_not_deserialized\",\r\n        desc: \"The hash parameters could not be deserialized. Please review the trace to determine the root cause.\"\r\n    },\r\n    blankGuidGenerated: {\r\n        code: \"blank_guid_generated\",\r\n        desc: \"The guid generated was blank. Please review the trace to determine the root cause.\"\r\n    },\r\n    invalidStateError: {\r\n        code: \"invalid_state\",\r\n        desc: \"State was not the expected format. Please check the logs to determine whether the request was sent using ProtocolUtils.setRequestState().\"\r\n    },\r\n    stateMismatchError: {\r\n        code: \"state_mismatch\",\r\n        desc: \"State mismatch error. Please check your network. Continued requests may cause cache overflow.\"\r\n    },\r\n    stateNotFoundError: {\r\n        code: \"state_not_found\",\r\n        desc: \"State not found\"\r\n    },\r\n    nonceMismatchError: {\r\n        code: \"nonce_mismatch\",\r\n        desc: \"Nonce mismatch error. This may be caused by a race condition in concurrent requests.\"\r\n    },\r\n    nonceNotFoundError: {\r\n        code: \"nonce_not_found\",\r\n        desc: \"nonce not found\"\r\n    },\r\n    noTokensFoundError: {\r\n        code: \"no_tokens_found\",\r\n        desc: \"No tokens were found for the given scopes, and no authorization code was passed to acquireToken. You must retrieve an authorization code before making a call to acquireToken().\"\r\n    },\r\n    multipleMatchingTokens: {\r\n        code: \"multiple_matching_tokens\",\r\n        desc: \"The cache contains multiple tokens satisfying the requirements. \" +\r\n            \"Call AcquireToken again providing more requirements such as authority or account.\"\r\n    },\r\n    multipleMatchingAccounts: {\r\n        code: \"multiple_matching_accounts\",\r\n        desc: \"The cache contains multiple accounts satisfying the given parameters. Please pass more info to obtain the correct account\"\r\n    },\r\n    multipleMatchingAppMetadata: {\r\n        code: \"multiple_matching_appMetadata\",\r\n        desc: \"The cache contains multiple appMetadata satisfying the given parameters. Please pass more info to obtain the correct appMetadata\"\r\n    },\r\n    tokenRequestCannotBeMade: {\r\n        code: \"request_cannot_be_made\",\r\n        desc: \"Token request cannot be made without authorization code or refresh token.\"\r\n    },\r\n    appendEmptyScopeError: {\r\n        code: \"cannot_append_empty_scope\",\r\n        desc: \"Cannot append null or empty scope to ScopeSet. Please check the stack trace for more info.\"\r\n    },\r\n    removeEmptyScopeError: {\r\n        code: \"cannot_remove_empty_scope\",\r\n        desc: \"Cannot remove null or empty scope from ScopeSet. Please check the stack trace for more info.\"\r\n    },\r\n    appendScopeSetError: {\r\n        code: \"cannot_append_scopeset\",\r\n        desc: \"Cannot append ScopeSet due to error.\"\r\n    },\r\n    emptyInputScopeSetError: {\r\n        code: \"empty_input_scopeset\",\r\n        desc: \"Empty input ScopeSet cannot be processed.\"\r\n    },\r\n    DeviceCodePollingCancelled: {\r\n        code: \"device_code_polling_cancelled\",\r\n        desc: \"Caller has cancelled token endpoint polling during device code flow by setting DeviceCodeRequest.cancel = true.\"\r\n    },\r\n    DeviceCodeExpired: {\r\n        code: \"device_code_expired\",\r\n        desc: \"Device code is expired.\"\r\n    },\r\n    DeviceCodeUnknownError: {\r\n        code: \"device_code_unknown_error\",\r\n        desc: \"Device code stopped polling for unknown reasons.\"\r\n    },\r\n    NoAccountInSilentRequest: {\r\n        code: \"no_account_in_silent_request\",\r\n        desc: \"Please pass an account object, silent flow is not supported without account information\"\r\n    },\r\n    invalidCacheRecord: {\r\n        code: \"invalid_cache_record\",\r\n        desc: \"Cache record object was null or undefined.\"\r\n    },\r\n    invalidCacheEnvironment: {\r\n        code: \"invalid_cache_environment\",\r\n        desc: \"Invalid environment when attempting to create cache entry\"\r\n    },\r\n    noAccountFound: {\r\n        code: \"no_account_found\",\r\n        desc: \"No account found in cache for given key.\"\r\n    },\r\n    CachePluginError: {\r\n        code: \"no cache plugin set on CacheManager\",\r\n        desc: \"ICachePlugin needs to be set before using readFromStorage or writeFromStorage\"\r\n    },\r\n    noCryptoObj: {\r\n        code: \"no_crypto_object\",\r\n        desc: \"No crypto object detected. This is required for the following operation: \"\r\n    },\r\n    invalidCacheType: {\r\n        code: \"invalid_cache_type\",\r\n        desc: \"Invalid cache type\"\r\n    },\r\n    unexpectedAccountType: {\r\n        code: \"unexpected_account_type\",\r\n        desc: \"Unexpected account type.\"\r\n    },\r\n    unexpectedCredentialType: {\r\n        code: \"unexpected_credential_type\",\r\n        desc: \"Unexpected credential type.\"\r\n    },\r\n    invalidAssertion: {\r\n        code: \"invalid_assertion\",\r\n        desc: \"Client assertion must meet requirements described in https://tools.ietf.org/html/rfc7515\"\r\n    },\r\n    invalidClientCredential: {\r\n        code: \"invalid_client_credential\",\r\n        desc: \"Client credential (secret, certificate, or assertion) must not be empty when creating a confidential client. An application should at most have one credential\"\r\n    },\r\n    tokenRefreshRequired: {\r\n        code: \"token_refresh_required\",\r\n        desc: \"Cannot return token from cache because it must be refreshed. This may be due to one of the following reasons: forceRefresh parameter is set to true, claims have been requested, there is no cached access token or it is expired.\"\r\n    },\r\n    userTimeoutReached: {\r\n        code: \"user_timeout_reached\",\r\n        desc: \"User defined timeout for device code polling reached\",\r\n    },\r\n    tokenClaimsRequired: {\r\n        code: \"token_claims_cnf_required_for_signedjwt\",\r\n        desc: \"Cannot generate a POP jwt if the token_claims are not populated\"\r\n    },\r\n    noAuthorizationCodeFromServer: {\r\n        code: \"authorization_code_missing_from_server_response\",\r\n        desc: \"Server response does not contain an authorization code to proceed\"\r\n    },\r\n    noAzureRegionDetected: {\r\n        code: \"no_azure_region_detected\",\r\n        desc: \"No azure region was detected and no fallback was made available\"\r\n    },\r\n    accessTokenEntityNullError: {\r\n        code: \"access_token_entity_null\",\r\n        desc: \"Access token entity is null, please check logs and cache to ensure a valid access token is present.\"\r\n    }\r\n};\r\n\r\n/**\r\n * Error thrown when there is an error in the client code running on the browser.\r\n */\r\nexport class ClientAuthError extends AuthError {\r\n\r\n    constructor(errorCode: string, errorMessage?: string) {\r\n        super(errorCode, errorMessage);\r\n        this.name = \"ClientAuthError\";\r\n\r\n        Object.setPrototypeOf(this, ClientAuthError.prototype);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when client info object doesn't decode correctly.\r\n     * @param caughtError\r\n     */\r\n    static createClientInfoDecodingError(caughtError: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoDecodingError.code,\r\n            `${ClientAuthErrorMessage.clientInfoDecodingError.desc} Failed with error: ${caughtError}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown if the client info is empty.\r\n     * @param rawClientInfo\r\n     */\r\n    static createClientInfoEmptyError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.clientInfoEmptyError.code,\r\n            `${ClientAuthErrorMessage.clientInfoEmptyError.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the id token extraction errors out.\r\n     * @param err\r\n     */\r\n    static createTokenParsingError(caughtExtractionError: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenParsingError.code,\r\n            `${ClientAuthErrorMessage.tokenParsingError.desc} Failed with error: ${caughtExtractionError}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the id token string is null or empty.\r\n     * @param invalidRawTokenString\r\n     */\r\n    static createTokenNullOrEmptyError(invalidRawTokenString: string) : ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nullOrEmptyToken.code,\r\n            `${ClientAuthErrorMessage.nullOrEmptyToken.desc} Raw Token Value: ${invalidRawTokenString}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the endpoint discovery doesn't complete correctly.\r\n     */\r\n    static createEndpointDiscoveryIncompleteError(errDetail: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.endpointResolutionError.code,\r\n            `${ClientAuthErrorMessage.endpointResolutionError.desc} Detail: ${errDetail}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the fetch client throws\r\n     */\r\n    static createNetworkError(endpoint: string, errDetail: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.networkError.code,\r\n            `${ClientAuthErrorMessage.networkError.desc} | Fetch client threw: ${errDetail} | Attempted to reach: ${endpoint.split(\"?\")[0]}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the openid-configuration endpoint cannot be reached or does not contain the required data\r\n     */\r\n    static createUnableToGetOpenidConfigError(errDetail: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.unableToGetOpenidConfigError.code,\r\n            `${ClientAuthErrorMessage.unableToGetOpenidConfigError.desc} Attempted to retrieve endpoints from: ${errDetail}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the hash cannot be deserialized.\r\n     * @param hashParamObj\r\n     */\r\n    static createHashNotDeserializedError(hashParamObj: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.hashNotDeserialized.code,\r\n            `${ClientAuthErrorMessage.hashNotDeserialized.desc} Given Object: ${hashParamObj}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the state cannot be parsed.\r\n     * @param invalidState\r\n     */\r\n    static createInvalidStateError(invalidState: string, errorString?: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidStateError.code,\r\n            `${ClientAuthErrorMessage.invalidStateError.desc} Invalid State: ${invalidState}, Root Err: ${errorString}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when two states do not match.\r\n     */\r\n    static createStateMismatchError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.stateMismatchError.code,\r\n            ClientAuthErrorMessage.stateMismatchError.desc);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the state is not present\r\n     * @param missingState\r\n     */\r\n    static createStateNotFoundError(missingState: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.stateNotFoundError.code,\r\n            `${ClientAuthErrorMessage.stateNotFoundError.desc}:  ${missingState}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the nonce does not match.\r\n     */\r\n    static createNonceMismatchError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nonceMismatchError.code,\r\n            ClientAuthErrorMessage.nonceMismatchError.desc);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the mnonce is not present\r\n     * @param missingNonce\r\n     */\r\n    static createNonceNotFoundError(missingNonce: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.nonceNotFoundError.code,\r\n            `${ClientAuthErrorMessage.nonceNotFoundError.desc}:  ${missingNonce}`);\r\n    }\r\n\r\n    /**\r\n     * Creates an error thrown when the authorization code required for a token request is null or empty.\r\n     */\r\n    static createNoTokensFoundError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noTokensFoundError.code, ClientAuthErrorMessage.noTokensFoundError.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws error when multiple tokens are in cache.\r\n     */\r\n    static createMultipleMatchingTokensInCacheError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingTokens.code,\r\n            `${ClientAuthErrorMessage.multipleMatchingTokens.desc}.`);\r\n    }\r\n\r\n    /**\r\n     * Throws error when multiple accounts are in cache for the given params\r\n     */\r\n    static createMultipleMatchingAccountsInCacheError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAccounts.code,\r\n            ClientAuthErrorMessage.multipleMatchingAccounts.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws error when multiple appMetada are in cache for the given clientId.\r\n     */\r\n    static createMultipleMatchingAppMetadataInCacheError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.multipleMatchingAppMetadata.code,\r\n            ClientAuthErrorMessage.multipleMatchingAppMetadata.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws error when no auth code or refresh token is given to ServerTokenRequestParameters.\r\n     */\r\n    static createTokenRequestCannotBeMadeError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRequestCannotBeMade.code, ClientAuthErrorMessage.tokenRequestCannotBeMade.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws error when attempting to append a null, undefined or empty scope to a set\r\n     * @param givenScope\r\n     */\r\n    static createAppendEmptyScopeToSetError(givenScope: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.appendEmptyScopeError.code, `${ClientAuthErrorMessage.appendEmptyScopeError.desc} Given Scope: ${givenScope}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error when attempting to append a null, undefined or empty scope to a set\r\n     * @param givenScope\r\n     */\r\n    static createRemoveEmptyScopeFromSetError(givenScope: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.removeEmptyScopeError.code, `${ClientAuthErrorMessage.removeEmptyScopeError.desc} Given Scope: ${givenScope}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error when attempting to append null or empty ScopeSet.\r\n     * @param appendError\r\n     */\r\n    static createAppendScopeSetError(appendError: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.appendScopeSetError.code, `${ClientAuthErrorMessage.appendScopeSetError.desc} Detail Error: ${appendError}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if ScopeSet is null or undefined.\r\n     * @param givenScopeSet\r\n     */\r\n    static createEmptyInputScopeSetError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.emptyInputScopeSetError.code, `${ClientAuthErrorMessage.emptyInputScopeSetError.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if user sets CancellationToken.cancel = true during polling of token endpoint during device code flow\r\n     */\r\n    static createDeviceCodeCancelledError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodePollingCancelled.code, `${ClientAuthErrorMessage.DeviceCodePollingCancelled.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if device code is expired\r\n     */\r\n    static createDeviceCodeExpiredError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeExpired.code, `${ClientAuthErrorMessage.DeviceCodeExpired.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if device code is expired\r\n     */\r\n    static createDeviceCodeUnknownError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.DeviceCodeUnknownError.code, `${ClientAuthErrorMessage.DeviceCodeUnknownError.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error when silent requests are made without an account object\r\n     */\r\n    static createNoAccountInSilentRequestError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.NoAccountInSilentRequest.code, `${ClientAuthErrorMessage.NoAccountInSilentRequest.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error when cache record is null or undefined.\r\n     */\r\n    static createNullOrUndefinedCacheRecord(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheRecord.code, ClientAuthErrorMessage.invalidCacheRecord.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws error when provided environment is not part of the CloudDiscoveryMetadata object\r\n     */\r\n    static createInvalidCacheEnvironmentError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheEnvironment.code, ClientAuthErrorMessage.invalidCacheEnvironment.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws error when account is not found in cache.\r\n     */\r\n    static createNoAccountFoundError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noAccountFound.code, ClientAuthErrorMessage.noAccountFound.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws error if ICachePlugin not set on CacheManager.\r\n     */\r\n    static createCachePluginError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.CachePluginError.code, `${ClientAuthErrorMessage.CachePluginError.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if crypto object not found.\r\n     * @param operationName\r\n     */\r\n    static createNoCryptoObjectError(operationName: string): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noCryptoObj.code, `${ClientAuthErrorMessage.noCryptoObj.desc}${operationName}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if cache type is invalid.\r\n     */\r\n    static createInvalidCacheTypeError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidCacheType.code, `${ClientAuthErrorMessage.invalidCacheType.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if unexpected account type.\r\n     */\r\n    static createUnexpectedAccountTypeError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedAccountType.code, `${ClientAuthErrorMessage.unexpectedAccountType.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if unexpected credential type.\r\n     */\r\n    static createUnexpectedCredentialTypeError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.unexpectedCredentialType.code, `${ClientAuthErrorMessage.unexpectedCredentialType.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if client assertion is not valid.\r\n     */\r\n    static createInvalidAssertionError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidAssertion.code, `${ClientAuthErrorMessage.invalidAssertion.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if client assertion is not valid.\r\n     */\r\n    static createInvalidCredentialError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.invalidClientCredential.code, `${ClientAuthErrorMessage.invalidClientCredential.desc}`);\r\n    }\r\n\r\n    /**\r\n     * Throws error if token cannot be retrieved from cache due to refresh being required.\r\n     */\r\n    static createRefreshRequiredError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenRefreshRequired.code, ClientAuthErrorMessage.tokenRefreshRequired.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws error if the user defined timeout is reached.\r\n     */\r\n    static createUserTimeoutReachedError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.userTimeoutReached.code, ClientAuthErrorMessage.userTimeoutReached.desc);\r\n    }\r\n\r\n    /*\r\n     * Throws error if token claims are not populated for a signed jwt generation\r\n     */\r\n    static createTokenClaimsRequiredError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.tokenClaimsRequired.code, ClientAuthErrorMessage.tokenClaimsRequired.desc);\r\n    }\r\n\r\n    /**\r\n     * Throws error when the authorization code is missing from the server response\r\n     */\r\n    static createNoAuthCodeInServerResponseError(): ClientAuthError {\r\n        return new ClientAuthError(ClientAuthErrorMessage.noAuthorizationCodeFromServer.code, ClientAuthErrorMessage.noAuthorizationCodeFromServer.desc);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}