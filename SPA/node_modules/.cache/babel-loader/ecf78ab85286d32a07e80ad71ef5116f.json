{"ast":null,"code":"/*! @azure/msal-common v4.5.0 2021-07-22 */\n'use strict';\n\nimport { __spreadArrays } from '../_virtual/_tslib.js';\nimport { AADServerParamKeys, Constants as Constants$1, ResponseMode, OIDC_DEFAULT_SCOPES, SSOTypes, HeaderNames, CLIENT_INFO, ClaimsRequestKeys, PasswordGrantConstants, AuthenticationScheme, ThrottlingConstants } from '../utils/Constants.js';\nimport { StringUtils as StringUtils$1 } from '../utils/StringUtils.js';\nimport { ClientConfigurationError as ClientConfigurationError$1 } from '../error/ClientConfigurationError.js';\nimport { ScopeSet as ScopeSet$1 } from './ScopeSet.js';\nimport { RequestValidator as RequestValidator$1 } from './RequestValidator.js';\n/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\n\nvar RequestParameterBuilder = function () {\n  function RequestParameterBuilder() {\n    this.parameters = new Map();\n  }\n  /**\r\n   * add response_type = code\r\n   */\n\n\n  RequestParameterBuilder.prototype.addResponseTypeCode = function () {\n    this.parameters.set(AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants$1.CODE_RESPONSE_TYPE));\n  };\n  /**\r\n   * add response_mode. defaults to query.\r\n   * @param responseMode\r\n   */\n\n\n  RequestParameterBuilder.prototype.addResponseMode = function (responseMode) {\n    this.parameters.set(AADServerParamKeys.RESPONSE_MODE, encodeURIComponent(responseMode ? responseMode : ResponseMode.QUERY));\n  };\n  /**\r\n   * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n   * @param scopeSet\r\n   * @param addOidcScopes\r\n   */\n\n\n  RequestParameterBuilder.prototype.addScopes = function (scopes, addOidcScopes) {\n    if (addOidcScopes === void 0) {\n      addOidcScopes = true;\n    }\n\n    var requestScopes = addOidcScopes ? __spreadArrays(scopes || [], OIDC_DEFAULT_SCOPES) : scopes || [];\n    var scopeSet = new ScopeSet$1(requestScopes);\n    this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\n  };\n  /**\r\n   * add clientId\r\n   * @param clientId\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientId = function (clientId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\n  };\n  /**\r\n   * add redirect_uri\r\n   * @param redirectUri\r\n   */\n\n\n  RequestParameterBuilder.prototype.addRedirectUri = function (redirectUri) {\n    RequestValidator$1.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\n  };\n  /**\r\n   * add post logout redirectUri\r\n   * @param redirectUri\r\n   */\n\n\n  RequestParameterBuilder.prototype.addPostLogoutRedirectUri = function (redirectUri) {\n    RequestValidator$1.validateRedirectUri(redirectUri);\n    this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\n  };\n  /**\r\n   * add id_token_hint to logout request\r\n   * @param idTokenHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addIdTokenHint = function (idTokenHint) {\n    this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\n  };\n  /**\r\n   * add domain_hint\r\n   * @param domainHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addDomainHint = function (domainHint) {\n    this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\n  };\n  /**\r\n   * add login_hint\r\n   * @param loginHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addLoginHint = function (loginHint) {\n    this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\n  };\n  /**\r\n   * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n   * @param loginHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCcsUpn = function (loginHint) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"UPN:\" + loginHint));\n  };\n  /**\r\n   * Adds the CCS (Cache Credential Service) query parameter for account object\r\n   * @param loginHint\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCcsOid = function (clientInfo) {\n    this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(\"Oid:\" + clientInfo.uid + \"@\" + clientInfo.utid));\n  };\n  /**\r\n   * add sid\r\n   * @param sid\r\n   */\n\n\n  RequestParameterBuilder.prototype.addSid = function (sid) {\n    this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\n  };\n  /**\r\n   * add claims\r\n   * @param claims\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClaims = function (claims, clientCapabilities) {\n    var mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\n    RequestValidator$1.validateClaims(mergedClaims);\n    this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\n  };\n  /**\r\n   * add correlationId\r\n   * @param correlationId\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCorrelationId = function (correlationId) {\n    this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\n  };\n  /**\r\n   * add library info query params\r\n   * @param libraryInfo\r\n   */\n\n\n  RequestParameterBuilder.prototype.addLibraryInfo = function (libraryInfo) {\n    // Telemetry Info\n    this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\n    this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\n    this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\n    this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\n  };\n  /**\r\n   * add prompt\r\n   * @param prompt\r\n   */\n\n\n  RequestParameterBuilder.prototype.addPrompt = function (prompt) {\n    RequestValidator$1.validatePrompt(prompt);\n    this.parameters.set(\"\" + AADServerParamKeys.PROMPT, encodeURIComponent(prompt));\n  };\n  /**\r\n   * add state\r\n   * @param state\r\n   */\n\n\n  RequestParameterBuilder.prototype.addState = function (state) {\n    if (!StringUtils$1.isEmpty(state)) {\n      this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\n    }\n  };\n  /**\r\n   * add nonce\r\n   * @param nonce\r\n   */\n\n\n  RequestParameterBuilder.prototype.addNonce = function (nonce) {\n    this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\n  };\n  /**\r\n   * add code_challenge and code_challenge_method\r\n   * - throw if either of them are not passed\r\n   * @param codeChallenge\r\n   * @param codeChallengeMethod\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCodeChallengeParams = function (codeChallenge, codeChallengeMethod) {\n    RequestValidator$1.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\n\n    if (codeChallenge && codeChallengeMethod) {\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\n      this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\n    } else {\n      throw ClientConfigurationError$1.createInvalidCodeChallengeParamsError();\n    }\n  };\n  /**\r\n   * add the `authorization_code` passed by the user to exchange for a token\r\n   * @param code\r\n   */\n\n\n  RequestParameterBuilder.prototype.addAuthorizationCode = function (code) {\n    this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\n  };\n  /**\r\n   * add the `authorization_code` passed by the user to exchange for a token\r\n   * @param code\r\n   */\n\n\n  RequestParameterBuilder.prototype.addDeviceCode = function (code) {\n    this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\n  };\n  /**\r\n   * add the `refreshToken` passed by the user\r\n   * @param refreshToken\r\n   */\n\n\n  RequestParameterBuilder.prototype.addRefreshToken = function (refreshToken) {\n    this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\n  };\n  /**\r\n   * add the `code_verifier` passed by the user to exchange for a token\r\n   * @param codeVerifier\r\n   */\n\n\n  RequestParameterBuilder.prototype.addCodeVerifier = function (codeVerifier) {\n    this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\n  };\n  /**\r\n   * add client_secret\r\n   * @param clientSecret\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientSecret = function (clientSecret) {\n    this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\n  };\n  /**\r\n   * add clientAssertion for confidential client flows\r\n   * @param clientAssertion\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientAssertion = function (clientAssertion) {\n    this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\n  };\n  /**\r\n   * add clientAssertionType for confidential client flows\r\n   * @param clientAssertionType\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientAssertionType = function (clientAssertionType) {\n    this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\n  };\n  /**\r\n   * add OBO assertion for confidential client flows\r\n   * @param clientAssertion\r\n   */\n\n\n  RequestParameterBuilder.prototype.addOboAssertion = function (oboAssertion) {\n    this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\n  };\n  /**\r\n   * add grant type\r\n   * @param grantType\r\n   */\n\n\n  RequestParameterBuilder.prototype.addRequestTokenUse = function (tokenUse) {\n    this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\n  };\n  /**\r\n   * add grant type\r\n   * @param grantType\r\n   */\n\n\n  RequestParameterBuilder.prototype.addGrantType = function (grantType) {\n    this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\n  };\n  /**\r\n   * add client info\r\n   *\r\n   */\n\n\n  RequestParameterBuilder.prototype.addClientInfo = function () {\n    this.parameters.set(CLIENT_INFO, \"1\");\n  };\n  /**\r\n   * add extraQueryParams\r\n   * @param eQparams\r\n   */\n\n\n  RequestParameterBuilder.prototype.addExtraQueryParameters = function (eQparams) {\n    var _this = this;\n\n    RequestValidator$1.sanitizeEQParams(eQparams, this.parameters);\n    Object.keys(eQparams).forEach(function (key) {\n      _this.parameters.set(key, eQparams[key]);\n    });\n  };\n\n  RequestParameterBuilder.prototype.addClientCapabilitiesToClaims = function (claims, clientCapabilities) {\n    var mergedClaims; // Parse provided claims into JSON object or initialize empty object\n\n    if (!claims) {\n      mergedClaims = {};\n    } else {\n      try {\n        mergedClaims = JSON.parse(claims);\n      } catch (e) {\n        throw ClientConfigurationError$1.createInvalidClaimsRequestError();\n      }\n    }\n\n    if (clientCapabilities && clientCapabilities.length > 0) {\n      if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)) {\n        // Add access_token key to claims object\n        mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\n      } // Add xms_cc claim with provided clientCapabilities to access_token key\n\n\n      mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\n        values: clientCapabilities\n      };\n    }\n\n    return JSON.stringify(mergedClaims);\n  };\n  /**\r\n   * adds `username` for Password Grant flow\r\n   * @param username\r\n   */\n\n\n  RequestParameterBuilder.prototype.addUsername = function (username) {\n    this.parameters.set(PasswordGrantConstants.username, username);\n  };\n  /**\r\n   * adds `password` for Password Grant flow\r\n   * @param password\r\n   */\n\n\n  RequestParameterBuilder.prototype.addPassword = function (password) {\n    this.parameters.set(PasswordGrantConstants.password, password);\n  };\n  /**\r\n   * add pop_jwk to query params\r\n   * @param cnfString\r\n   */\n\n\n  RequestParameterBuilder.prototype.addPopToken = function (cnfString) {\n    if (!StringUtils$1.isEmpty(cnfString)) {\n      this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\n      this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\n    }\n  };\n  /**\r\n   * add server telemetry fields\r\n   * @param serverTelemetryManager\r\n   */\n\n\n  RequestParameterBuilder.prototype.addServerTelemetry = function (serverTelemetryManager) {\n    this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\n    this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\n  };\n  /**\r\n   * Adds parameter that indicates to the server that throttling is supported\r\n   */\n\n\n  RequestParameterBuilder.prototype.addThrottling = function () {\n    this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\n  };\n  /**\r\n   * Utility to create a URL from the params map\r\n   */\n\n\n  RequestParameterBuilder.prototype.createQueryString = function () {\n    var queryParameterArray = new Array();\n    this.parameters.forEach(function (value, key) {\n      queryParameterArray.push(key + \"=\" + value);\n    });\n    return queryParameterArray.join(\"&\");\n  };\n\n  return RequestParameterBuilder;\n}();\n\nexport { RequestParameterBuilder };","map":{"version":3,"sources":["../../src/request/RequestParameterBuilder.ts"],"names":["Constants","ScopeSet","RequestValidator","StringUtils","ClientConfigurationError"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { AADServerParamKeys, Constants, ResponseMode, SSOTypes, CLIENT_INFO, AuthenticationScheme, ClaimsRequestKeys, PasswordGrantConstants, OIDC_DEFAULT_SCOPES, ThrottlingConstants, HeaderNames} from \"../utils/Constants\";\r\nimport { ScopeSet } from \"./ScopeSet\";\r\nimport { ClientConfigurationError } from \"../error/ClientConfigurationError\";\r\nimport { StringDict } from \"../utils/MsalTypes\";\r\nimport { RequestValidator } from \"./RequestValidator\";\r\nimport { LibraryInfo } from \"../config/ClientConfiguration\";\r\nimport { StringUtils } from \"../utils/StringUtils\";\r\nimport { ServerTelemetryManager } from \"../telemetry/server/ServerTelemetryManager\";\r\nimport { ClientInfo } from \"../account/ClientInfo\";\r\n\r\nexport class RequestParameterBuilder {\r\n\r\n    private parameters: Map<string, string>;\r\n\r\n    constructor() {\r\n        this.parameters = new Map<string, string>();\r\n    }\r\n\r\n    /**\r\n     * add response_type = code\r\n     */\r\n    addResponseTypeCode(): void {\r\n        this.parameters.set(\r\n            AADServerParamKeys.RESPONSE_TYPE, encodeURIComponent(Constants.CODE_RESPONSE_TYPE)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * add response_mode. defaults to query.\r\n     * @param responseMode\r\n     */\r\n    addResponseMode(responseMode?: ResponseMode): void {\r\n        this.parameters.set(\r\n            AADServerParamKeys.RESPONSE_MODE,\r\n            encodeURIComponent((responseMode) ? responseMode : ResponseMode.QUERY)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * add scopes. set addOidcScopes to false to prevent default scopes in non-user scenarios\r\n     * @param scopeSet\r\n     * @param addOidcScopes\r\n     */\r\n    addScopes(scopes: string[], addOidcScopes: boolean = true): void {\r\n        const requestScopes = addOidcScopes ? [...scopes || [], ...OIDC_DEFAULT_SCOPES] : scopes || [];\r\n        const scopeSet = new ScopeSet(requestScopes);\r\n        this.parameters.set(AADServerParamKeys.SCOPE, encodeURIComponent(scopeSet.printScopes()));\r\n    }\r\n\r\n    /**\r\n     * add clientId\r\n     * @param clientId\r\n     */\r\n    addClientId(clientId: string): void {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_ID, encodeURIComponent(clientId));\r\n    }\r\n\r\n    /**\r\n     * add redirect_uri\r\n     * @param redirectUri\r\n     */\r\n    addRedirectUri(redirectUri: string): void {\r\n        RequestValidator.validateRedirectUri(redirectUri);\r\n        this.parameters.set(AADServerParamKeys.REDIRECT_URI, encodeURIComponent(redirectUri));\r\n    }\r\n\r\n    /**\r\n     * add post logout redirectUri\r\n     * @param redirectUri\r\n     */\r\n    addPostLogoutRedirectUri(redirectUri: string): void {\r\n        RequestValidator.validateRedirectUri(redirectUri);\r\n        this.parameters.set(AADServerParamKeys.POST_LOGOUT_URI, encodeURIComponent(redirectUri));\r\n    }\r\n\r\n    /**\r\n     * add id_token_hint to logout request\r\n     * @param idTokenHint\r\n     */\r\n    addIdTokenHint(idTokenHint: string): void {\r\n        this.parameters.set(AADServerParamKeys.ID_TOKEN_HINT, encodeURIComponent(idTokenHint));\r\n    }\r\n\r\n    /**\r\n     * add domain_hint\r\n     * @param domainHint\r\n     */\r\n    addDomainHint(domainHint: string): void {\r\n        this.parameters.set(SSOTypes.DOMAIN_HINT, encodeURIComponent(domainHint));\r\n    }\r\n\r\n    /**\r\n     * add login_hint\r\n     * @param loginHint\r\n     */\r\n    addLoginHint(loginHint: string): void {\r\n        this.parameters.set(SSOTypes.LOGIN_HINT, encodeURIComponent(loginHint));\r\n    }\r\n\r\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for login_hint\r\n     * @param loginHint \r\n     */\r\n    addCcsUpn(loginHint: string): void {\r\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`UPN:${loginHint}`));\r\n    }\r\n\r\n    /**\r\n     * Adds the CCS (Cache Credential Service) query parameter for account object\r\n     * @param loginHint \r\n     */\r\n    addCcsOid(clientInfo: ClientInfo): void {\r\n        this.parameters.set(HeaderNames.CCS_HEADER, encodeURIComponent(`Oid:${clientInfo.uid}@${clientInfo.utid}`));\r\n    }\r\n\r\n    /**\r\n     * add sid\r\n     * @param sid\r\n     */\r\n    addSid(sid: string): void {\r\n        this.parameters.set(SSOTypes.SID, encodeURIComponent(sid));\r\n    }\r\n\r\n    /**\r\n     * add claims\r\n     * @param claims\r\n     */\r\n    addClaims(claims?: string, clientCapabilities?: Array<string>): void {\r\n        const mergedClaims = this.addClientCapabilitiesToClaims(claims, clientCapabilities);\r\n        RequestValidator.validateClaims(mergedClaims);\r\n        this.parameters.set(AADServerParamKeys.CLAIMS, encodeURIComponent(mergedClaims));\r\n    }\r\n\r\n    /**\r\n     * add correlationId\r\n     * @param correlationId\r\n     */\r\n    addCorrelationId(correlationId: string): void {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_REQUEST_ID, encodeURIComponent(correlationId));\r\n    }\r\n\r\n    /**\r\n     * add library info query params\r\n     * @param libraryInfo\r\n     */\r\n    addLibraryInfo(libraryInfo: LibraryInfo): void {\r\n        // Telemetry Info\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_SKU, libraryInfo.sku);\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_VER, libraryInfo.version);\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_OS, libraryInfo.os);\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CPU, libraryInfo.cpu);\r\n    }\r\n\r\n    /**\r\n     * add prompt\r\n     * @param prompt\r\n     */\r\n    addPrompt(prompt: string): void {\r\n        RequestValidator.validatePrompt(prompt);\r\n        this.parameters.set(`${AADServerParamKeys.PROMPT}`, encodeURIComponent(prompt));\r\n    }\r\n\r\n    /**\r\n     * add state\r\n     * @param state\r\n     */\r\n    addState(state: string): void {\r\n        if (!StringUtils.isEmpty(state)) {\r\n            this.parameters.set(AADServerParamKeys.STATE, encodeURIComponent(state));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add nonce\r\n     * @param nonce\r\n     */\r\n    addNonce(nonce: string): void {\r\n        this.parameters.set(AADServerParamKeys.NONCE, encodeURIComponent(nonce));\r\n    }\r\n\r\n    /**\r\n     * add code_challenge and code_challenge_method\r\n     * - throw if either of them are not passed\r\n     * @param codeChallenge\r\n     * @param codeChallengeMethod\r\n     */\r\n    addCodeChallengeParams(\r\n        codeChallenge: string,\r\n        codeChallengeMethod: string\r\n    ): void {\r\n        RequestValidator.validateCodeChallengeParams(codeChallenge, codeChallengeMethod);\r\n        if (codeChallenge && codeChallengeMethod) {\r\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE, encodeURIComponent(codeChallenge));\r\n            this.parameters.set(AADServerParamKeys.CODE_CHALLENGE_METHOD, encodeURIComponent(codeChallengeMethod));\r\n        } else {\r\n            throw ClientConfigurationError.createInvalidCodeChallengeParamsError();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */\r\n    addAuthorizationCode(code: string): void {\r\n        this.parameters.set(AADServerParamKeys.CODE, encodeURIComponent(code));\r\n    }\r\n\r\n    /**\r\n     * add the `authorization_code` passed by the user to exchange for a token\r\n     * @param code\r\n     */\r\n    addDeviceCode(code: string): void {\r\n        this.parameters.set(AADServerParamKeys.DEVICE_CODE, encodeURIComponent(code));\r\n    }\r\n\r\n    /**\r\n     * add the `refreshToken` passed by the user\r\n     * @param refreshToken\r\n     */\r\n    addRefreshToken(refreshToken: string): void {\r\n        this.parameters.set(AADServerParamKeys.REFRESH_TOKEN, encodeURIComponent(refreshToken));\r\n    }\r\n\r\n    /**\r\n     * add the `code_verifier` passed by the user to exchange for a token\r\n     * @param codeVerifier\r\n     */\r\n    addCodeVerifier(codeVerifier: string): void {\r\n        this.parameters.set(AADServerParamKeys.CODE_VERIFIER, encodeURIComponent(codeVerifier));\r\n    }\r\n\r\n    /**\r\n     * add client_secret\r\n     * @param clientSecret\r\n     */\r\n    addClientSecret(clientSecret: string): void {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_SECRET, encodeURIComponent(clientSecret));\r\n    }\r\n\r\n    /**\r\n     * add clientAssertion for confidential client flows\r\n     * @param clientAssertion\r\n     */\r\n    addClientAssertion(clientAssertion: string): void {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION, encodeURIComponent(clientAssertion));\r\n    }\r\n\r\n    /**\r\n     * add clientAssertionType for confidential client flows\r\n     * @param clientAssertionType\r\n     */\r\n    addClientAssertionType(clientAssertionType: string): void {\r\n        this.parameters.set(AADServerParamKeys.CLIENT_ASSERTION_TYPE, encodeURIComponent(clientAssertionType));\r\n    }\r\n\r\n    /**\r\n     * add OBO assertion for confidential client flows\r\n     * @param clientAssertion\r\n     */\r\n    addOboAssertion(oboAssertion: string): void {\r\n        this.parameters.set(AADServerParamKeys.OBO_ASSERTION, encodeURIComponent(oboAssertion));\r\n    }\r\n\r\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */\r\n    addRequestTokenUse(tokenUse: string): void {\r\n        this.parameters.set(AADServerParamKeys.REQUESTED_TOKEN_USE, encodeURIComponent(tokenUse));\r\n    }\r\n\r\n    /**\r\n     * add grant type\r\n     * @param grantType\r\n     */\r\n    addGrantType(grantType: string): void {\r\n        this.parameters.set(AADServerParamKeys.GRANT_TYPE, encodeURIComponent(grantType));\r\n    }\r\n\r\n    /**\r\n     * add client info\r\n     *\r\n     */\r\n    addClientInfo(): void {\r\n        this.parameters.set(CLIENT_INFO, \"1\");\r\n    }\r\n\r\n    /**\r\n     * add extraQueryParams\r\n     * @param eQparams\r\n     */\r\n    addExtraQueryParameters(eQparams: StringDict): void {\r\n        RequestValidator.sanitizeEQParams(eQparams, this.parameters);\r\n        Object.keys(eQparams).forEach((key) => {\r\n            this.parameters.set(key, eQparams[key]);\r\n        });\r\n    }\r\n\r\n    addClientCapabilitiesToClaims(claims?: string, clientCapabilities?: Array<string>): string {\r\n        let mergedClaims: object;\r\n\r\n        // Parse provided claims into JSON object or initialize empty object\r\n        if (!claims) {\r\n            mergedClaims = {};\r\n        } else {\r\n            try {\r\n                mergedClaims = JSON.parse(claims);\r\n            } catch(e) {\r\n                throw ClientConfigurationError.createInvalidClaimsRequestError();\r\n            }\r\n        }\r\n\r\n        if (clientCapabilities && clientCapabilities.length > 0) {\r\n            if (!mergedClaims.hasOwnProperty(ClaimsRequestKeys.ACCESS_TOKEN)){\r\n                // Add access_token key to claims object\r\n                mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN] = {};\r\n            }\r\n\r\n            // Add xms_cc claim with provided clientCapabilities to access_token key\r\n            mergedClaims[ClaimsRequestKeys.ACCESS_TOKEN][ClaimsRequestKeys.XMS_CC] = {\r\n                values: clientCapabilities\r\n            };\r\n        }\r\n\r\n        return JSON.stringify(mergedClaims);\r\n    }\r\n\r\n    /**\r\n     * adds `username` for Password Grant flow\r\n     * @param username\r\n     */\r\n    addUsername(username: string): void {\r\n        this.parameters.set(PasswordGrantConstants.username, username);\r\n    }\r\n\r\n    /**\r\n     * adds `password` for Password Grant flow\r\n     * @param password\r\n     */\r\n    addPassword(password: string): void {\r\n        this.parameters.set(PasswordGrantConstants.password, password);\r\n    }\r\n\r\n    /**\r\n     * add pop_jwk to query params\r\n     * @param cnfString\r\n     */\r\n    addPopToken(cnfString: string): void {\r\n        if (!StringUtils.isEmpty(cnfString)) {\r\n            this.parameters.set(AADServerParamKeys.TOKEN_TYPE, AuthenticationScheme.POP);\r\n            this.parameters.set(AADServerParamKeys.REQ_CNF, encodeURIComponent(cnfString));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add server telemetry fields\r\n     * @param serverTelemetryManager \r\n     */\r\n    addServerTelemetry(serverTelemetryManager: ServerTelemetryManager): void {\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_CURR_TELEM, serverTelemetryManager.generateCurrentRequestHeaderValue());\r\n        this.parameters.set(AADServerParamKeys.X_CLIENT_LAST_TELEM, serverTelemetryManager.generateLastRequestHeaderValue());\r\n    }\r\n\r\n    /**\r\n     * Adds parameter that indicates to the server that throttling is supported\r\n     */\r\n    addThrottling(): void {\r\n        this.parameters.set(AADServerParamKeys.X_MS_LIB_CAPABILITY, ThrottlingConstants.X_MS_LIB_CAPABILITY_VALUE);\r\n    }\r\n\r\n    /**\r\n     * Utility to create a URL from the params map\r\n     */\r\n    createQueryString(): string {\r\n        const queryParameterArray: Array<string> = new Array<string>();\r\n\r\n        this.parameters.forEach((value, key) => {\r\n            queryParameterArray.push(`${key}=${value}`);\r\n        });\r\n\r\n        return queryParameterArray.join(\"&\");\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}