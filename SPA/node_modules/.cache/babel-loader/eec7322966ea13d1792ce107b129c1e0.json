{"ast":null,"code":"var _jsxFileName = \"/Users/speedsis/Downloads/ms-identity-javascript-react-tutorial-main/2-Authorization-I/1-call-graph/SPA/src/index.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { PublicClientApplication } from \"@azure/msal-browser\";\nimport { App } from \"./App.jsx\";\nimport { msalConfig } from \"./authConfig\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles/index.css\";\n/**\n * MSAL should be instantiated outside of the component tree to prevent it from being re-instantiated on re-renders. \n * For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const msalInstance = new PublicClientApplication(msalConfig); // Account selection logic is app dependent. Adjust as needed for different use cases.\n\nconst accounts = msalInstance.getAllAccounts();\n\nif (accounts.length > 0) {\n  msalInstance.setActiveAccount(accounts[0]);\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(App, {\n    instance: msalInstance\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 26,\n  columnNumber: 3\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/Users/speedsis/Downloads/ms-identity-javascript-react-tutorial-main/2-Authorization-I/1-call-graph/SPA/src/index.js"],"names":["React","ReactDOM","PublicClientApplication","App","msalConfig","msalInstance","accounts","getAllAccounts","length","setActiveAccount","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AAEA,SAASC,uBAAT,QAAwC,qBAAxC;AAEA,SAASC,GAAT,QAAoB,WAApB;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA,OAAO,sCAAP;AACA,OAAO,oBAAP;AAEA;AACA;AACA;AACA;;;AACA,OAAO,MAAMC,YAAY,GAAG,IAAIH,uBAAJ,CAA4BE,UAA5B,CAArB,C,CAEP;;AACA,MAAME,QAAQ,GAAGD,YAAY,CAACE,cAAb,EAAjB;;AAEA,IAAID,QAAQ,CAACE,MAAT,GAAkB,CAAtB,EAAyB;AACvBH,EAAAA,YAAY,CAACI,gBAAb,CAA8BH,QAAQ,CAAC,CAAD,CAAtC;AACD;;AAEDL,QAAQ,CAACS,MAAT,eACE,QAAC,KAAD,CAAO,UAAP;AAAA,yBACE,QAAC,GAAD;AAAK,IAAA,QAAQ,EAAEL;AAAf;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,QADF,EAIEM,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAJF","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { PublicClientApplication } from \"@azure/msal-browser\";\n\nimport { App } from \"./App.jsx\";\nimport { msalConfig } from \"./authConfig\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles/index.css\";\n\n/**\n * MSAL should be instantiated outside of the component tree to prevent it from being re-instantiated on re-renders. \n * For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\n */\nexport const msalInstance = new PublicClientApplication(msalConfig);\n\n// Account selection logic is app dependent. Adjust as needed for different use cases.\nconst accounts = msalInstance.getAllAccounts();\n\nif (accounts.length > 0) {\n  msalInstance.setActiveAccount(accounts[0]);\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App instance={msalInstance} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}